
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002054  000020e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800090  00800090  00002118  2**0
                  ALLOC
  3 .stab         00002268  00000000  00000000  00002118  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d8  00000000  00000000  00004380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007551  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000843c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000091ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000934c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000095d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_7>
      20:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__vector_8>
      24:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 0a 	call	0x1424	; 0x1424 <main>
      8a:	0c 94 28 10 	jmp	0x2050	; 0x2050 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*
 * Description :
 * function to initialize the buzzer
 */
void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c8 06 	call	0xd90	; 0xd90 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>

	}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description :
 * function to fire the buzzer
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description :
 * function to stop the buzzer
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
	}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
 * description: the fun is responsible for initialize the values of the dc motors
 *input: void
 * return void
 */
void DcMotor_Init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	//initialize the direction of the pins which connected to H bridge to be output
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 c8 06 	call	0xd90	; 0xd90 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 c8 06 	call	0xd90	; 0xd90 <GPIO_setupPinDirection>
	//initially stop the dc-motor
	GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	67 e0       	ldi	r22, 0x07	; 7
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:
 * description: the fun is responsible for determining the state of the motor and its speed
 *input: The function is responsible for moving the motor according to the input speed and condition
 * return void
 */
void DcMotor_Rotate(DC_MOTOR_direction state)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	3b 83       	std	Y+3, r19	; 0x03
     be4:	2a 83       	std	Y+2, r18	; 0x02
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	9b 81       	ldd	r25, Y+3	; 0x03
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	a1 f0       	breq	.+40     	; 0xc18 <DcMotor_Rotate+0x4a>
     bf0:	2a 81       	ldd	r18, Y+2	; 0x02
     bf2:	3b 81       	ldd	r19, Y+3	; 0x03
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	d1 f0       	breq	.+52     	; 0xc2e <DcMotor_Rotate+0x60>
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	01 f5       	brne	.+64     	; 0xc42 <DcMotor_Rotate+0x74>
	{
	//access the pins according to the state
	case stop:
		GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_LOW);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	66 e0       	ldi	r22, 0x06	; 6
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_LOW);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	67 e0       	ldi	r22, 0x07	; 7
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
     c16:	15 c0       	rjmp	.+42     	; 0xc42 <DcMotor_Rotate+0x74>
		break;
	case clockwise:
		GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_HIGH);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	66 e0       	ldi	r22, 0x06	; 6
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_LOW);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	67 e0       	ldi	r22, 0x07	; 7
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
     c2c:	0a c0       	rjmp	.+20     	; 0xc42 <DcMotor_Rotate+0x74>
		break;
	case anticlockwise:
		GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_LOW);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	66 e0       	ldi	r22, 0x06	; 6
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_HIGH);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	67 e0       	ldi	r22, 0x07	; 7
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	0e 94 b3 07 	call	0xf66	; 0xf66 <GPIO_writePin>
		break;
	}

	//the fun move the motor according to the speed which was entered By producing a specific PWM signal with specific duty cycle

}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <EEPROM_writeByte+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <EEPROM_writeByte+0x8>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c60:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c64:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     c68:	88 30       	cpi	r24, 0x08	; 8
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_writeByte+0x22>
        return ERROR;
     c6c:	1c 82       	std	Y+4, r1	; 0x04
     c6e:	28 c0       	rjmp	.+80     	; 0xcc0 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	80 70       	andi	r24, 0x00	; 0
     c76:	97 70       	andi	r25, 0x07	; 7
     c78:	88 0f       	add	r24, r24
     c7a:	89 2f       	mov	r24, r25
     c7c:	88 1f       	adc	r24, r24
     c7e:	99 0b       	sbc	r25, r25
     c80:	91 95       	neg	r25
     c82:	80 6a       	ori	r24, 0xA0	; 160
     c84:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c88:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     c8c:	88 31       	cpi	r24, 0x18	; 24
     c8e:	11 f0       	breq	.+4      	; 0xc94 <EEPROM_writeByte+0x46>
        return ERROR;
     c90:	1c 82       	std	Y+4, r1	; 0x04
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c9a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     c9e:	88 32       	cpi	r24, 0x28	; 40
     ca0:	11 f0       	breq	.+4      	; 0xca6 <EEPROM_writeByte+0x58>
        return ERROR;
     ca2:	1c 82       	std	Y+4, r1	; 0x04
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cac:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     cb0:	88 32       	cpi	r24, 0x28	; 40
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <EEPROM_writeByte+0x6a>
        return ERROR;
     cb4:	1c 82       	std	Y+4, r1	; 0x04
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cb8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_stop>

    return SUCCESS;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	8c 83       	std	Y+4, r24	; 0x04
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <EEPROM_readByte+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <EEPROM_readByte+0x8>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ce6:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cea:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <EEPROM_readByte+0x26>
        return ERROR;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	80 70       	andi	r24, 0x00	; 0
     cfc:	97 70       	andi	r25, 0x07	; 7
     cfe:	88 0f       	add	r24, r24
     d00:	89 2f       	mov	r24, r25
     d02:	88 1f       	adc	r24, r24
     d04:	99 0b       	sbc	r25, r25
     d06:	91 95       	neg	r25
     d08:	80 6a       	ori	r24, 0xA0	; 160
     d0a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d0e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     d12:	88 31       	cpi	r24, 0x18	; 24
     d14:	11 f0       	breq	.+4      	; 0xd1a <EEPROM_readByte+0x4a>
        return ERROR;
     d16:	1d 82       	std	Y+5, r1	; 0x05
     d18:	32 c0       	rjmp	.+100    	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d20:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     d24:	88 32       	cpi	r24, 0x28	; 40
     d26:	11 f0       	breq	.+4      	; 0xd2c <EEPROM_readByte+0x5c>
        return ERROR;
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	29 c0       	rjmp	.+82     	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     d2c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d30:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     d34:	80 31       	cpi	r24, 0x10	; 16
     d36:	11 f0       	breq	.+4      	; 0xd3c <EEPROM_readByte+0x6c>
        return ERROR;
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	80 70       	andi	r24, 0x00	; 0
     d42:	97 70       	andi	r25, 0x07	; 7
     d44:	88 0f       	add	r24, r24
     d46:	89 2f       	mov	r24, r25
     d48:	88 1f       	adc	r24, r24
     d4a:	99 0b       	sbc	r25, r25
     d4c:	91 95       	neg	r25
     d4e:	81 6a       	ori	r24, 0xA1	; 161
     d50:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d54:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     d58:	80 34       	cpi	r24, 0x40	; 64
     d5a:	11 f0       	breq	.+4      	; 0xd60 <EEPROM_readByte+0x90>
        return ERROR;
     d5c:	1d 82       	std	Y+5, r1	; 0x05
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d60:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <TWI_readByteWithNACK>
     d64:	eb 81       	ldd	r30, Y+3	; 0x03
     d66:	fc 81       	ldd	r31, Y+4	; 0x04
     d68:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d6a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_getStatus>
     d6e:	88 35       	cpi	r24, 0x58	; 88
     d70:	11 f0       	breq	.+4      	; 0xd76 <EEPROM_readByte+0xa6>
        return ERROR;
     d72:	1d 82       	std	Y+5, r1	; 0x05
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d76:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <TWI_stop>

    return SUCCESS;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <GPIO_setupPinDirection>:
 * description: the fun is responsible for set the dir of the pins input/output
 *input: the port number, pin number and the  wanted direction
 * return void
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirectionType direction)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	00 d0       	rcall	.+0      	; 0xd96 <GPIO_setupPinDirection+0x6>
     d96:	00 d0       	rcall	.+0      	; 0xd98 <GPIO_setupPinDirection+0x8>
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	6a 83       	std	Y+2, r22	; 0x02
     da2:	4b 83       	std	Y+3, r20	; 0x03
	//if the entered port number or pin number is greater than the number of total ports and pins then do nothing
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT))
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	08 f0       	brcs	.+2      	; 0xdac <GPIO_setupPinDirection+0x1c>
     daa:	d5 c0       	rjmp	.+426    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 30       	cpi	r24, 0x08	; 8
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <GPIO_setupPinDirection+0x24>
     db2:	d1 c0       	rjmp	.+418    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
		/* do nothing */
	}
	/* Setup the pin direction as required */
	else
	{
		switch(port_num)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	3d 83       	std	Y+5, r19	; 0x05
     dbc:	2c 83       	std	Y+4, r18	; 0x04
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	9d 81       	ldd	r25, Y+5	; 0x05
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	91 05       	cpc	r25, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <GPIO_setupPinDirection+0x3a>
     dc8:	43 c0       	rjmp	.+134    	; 0xe50 <GPIO_setupPinDirection+0xc0>
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <GPIO_setupPinDirection+0x4e>
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	71 f0       	breq	.+28     	; 0xdf8 <GPIO_setupPinDirection+0x68>
     ddc:	bc c0       	rjmp	.+376    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <GPIO_setupPinDirection+0x5a>
     de8:	5f c0       	rjmp	.+190    	; 0xea8 <GPIO_setupPinDirection+0x118>
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	9d 81       	ldd	r25, Y+5	; 0x05
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <GPIO_setupPinDirection+0x66>
     df4:	85 c0       	rjmp	.+266    	; 0xf00 <GPIO_setupPinDirection+0x170>
     df6:	af c0       	rjmp	.+350    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID :
			if(direction == PIN_OUTPUT)
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	a1 f4       	brne	.+40     	; 0xe26 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dfe:	aa e3       	ldi	r26, 0x3A	; 58
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <GPIO_setupPinDirection+0x8c>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <GPIO_setupPinDirection+0x88>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	98 c0       	rjmp	.+304    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <GPIO_setupPinDirection+0xb4>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <GPIO_setupPinDirection+0xb0>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	83 c0       	rjmp	.+262    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e56:	a7 e3       	ldi	r26, 0x37	; 55
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e3       	ldi	r30, 0x37	; 55
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <GPIO_setupPinDirection+0xe4>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <GPIO_setupPinDirection+0xe0>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	6c c0       	rjmp	.+216    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e7e:	a7 e3       	ldi	r26, 0x37	; 55
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e3       	ldi	r30, 0x37	; 55
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <GPIO_setupPinDirection+0x10c>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <GPIO_setupPinDirection+0x108>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	57 c0       	rjmp	.+174    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	a1 f4       	brne	.+40     	; 0xed6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     eae:	a4 e3       	ldi	r26, 0x34	; 52
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e4 e3       	ldi	r30, 0x34	; 52
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <GPIO_setupPinDirection+0x13c>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <GPIO_setupPinDirection+0x138>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	40 c0       	rjmp	.+128    	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ed6:	a4 e3       	ldi	r26, 0x34	; 52
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e4 e3       	ldi	r30, 0x34	; 52
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <GPIO_setupPinDirection+0x164>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <GPIO_setupPinDirection+0x160>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	2b c0       	rjmp	.+86     	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	a1 f4       	brne	.+40     	; 0xf2e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f06:	a1 e3       	ldi	r26, 0x31	; 49
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <GPIO_setupPinDirection+0x194>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <GPIO_setupPinDirection+0x190>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f2e:	a1 e3       	ldi	r26, 0x31	; 49
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e1 e3       	ldi	r30, 0x31	; 49
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <GPIO_setupPinDirection+0x1bc>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <GPIO_setupPinDirection+0x1b8>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <GPIO_writePin>:
 * description: the fun is responsible for writing the entered value in the entered pin
 *input: the port number, pin number and the  value to be written in the pin
 * return void
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <GPIO_writePin+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <GPIO_writePin+0x8>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	6a 83       	std	Y+2, r22	; 0x02
     f78:	4b 83       	std	Y+3, r20	; 0x03
	//if the entered port number or pin number is greater than the number of total ports and pins then do nothing
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT))
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <GPIO_writePin+0x1c>
     f80:	d5 c0       	rjmp	.+426    	; 0x112c <GPIO_writePin+0x1c6>
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	08 f0       	brcs	.+2      	; 0xf8a <GPIO_writePin+0x24>
     f88:	d1 c0       	rjmp	.+418    	; 0x112c <GPIO_writePin+0x1c6>
		/* do nothing */
	}
	/* Write the pin value as required */
	else
	{
		switch(port_num)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3d 83       	std	Y+5, r19	; 0x05
     f92:	2c 83       	std	Y+4, r18	; 0x04
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <GPIO_writePin+0x3a>
     f9e:	43 c0       	rjmp	.+134    	; 0x1026 <GPIO_writePin+0xc0>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <GPIO_writePin+0x4e>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	71 f0       	breq	.+28     	; 0xfce <GPIO_writePin+0x68>
     fb2:	bc c0       	rjmp	.+376    	; 0x112c <GPIO_writePin+0x1c6>
     fb4:	2c 81       	ldd	r18, Y+4	; 0x04
     fb6:	3d 81       	ldd	r19, Y+5	; 0x05
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <GPIO_writePin+0x5a>
     fbe:	5f c0       	rjmp	.+190    	; 0x107e <GPIO_writePin+0x118>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <GPIO_writePin+0x66>
     fca:	85 c0       	rjmp	.+266    	; 0x10d6 <GPIO_writePin+0x170>
     fcc:	af c0       	rjmp	.+350    	; 0x112c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	a1 f4       	brne	.+40     	; 0xffc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fd4:	ab e3       	ldi	r26, 0x3B	; 59
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	eb e3       	ldi	r30, 0x3B	; 59
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_writePin+0x8c>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_writePin+0x88>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	98 c0       	rjmp	.+304    	; 0x112c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ffc:	ab e3       	ldi	r26, 0x3B	; 59
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	eb e3       	ldi	r30, 0x3B	; 59
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <GPIO_writePin+0xb4>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <GPIO_writePin+0xb0>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	83 c0       	rjmp	.+262    	; 0x112c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	a1 f4       	brne	.+40     	; 0x1054 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    102c:	a8 e3       	ldi	r26, 0x38	; 56
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e8 e3       	ldi	r30, 0x38	; 56
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <GPIO_writePin+0xe4>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <GPIO_writePin+0xe0>
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	6c c0       	rjmp	.+216    	; 0x112c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1054:	a8 e3       	ldi	r26, 0x38	; 56
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e8 e3       	ldi	r30, 0x38	; 56
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <GPIO_writePin+0x10c>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <GPIO_writePin+0x108>
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	57 c0       	rjmp	.+174    	; 0x112c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	a1 f4       	brne	.+40     	; 0x10ac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1084:	a5 e3       	ldi	r26, 0x35	; 53
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e3       	ldi	r30, 0x35	; 53
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_writePin+0x13c>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_writePin+0x138>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	40 c0       	rjmp	.+128    	; 0x112c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <GPIO_writePin+0x164>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <GPIO_writePin+0x160>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	2b c0       	rjmp	.+86     	; 0x112c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	a1 f4       	brne	.+40     	; 0x1104 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10dc:	a2 e3       	ldi	r26, 0x32	; 50
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e2 e3       	ldi	r30, 0x32	; 50
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_writePin+0x194>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_writePin+0x190>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	14 c0       	rjmp	.+40     	; 0x112c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1104:	a2 e3       	ldi	r26, 0x32	; 50
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e2 e3       	ldi	r30, 0x32	; 50
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <GPIO_writePin+0x1bc>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <GPIO_writePin+0x1b8>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <GPIO_readPin>:
 *input: the port number and pin number
 * return the value for the required pin
 */

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_readPin+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <GPIO_readPin+0x8>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value=LOGIC_LOW;
    114e:	19 82       	std	Y+1, r1	; 0x01
	//if the entered port number or pin number is greater than the number of total ports and pins then do nothing
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT))
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	08 f0       	brcs	.+2      	; 0x1158 <GPIO_readPin+0x1c>
    1156:	84 c0       	rjmp	.+264    	; 0x1260 <GPIO_readPin+0x124>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <GPIO_readPin+0x24>
    115e:	80 c0       	rjmp	.+256    	; 0x1260 <GPIO_readPin+0x124>
		/* do nothing */
	}
	/* return the value of required pin */
	else
	{
		switch(port_num)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3d 83       	std	Y+5, r19	; 0x05
    1168:	2c 83       	std	Y+4, r18	; 0x04
    116a:	4c 81       	ldd	r20, Y+4	; 0x04
    116c:	5d 81       	ldd	r21, Y+5	; 0x05
    116e:	41 30       	cpi	r20, 0x01	; 1
    1170:	51 05       	cpc	r21, r1
    1172:	79 f1       	breq	.+94     	; 0x11d2 <GPIO_readPin+0x96>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	91 05       	cpc	r25, r1
    117c:	34 f4       	brge	.+12     	; 0x118a <GPIO_readPin+0x4e>
    117e:	2c 81       	ldd	r18, Y+4	; 0x04
    1180:	3d 81       	ldd	r19, Y+5	; 0x05
    1182:	21 15       	cp	r18, r1
    1184:	31 05       	cpc	r19, r1
    1186:	69 f0       	breq	.+26     	; 0x11a2 <GPIO_readPin+0x66>
    1188:	6b c0       	rjmp	.+214    	; 0x1260 <GPIO_readPin+0x124>
    118a:	4c 81       	ldd	r20, Y+4	; 0x04
    118c:	5d 81       	ldd	r21, Y+5	; 0x05
    118e:	42 30       	cpi	r20, 0x02	; 2
    1190:	51 05       	cpc	r21, r1
    1192:	b9 f1       	breq	.+110    	; 0x1202 <GPIO_readPin+0xc6>
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	91 05       	cpc	r25, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <GPIO_readPin+0x64>
    119e:	49 c0       	rjmp	.+146    	; 0x1232 <GPIO_readPin+0xf6>
    11a0:	5f c0       	rjmp	.+190    	; 0x1260 <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if(BIT_IS_SET(PINA,pin_num))
    11a2:	e9 e3       	ldi	r30, 0x39	; 57
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_readPin+0x7e>
    11b6:	55 95       	asr	r21
    11b8:	47 95       	ror	r20
    11ba:	8a 95       	dec	r24
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_readPin+0x7a>
    11be:	ca 01       	movw	r24, r20
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	90 70       	andi	r25, 0x00	; 0
    11c4:	88 23       	and	r24, r24
    11c6:	19 f0       	breq	.+6      	; 0x11ce <GPIO_readPin+0x92>
			{
				pin_value= LOGIC_HIGH;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	49 c0       	rjmp	.+146    	; 0x1260 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    11ce:	19 82       	std	Y+1, r1	; 0x01
    11d0:	47 c0       	rjmp	.+142    	; 0x1260 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11d2:	e6 e3       	ldi	r30, 0x36	; 54
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_readPin+0xae>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_readPin+0xaa>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	90 70       	andi	r25, 0x00	; 0
    11f4:	88 23       	and	r24, r24
    11f6:	19 f0       	breq	.+6      	; 0x11fe <GPIO_readPin+0xc2>
			{
				pin_value= LOGIC_HIGH;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	31 c0       	rjmp	.+98     	; 0x1260 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	2f c0       	rjmp	.+94     	; 0x1260 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1202:	e3 e3       	ldi	r30, 0x33	; 51
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <GPIO_readPin+0xde>
    1216:	55 95       	asr	r21
    1218:	47 95       	ror	r20
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <GPIO_readPin+0xda>
    121e:	ca 01       	movw	r24, r20
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	90 70       	andi	r25, 0x00	; 0
    1224:	88 23       	and	r24, r24
    1226:	19 f0       	breq	.+6      	; 0x122e <GPIO_readPin+0xf2>
			{
				pin_value= LOGIC_HIGH;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	19 c0       	rjmp	.+50     	; 0x1260 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    122e:	19 82       	std	Y+1, r1	; 0x01
    1230:	17 c0       	rjmp	.+46     	; 0x1260 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1232:	e0 e3       	ldi	r30, 0x30	; 48
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <GPIO_readPin+0x10e>
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <GPIO_readPin+0x10a>
    124e:	ca 01       	movw	r24, r20
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	90 70       	andi	r25, 0x00	; 0
    1254:	88 23       	and	r24, r24
    1256:	19 f0       	breq	.+6      	; 0x125e <GPIO_readPin+0x122>
			{
				pin_value= LOGIC_HIGH;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    125e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <GPIO_setupPortDirection>:
 */



void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <GPIO_setupPortDirection+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <GPIO_setupPortDirection+0x8>
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	6a 83       	std	Y+2, r22	; 0x02
	//if the entered port number is greater than the number of total ports then do nothing
	if((port_num>=NUM_OF_PORTS))
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	90 f5       	brcc	.+100    	; 0x12ec <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	}
	/* set the direction of the port as required */
	else
	{
		switch(port_num)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3c 83       	std	Y+4, r19	; 0x04
    1290:	2b 83       	std	Y+3, r18	; 0x03
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	d1 f0       	breq	.+52     	; 0x12d0 <GPIO_setupPortDirection+0x5e>
    129c:	2b 81       	ldd	r18, Y+3	; 0x03
    129e:	3c 81       	ldd	r19, Y+4	; 0x04
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <GPIO_setupPortDirection+0x3e>
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <GPIO_setupPortDirection+0x54>
    12ae:	1e c0       	rjmp	.+60     	; 0x12ec <GPIO_setupPortDirection+0x7a>
    12b0:	2b 81       	ldd	r18, Y+3	; 0x03
    12b2:	3c 81       	ldd	r19, Y+4	; 0x04
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	81 f0       	breq	.+32     	; 0x12da <GPIO_setupPortDirection+0x68>
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <GPIO_setupPortDirection+0x72>
    12c4:	13 c0       	rjmp	.+38     	; 0x12ec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID :
			DDRA= direction;
    12c6:	ea e3       	ldi	r30, 0x3A	; 58
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	80 83       	st	Z, r24
    12ce:	0e c0       	rjmp	.+28     	; 0x12ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB= direction;
    12d0:	e7 e3       	ldi	r30, 0x37	; 55
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	80 83       	st	Z, r24
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC= direction;
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	80 83       	st	Z, r24
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD= direction;
    12e4:	e1 e3       	ldi	r30, 0x31	; 49
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	80 83       	st	Z, r24
			break;
		}
	}
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <GPIO_writePort>:




void GPIO_writePort(uint8 port_num, uint8 value)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <GPIO_writePort+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <GPIO_writePort+0x8>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	6a 83       	std	Y+2, r22	; 0x02
	//if the entered port number is greater than the number of total ports then do nothing
	if((port_num>=NUM_OF_PORTS))
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	90 f5       	brcc	.+100    	; 0x1374 <GPIO_writePort+0x7a>
		/* do nothing */
	}
	//write the value in the required port
	else
	{
		switch(port_num)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3c 83       	std	Y+4, r19	; 0x04
    1318:	2b 83       	std	Y+3, r18	; 0x03
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	91 05       	cpc	r25, r1
    1322:	d1 f0       	breq	.+52     	; 0x1358 <GPIO_writePort+0x5e>
    1324:	2b 81       	ldd	r18, Y+3	; 0x03
    1326:	3c 81       	ldd	r19, Y+4	; 0x04
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	2c f4       	brge	.+10     	; 0x1338 <GPIO_writePort+0x3e>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	61 f0       	breq	.+24     	; 0x134e <GPIO_writePort+0x54>
    1336:	1e c0       	rjmp	.+60     	; 0x1374 <GPIO_writePort+0x7a>
    1338:	2b 81       	ldd	r18, Y+3	; 0x03
    133a:	3c 81       	ldd	r19, Y+4	; 0x04
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	81 f0       	breq	.+32     	; 0x1362 <GPIO_writePort+0x68>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	91 05       	cpc	r25, r1
    134a:	81 f0       	breq	.+32     	; 0x136c <GPIO_writePort+0x72>
    134c:	13 c0       	rjmp	.+38     	; 0x1374 <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA= value;
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	80 83       	st	Z, r24
    1356:	0e c0       	rjmp	.+28     	; 0x1374 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB= value;
    1358:	e8 e3       	ldi	r30, 0x38	; 56
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	80 83       	st	Z, r24
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC= value;
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	80 83       	st	Z, r24
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD= value;
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	80 83       	st	Z, r24
			break;
		}
	}
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <GPIO_readPort>:




uint8 GPIO_readPort(uint8 port_num)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <GPIO_readPort+0x6>
    1388:	00 d0       	rcall	.+0      	; 0x138a <GPIO_readPort+0x8>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1390:	19 82       	std	Y+1, r1	; 0x01
	//if the entered port number is greater than the number of total ports then do nothing
	if((port_num>=NUM_OF_PORTS))
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	90 f5       	brcc	.+100    	; 0x13fc <GPIO_readPort+0x7a>
	{}
	//read and return the value of the required port
	else
	{
		switch(port_num)
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3c 83       	std	Y+4, r19	; 0x04
    13a0:	2b 83       	std	Y+3, r18	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	d1 f0       	breq	.+52     	; 0x13e0 <GPIO_readPort+0x5e>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <GPIO_readPort+0x3e>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <GPIO_readPort+0x54>
    13be:	1e c0       	rjmp	.+60     	; 0x13fc <GPIO_readPort+0x7a>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	81 f0       	breq	.+32     	; 0x13ea <GPIO_readPort+0x68>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <GPIO_readPort+0x72>
    13d4:	13 c0       	rjmp	.+38     	; 0x13fc <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			value = PINA;
    13d6:	e9 e3       	ldi	r30, 0x39	; 57
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	0e c0       	rjmp	.+28     	; 0x13fc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13e0:	e6 e3       	ldi	r30, 0x36	; 54
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13ea:	e3 e3       	ldi	r30, 0x33	; 51
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13f4:	e0 e3       	ldi	r30, 0x30	; 48
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <time>:
Timer1_ConfigType Config_Ptr_time1 = {0,0,prescaler_1024,Normal};
Timer1_ConfigType Config_Ptr_time2 = {13884,0,prescaler_1024,Normal};
Timer1_ConfigType Config_Ptr_time3 = {42099,0,prescaler_1024,Normal};
Timer1_ConfigType Config_Ptr_time4 = {55538,0,prescaler_1024,Normal};
void time()
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1414:	80 91 95 00 	lds	r24, 0x0095
    1418:	8f 5f       	subi	r24, 0xFF	; 255
    141a:	80 93 95 00 	sts	0x0095, r24
	}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <main>:
int main()
{
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	6c 97       	sbiw	r28, 0x1c	; 28
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
	Buzzer_init();
    143c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	DcMotor_Init();
    1440:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>
	UART_ConfigType Config_Ptr_2 ={Disabled,one_bit,bit_8,9600};
    1444:	9e 01       	movw	r18, r28
    1446:	21 5f       	subi	r18, 0xF1	; 241
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	39 8f       	std	Y+25, r19	; 0x19
    144c:	28 8f       	std	Y+24, r18	; 0x18
    144e:	88 e8       	ldi	r24, 0x88	; 136
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9b 8f       	std	Y+27, r25	; 0x1b
    1454:	8a 8f       	std	Y+26, r24	; 0x1a
    1456:	97 e0       	ldi	r25, 0x07	; 7
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    145c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    145e:	00 80       	ld	r0, Z
    1460:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1462:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1464:	2f 5f       	subi	r18, 0xFF	; 255
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	3b 8f       	std	Y+27, r19	; 0x1b
    146a:	2a 8f       	std	Y+26, r18	; 0x1a
    146c:	e8 8d       	ldd	r30, Y+24	; 0x18
    146e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1470:	00 82       	st	Z, r0
    1472:	28 8d       	ldd	r18, Y+24	; 0x18
    1474:	39 8d       	ldd	r19, Y+25	; 0x19
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	39 8f       	std	Y+25, r19	; 0x19
    147c:	28 8f       	std	Y+24, r18	; 0x18
    147e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1480:	31 50       	subi	r19, 0x01	; 1
    1482:	3c 8f       	std	Y+28, r19	; 0x1c
    1484:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1486:	88 23       	and	r24, r24
    1488:	41 f7       	brne	.-48     	; 0x145a <main+0x36>
	UART_init(&Config_Ptr_2);
    148a:	ce 01       	movw	r24, r28
    148c:	0f 96       	adiw	r24, 0x0f	; 15
    148e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <UART_init>
	SREG|=(1<<7);
    1492:	af e5       	ldi	r26, 0x5F	; 95
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e5       	ldi	r30, 0x5F	; 95
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 68       	ori	r24, 0x80	; 128
    149e:	8c 93       	st	X, r24
while(1){
//**************************************first system*******************************************************
do{
	check_bit=matched;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 93 91 00 	sts	0x0091, r24
	for(j=0;j<5;j++)
    14a6:	10 92 90 00 	sts	0x0090, r1
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <main+0xa6>
		array_2[j]=UART_receiveByte();
    14ac:	80 91 90 00 	lds	r24, 0x0090
    14b0:	08 2f       	mov	r16, r24
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    14b8:	f8 01       	movw	r30, r16
    14ba:	ef 55       	subi	r30, 0x5F	; 95
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 83       	st	Z, r24
	SREG|=(1<<7);
while(1){
//**************************************first system*******************************************************
do{
	check_bit=matched;
	for(j=0;j<5;j++)
    14c0:	80 91 90 00 	lds	r24, 0x0090
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	80 93 90 00 	sts	0x0090, r24
    14ca:	80 91 90 00 	lds	r24, 0x0090
    14ce:	85 30       	cpi	r24, 0x05	; 5
    14d0:	68 f3       	brcs	.-38     	; 0x14ac <main+0x88>
		array_2[j]=UART_receiveByte();

	for(j=0;j<5;j++)
    14d2:	10 92 90 00 	sts	0x0090, r1
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <main+0xd2>
		re_enter_2[j]=UART_receiveByte();
    14d8:	80 91 90 00 	lds	r24, 0x0090
    14dc:	08 2f       	mov	r16, r24
    14de:	10 e0       	ldi	r17, 0x00	; 0
    14e0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    14e4:	f8 01       	movw	r30, r16
    14e6:	e4 56       	subi	r30, 0x64	; 100
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 83       	st	Z, r24
do{
	check_bit=matched;
	for(j=0;j<5;j++)
		array_2[j]=UART_receiveByte();

	for(j=0;j<5;j++)
    14ec:	80 91 90 00 	lds	r24, 0x0090
    14f0:	8f 5f       	subi	r24, 0xFF	; 255
    14f2:	80 93 90 00 	sts	0x0090, r24
    14f6:	80 91 90 00 	lds	r24, 0x0090
    14fa:	85 30       	cpi	r24, 0x05	; 5
    14fc:	68 f3       	brcs	.-38     	; 0x14d8 <main+0xb4>
		re_enter_2[j]=UART_receiveByte();

	for(j=0;j<5;j++)
    14fe:	10 92 90 00 	sts	0x0090, r1
    1502:	80 91 90 00 	lds	r24, 0x0090
    1506:	85 30       	cpi	r24, 0x05	; 5
    1508:	c0 f4       	brcc	.+48     	; 0x153a <main+0x116>
	{
		if(array_2[j]!=re_enter_2[j])
    150a:	80 91 90 00 	lds	r24, 0x0090
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	fc 01       	movw	r30, r24
    1514:	ef 55       	subi	r30, 0x5F	; 95
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	20 81       	ld	r18, Z
    151a:	80 91 90 00 	lds	r24, 0x0090
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	e4 56       	subi	r30, 0x64	; 100
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	80 81       	ld	r24, Z
    152a:	28 17       	cp	r18, r24
    152c:	31 f0       	breq	.+12     	; 0x153a <main+0x116>

		{
			check_bit=unmatched;
    152e:	10 92 91 00 	sts	0x0091, r1
			UART_sendByte(check_bit);
    1532:	80 91 91 00 	lds	r24, 0x0091
    1536:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
		}
		break;
	}
	if(check_bit==matched)
    153a:	80 91 91 00 	lds	r24, 0x0091
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	19 f5       	brne	.+70     	; 0x1588 <main+0x164>
	{UART_sendByte(check_bit);
    1542:	80 91 91 00 	lds	r24, 0x0091
    1546:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
		for(j=0;j<5;j++)
    154a:	10 92 90 00 	sts	0x0090, r1
    154e:	18 c0       	rjmp	.+48     	; 0x1580 <main+0x15c>
			EEPROM_writeByte(0x0311+j,array_2[j]);
    1550:	80 91 90 00 	lds	r24, 0x0090
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	8f 5e       	subi	r24, 0xEF	; 239
    155a:	9c 4f       	sbci	r25, 0xFC	; 252
    155c:	ac 01       	movw	r20, r24
    155e:	80 91 90 00 	lds	r24, 0x0090
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	fc 01       	movw	r30, r24
    1568:	ef 55       	subi	r30, 0x5F	; 95
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	20 81       	ld	r18, Z
    156e:	ca 01       	movw	r24, r20
    1570:	62 2f       	mov	r22, r18
    1572:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_writeByte>
		}
		break;
	}
	if(check_bit==matched)
	{UART_sendByte(check_bit);
		for(j=0;j<5;j++)
    1576:	80 91 90 00 	lds	r24, 0x0090
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 90 00 	sts	0x0090, r24
    1580:	80 91 90 00 	lds	r24, 0x0090
    1584:	85 30       	cpi	r24, 0x05	; 5
    1586:	20 f3       	brcs	.-56     	; 0x1550 <main+0x12c>
			EEPROM_writeByte(0x0311+j,array_2[j]);
	}
}

	while(check_bit ==unmatched);
    1588:	80 91 91 00 	lds	r24, 0x0091
    158c:	88 23       	and	r24, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <main+0x16e>
    1590:	87 cf       	rjmp	.-242    	; 0x14a0 <main+0x7c>
//**************************************second system**********************************************
while(1)
{check_bit2=matched;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 94 00 	sts	0x0094, r24
	//receive the option from the other mc
	option=UART_receiveByte();
    1598:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    159c:	80 93 93 00 	sts	0x0093, r24
	//get the saved password from eeprom
 for(j=0;j<5;j++)
    15a0:	10 92 90 00 	sts	0x0090, r1
    15a4:	17 c0       	rjmp	.+46     	; 0x15d4 <main+0x1b0>
	 EEPROM_readByte(0x0311+j,array_2+j);
    15a6:	80 91 90 00 	lds	r24, 0x0090
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	8f 5e       	subi	r24, 0xEF	; 239
    15b0:	9c 4f       	sbci	r25, 0xFC	; 252
    15b2:	ac 01       	movw	r20, r24
    15b4:	80 91 90 00 	lds	r24, 0x0090
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 01       	movw	r18, r24
    15be:	2f 55       	subi	r18, 0x5F	; 95
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	ca 01       	movw	r24, r20
    15c4:	b9 01       	movw	r22, r18
    15c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_readByte>
while(1)
{check_bit2=matched;
	//receive the option from the other mc
	option=UART_receiveByte();
	//get the saved password from eeprom
 for(j=0;j<5;j++)
    15ca:	80 91 90 00 	lds	r24, 0x0090
    15ce:	8f 5f       	subi	r24, 0xFF	; 255
    15d0:	80 93 90 00 	sts	0x0090, r24
    15d4:	80 91 90 00 	lds	r24, 0x0090
    15d8:	85 30       	cpi	r24, 0x05	; 5
    15da:	28 f3       	brcs	.-54     	; 0x15a6 <main+0x182>
	 EEPROM_readByte(0x0311+j,array_2+j);

 //receive the password from the other mc
 for(j=0;j<5;j++)
    15dc:	10 92 90 00 	sts	0x0090, r1
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <main+0x1dc>
	check_2[j]=UART_receiveByte();
    15e2:	80 91 90 00 	lds	r24, 0x0090
    15e6:	08 2f       	mov	r16, r24
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    15ee:	f8 01       	movw	r30, r16
    15f0:	ea 55       	subi	r30, 0x5A	; 90
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 83       	st	Z, r24
	//get the saved password from eeprom
 for(j=0;j<5;j++)
	 EEPROM_readByte(0x0311+j,array_2+j);

 //receive the password from the other mc
 for(j=0;j<5;j++)
    15f6:	80 91 90 00 	lds	r24, 0x0090
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	80 93 90 00 	sts	0x0090, r24
    1600:	80 91 90 00 	lds	r24, 0x0090
    1604:	85 30       	cpi	r24, 0x05	; 5
    1606:	68 f3       	brcs	.-38     	; 0x15e2 <main+0x1be>
	check_2[j]=UART_receiveByte();
//check if the entered password is matched with the password of the system
	for(j = 0 ;j < 5 ; j++){
    1608:	10 92 90 00 	sts	0x0090, r1
    160c:	1e c0       	rjmp	.+60     	; 0x164a <main+0x226>
		if(array_2[j]!= check_2[j]){
    160e:	80 91 90 00 	lds	r24, 0x0090
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	fc 01       	movw	r30, r24
    1618:	ef 55       	subi	r30, 0x5F	; 95
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	20 81       	ld	r18, Z
    161e:	80 91 90 00 	lds	r24, 0x0090
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	fc 01       	movw	r30, r24
    1628:	ea 55       	subi	r30, 0x5A	; 90
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	28 17       	cp	r18, r24
    1630:	39 f0       	breq	.+14     	; 0x1640 <main+0x21c>
			{check_bit2=unmatched;
    1632:	10 92 94 00 	sts	0x0094, r1
			UART_sendByte(check_bit2);
    1636:	80 91 94 00 	lds	r24, 0x0094
    163a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <main+0x22e>

 //receive the password from the other mc
 for(j=0;j<5;j++)
	check_2[j]=UART_receiveByte();
//check if the entered password is matched with the password of the system
	for(j = 0 ;j < 5 ; j++){
    1640:	80 91 90 00 	lds	r24, 0x0090
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	80 93 90 00 	sts	0x0090, r24
    164a:	80 91 90 00 	lds	r24, 0x0090
    164e:	85 30       	cpi	r24, 0x05	; 5
    1650:	f0 f2       	brcs	.-68     	; 0x160e <main+0x1ea>
			{check_bit2=unmatched;
			UART_sendByte(check_bit2);
			}
			break;
		}}
		if(check_bit2!=unmatched)
    1652:	80 91 94 00 	lds	r24, 0x0094
    1656:	88 23       	and	r24, r24
    1658:	09 f4       	brne	.+2      	; 0x165c <main+0x238>
    165a:	61 c1       	rjmp	.+706    	; 0x191e <main+0x4fa>
		{
			UART_sendByte(check_bit2);
    165c:	80 91 94 00 	lds	r24, 0x0094
    1660:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
			false_attempts=0;
    1664:	10 92 92 00 	sts	0x0092, r1

	switch(option)
    1668:	80 91 93 00 	lds	r24, 0x0093
    166c:	e8 2f       	mov	r30, r24
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	ff 8b       	std	Y+23, r31	; 0x17
    1672:	ee 8b       	std	Y+22, r30	; 0x16
    1674:	2e 89       	ldd	r18, Y+22	; 0x16
    1676:	3f 89       	ldd	r19, Y+23	; 0x17
    1678:	2b 32       	cpi	r18, 0x2B	; 43
    167a:	31 05       	cpc	r19, r1
    167c:	39 f0       	breq	.+14     	; 0x168c <main+0x268>
    167e:	8e 89       	ldd	r24, Y+22	; 0x16
    1680:	9f 89       	ldd	r25, Y+23	; 0x17
    1682:	8d 32       	cpi	r24, 0x2D	; 45
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <main+0x266>
    1688:	d0 c0       	rjmp	.+416    	; 0x182a <main+0x406>
    168a:	83 cf       	rjmp	.-250    	; 0x1592 <main+0x16e>
	{
	case'+':
		//rotate the motor cw for 15 sec
		DcMotor_Rotate(clockwise);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
		//calculate 8.4 sec
		Timer1_init(&Config_Ptr_time1);
    1692:	88 e6       	ldi	r24, 0x68	; 104
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
		TIMER1_setCallBack(time);
    169a:	86 e0       	ldi	r24, 0x06	; 6
    169c:	9a e0       	ldi	r25, 0x0A	; 10
    169e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
		while(tick < 1);
    16a2:	80 91 95 00 	lds	r24, 0x0095
    16a6:	88 23       	and	r24, r24
    16a8:	e1 f3       	breq	.-8      	; 0x16a2 <main+0x27e>
		tick = 0;
    16aa:	10 92 95 00 	sts	0x0095, r1
		Timer1_deInit();
    16ae:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>

		//calculate 6.6 sec so the total seconds calculated = 6.6+8.4=15sec
		Timer1_init(&Config_Ptr_time2);
    16b2:	80 e7       	ldi	r24, 0x70	; 112
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
		TIMER1_setCallBack(time);
    16ba:	86 e0       	ldi	r24, 0x06	; 6
    16bc:	9a e0       	ldi	r25, 0x0A	; 10
    16be:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
		while(tick < 1);
    16c2:	80 91 95 00 	lds	r24, 0x0095
    16c6:	88 23       	and	r24, r24
    16c8:	e1 f3       	breq	.-8      	; 0x16c2 <main+0x29e>
		tick = 0;
    16ca:	10 92 95 00 	sts	0x0095, r1
		Timer1_deInit();
    16ce:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>

		//hold the motor for 3 seconds
		DcMotor_Rotate(stop);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
		Timer1_init(&Config_Ptr_time3);
    16d8:	88 e7       	ldi	r24, 0x78	; 120
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
		TIMER1_setCallBack(time);
    16e0:	86 e0       	ldi	r24, 0x06	; 6
    16e2:	9a e0       	ldi	r25, 0x0A	; 10
    16e4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
		while(tick < 1);
    16e8:	80 91 95 00 	lds	r24, 0x0095
    16ec:	88 23       	and	r24, r24
    16ee:	e1 f3       	breq	.-8      	; 0x16e8 <main+0x2c4>
		tick = 0;
    16f0:	10 92 95 00 	sts	0x0095, r1
		Timer1_deInit();
    16f4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>

		//rotate the motor anti-cw for 15 sec
		DcMotor_Rotate(anticlockwise);
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
		//calculate 8.4 sec
		Timer1_init(&Config_Ptr_time1);
    16fe:	88 e6       	ldi	r24, 0x68	; 104
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
		TIMER1_setCallBack(time);
    1706:	86 e0       	ldi	r24, 0x06	; 6
    1708:	9a e0       	ldi	r25, 0x0A	; 10
    170a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
		while(tick < 1);
    170e:	80 91 95 00 	lds	r24, 0x0095
    1712:	88 23       	and	r24, r24
    1714:	e1 f3       	breq	.-8      	; 0x170e <main+0x2ea>
		tick = 0;
    1716:	10 92 95 00 	sts	0x0095, r1
		Timer1_deInit();
    171a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>

		//calculate 6.6 sec so the total seconds calculated = 6.6+8.4=15sec
		Timer1_init(&Config_Ptr_time2);
    171e:	80 e7       	ldi	r24, 0x70	; 112
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
		TIMER1_setCallBack(time);
    1726:	86 e0       	ldi	r24, 0x06	; 6
    1728:	9a e0       	ldi	r25, 0x0A	; 10
    172a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
		while(tick < 1);
    172e:	80 91 95 00 	lds	r24, 0x0095
    1732:	88 23       	and	r24, r24
    1734:	e1 f3       	breq	.-8      	; 0x172e <main+0x30a>
		tick = 0;
    1736:	10 92 95 00 	sts	0x0095, r1
		Timer1_deInit();
    173a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>
		DcMotor_Rotate(stop);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	aa ef       	ldi	r26, 0xFA	; 250
    174a:	b3 e4       	ldi	r27, 0x43	; 67
    174c:	8b 87       	std	Y+11, r24	; 0x0b
    174e:	9c 87       	std	Y+12, r25	; 0x0c
    1750:	ad 87       	std	Y+13, r26	; 0x0d
    1752:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	6b 85       	ldd	r22, Y+11	; 0x0b
    1756:	7c 85       	ldd	r23, Y+12	; 0x0c
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	9e 85       	ldd	r25, Y+14	; 0x0e
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a ef       	ldi	r20, 0xFA	; 250
    1762:	54 e4       	ldi	r21, 0x44	; 68
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	8f 83       	std	Y+7, r24	; 0x07
    176e:	98 87       	std	Y+8, r25	; 0x08
    1770:	a9 87       	std	Y+9, r26	; 0x09
    1772:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1774:	6f 81       	ldd	r22, Y+7	; 0x07
    1776:	78 85       	ldd	r23, Y+8	; 0x08
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1788:	88 23       	and	r24, r24
    178a:	2c f4       	brge	.+10     	; 0x1796 <main+0x372>
		__ticks = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
    1794:	3f c0       	rjmp	.+126    	; 0x1814 <main+0x3f0>
	else if (__tmp > 65535)
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	3f ef       	ldi	r19, 0xFF	; 255
    17a2:	4f e7       	ldi	r20, 0x7F	; 127
    17a4:	57 e4       	ldi	r21, 0x47	; 71
    17a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17aa:	18 16       	cp	r1, r24
    17ac:	4c f5       	brge	.+82     	; 0x1800 <main+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <main+0x3d2>
    17d8:	88 ec       	ldi	r24, 0xC8	; 200
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <main+0x3c0>
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <main+0x3b4>
    17fe:	c9 ce       	rjmp	.-622    	; 0x1592 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <main+0x3fc>
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	b4 ce       	rjmp	.-664    	; 0x1592 <main+0x16e>
		_delay_ms(500);
		break;
	case'-':
		do{
			check_bit2=matched;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	80 93 94 00 	sts	0x0094, r24
			for(j=0;j<5;j++)
    1830:	10 92 90 00 	sts	0x0090, r1
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <main+0x430>
				array_2[j]=UART_receiveByte();
    1836:	80 91 90 00 	lds	r24, 0x0090
    183a:	08 2f       	mov	r16, r24
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    1842:	f8 01       	movw	r30, r16
    1844:	ef 55       	subi	r30, 0x5F	; 95
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 83       	st	Z, r24
		_delay_ms(500);
		break;
	case'-':
		do{
			check_bit2=matched;
			for(j=0;j<5;j++)
    184a:	80 91 90 00 	lds	r24, 0x0090
    184e:	8f 5f       	subi	r24, 0xFF	; 255
    1850:	80 93 90 00 	sts	0x0090, r24
    1854:	80 91 90 00 	lds	r24, 0x0090
    1858:	85 30       	cpi	r24, 0x05	; 5
    185a:	68 f3       	brcs	.-38     	; 0x1836 <main+0x412>
				array_2[j]=UART_receiveByte();

			for(j=0;j<5;j++)
    185c:	10 92 90 00 	sts	0x0090, r1
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <main+0x45c>
				re_enter_2[j]=UART_receiveByte();
    1862:	80 91 90 00 	lds	r24, 0x0090
    1866:	08 2f       	mov	r16, r24
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    186e:	f8 01       	movw	r30, r16
    1870:	e4 56       	subi	r30, 0x64	; 100
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 83       	st	Z, r24
		do{
			check_bit2=matched;
			for(j=0;j<5;j++)
				array_2[j]=UART_receiveByte();

			for(j=0;j<5;j++)
    1876:	80 91 90 00 	lds	r24, 0x0090
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	80 93 90 00 	sts	0x0090, r24
    1880:	80 91 90 00 	lds	r24, 0x0090
    1884:	85 30       	cpi	r24, 0x05	; 5
    1886:	68 f3       	brcs	.-38     	; 0x1862 <main+0x43e>
				re_enter_2[j]=UART_receiveByte();

			for(j=0;j<5;j++)
    1888:	10 92 90 00 	sts	0x0090, r1
    188c:	80 91 90 00 	lds	r24, 0x0090
    1890:	85 30       	cpi	r24, 0x05	; 5
    1892:	c0 f4       	brcc	.+48     	; 0x18c4 <main+0x4a0>
			{
				if(array_2[j]!=re_enter_2[j])
    1894:	80 91 90 00 	lds	r24, 0x0090
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	fc 01       	movw	r30, r24
    189e:	ef 55       	subi	r30, 0x5F	; 95
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	20 81       	ld	r18, Z
    18a4:	80 91 90 00 	lds	r24, 0x0090
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	fc 01       	movw	r30, r24
    18ae:	e4 56       	subi	r30, 0x64	; 100
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	28 17       	cp	r18, r24
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <main+0x4a0>

				{
					check_bit2=unmatched;
    18b8:	10 92 94 00 	sts	0x0094, r1
					UART_sendByte(check_bit2);
    18bc:	80 91 94 00 	lds	r24, 0x0094
    18c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
				}
				break;
			}

			if(check_bit==matched)
    18c4:	80 91 91 00 	lds	r24, 0x0091
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	19 f5       	brne	.+70     	; 0x1912 <main+0x4ee>
			{UART_sendByte(check_bit2);
    18cc:	80 91 94 00 	lds	r24, 0x0094
    18d0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
			for(j=0;j<5;j++)
    18d4:	10 92 90 00 	sts	0x0090, r1
    18d8:	18 c0       	rjmp	.+48     	; 0x190a <main+0x4e6>
				EEPROM_writeByte(0x0311+j,array_2[j]);
    18da:	80 91 90 00 	lds	r24, 0x0090
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	8f 5e       	subi	r24, 0xEF	; 239
    18e4:	9c 4f       	sbci	r25, 0xFC	; 252
    18e6:	ac 01       	movw	r20, r24
    18e8:	80 91 90 00 	lds	r24, 0x0090
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	fc 01       	movw	r30, r24
    18f2:	ef 55       	subi	r30, 0x5F	; 95
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	20 81       	ld	r18, Z
    18f8:	ca 01       	movw	r24, r20
    18fa:	62 2f       	mov	r22, r18
    18fc:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_writeByte>
				break;
			}

			if(check_bit==matched)
			{UART_sendByte(check_bit2);
			for(j=0;j<5;j++)
    1900:	80 91 90 00 	lds	r24, 0x0090
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	80 93 90 00 	sts	0x0090, r24
    190a:	80 91 90 00 	lds	r24, 0x0090
    190e:	85 30       	cpi	r24, 0x05	; 5
    1910:	20 f3       	brcs	.-56     	; 0x18da <main+0x4b6>
				EEPROM_writeByte(0x0311+j,array_2[j]);
			}


		}
		while(check_bit2==unmatched);
    1912:	80 91 94 00 	lds	r24, 0x0094
    1916:	88 23       	and	r24, r24
    1918:	09 f4       	brne	.+2      	; 0x191c <main+0x4f8>
    191a:	87 cf       	rjmp	.-242    	; 0x182a <main+0x406>
    191c:	3a ce       	rjmp	.-908    	; 0x1592 <main+0x16e>

	}

		}
		else{
			UART_sendByte(check_bit2);
    191e:	80 91 94 00 	lds	r24, 0x0094
    1922:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
			false_attempts++;
    1926:	80 91 92 00 	lds	r24, 0x0092
    192a:	8f 5f       	subi	r24, 0xFF	; 255
    192c:	80 93 92 00 	sts	0x0092, r24

			if(false_attempts==3)
    1930:	80 91 92 00 	lds	r24, 0x0092
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	09 f0       	breq	.+2      	; 0x193a <main+0x516>
    1938:	2c ce       	rjmp	.-936    	; 0x1592 <main+0x16e>
			{
				//activate buzzer for 1 minute
				Buzzer_on();
    193a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
				//start timer1 to count 7*8.4sec=58.8 sec
				Timer1_init(&Config_Ptr_time1);
    193e:	88 e6       	ldi	r24, 0x68	; 104
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
				TIMER1_setCallBack(time);
    1946:	86 e0       	ldi	r24, 0x06	; 6
    1948:	9a e0       	ldi	r25, 0x0A	; 10
    194a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
				while(tick < 7);
    194e:	80 91 95 00 	lds	r24, 0x0095
    1952:	87 30       	cpi	r24, 0x07	; 7
    1954:	e0 f3       	brcs	.-8      	; 0x194e <main+0x52a>
				tick = 0;
    1956:	10 92 95 00 	sts	0x0095, r1
				Timer1_deInit();
    195a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>
				//start timer1 to count 1.2sec so total time counted = 1 min
				Timer1_init(&Config_Ptr_time4);
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timer1_init>
				TIMER1_setCallBack(time);
    1966:	86 e0       	ldi	r24, 0x06	; 6
    1968:	9a e0       	ldi	r25, 0x0A	; 10
    196a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TIMER1_setCallBack>
				while(tick < 1);
    196e:	80 91 95 00 	lds	r24, 0x0095
    1972:	88 23       	and	r24, r24
    1974:	e1 f3       	breq	.-8      	; 0x196e <main+0x54a>
				tick = 0;
    1976:	10 92 95 00 	sts	0x0095, r1
				Timer1_deInit();
    197a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <Timer1_deInit>
				//turn off the buzzer
				Buzzer_off();
    197e:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
    1982:	07 ce       	rjmp	.-1010   	; 0x1592 <main+0x16e>

00001984 <__vector_9>:
#include"std_types.h"
#include"avr\io.h"
#include"avr\interrupt.h"
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)/*handler overflow interrupt of timer0 */
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19ae:	80 91 96 00 	lds	r24, 0x0096
    19b2:	90 91 97 00 	lds	r25, 0x0097
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	29 f0       	breq	.+10     	; 0x19c4 <__vector_9+0x40>
			(*g_callBackPtr)();
    19ba:	e0 91 96 00 	lds	r30, 0x0096
    19be:	f0 91 97 00 	lds	r31, 0x0097
    19c2:	09 95       	icall
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	ff 91       	pop	r31
    19ca:	ef 91       	pop	r30
    19cc:	bf 91       	pop	r27
    19ce:	af 91       	pop	r26
    19d0:	9f 91       	pop	r25
    19d2:	8f 91       	pop	r24
    19d4:	7f 91       	pop	r23
    19d6:	6f 91       	pop	r22
    19d8:	5f 91       	pop	r21
    19da:	4f 91       	pop	r20
    19dc:	3f 91       	pop	r19
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <__vector_7>:
ISR (TIMER1_COMPA_vect)/*handler output compare  interrupt of timer0 */
{
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a14:	80 91 96 00 	lds	r24, 0x0096
    1a18:	90 91 97 00 	lds	r25, 0x0097
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	29 f0       	breq	.+10     	; 0x1a2a <__vector_7+0x40>
			(*g_callBackPtr)();
    1a20:	e0 91 96 00 	lds	r30, 0x0096
    1a24:	f0 91 97 00 	lds	r31, 0x0097
    1a28:	09 95       	icall
}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	ff 91       	pop	r31
    1a30:	ef 91       	pop	r30
    1a32:	bf 91       	pop	r27
    1a34:	af 91       	pop	r26
    1a36:	9f 91       	pop	r25
    1a38:	8f 91       	pop	r24
    1a3a:	7f 91       	pop	r23
    1a3c:	6f 91       	pop	r22
    1a3e:	5f 91       	pop	r21
    1a40:	4f 91       	pop	r20
    1a42:	3f 91       	pop	r19
    1a44:	2f 91       	pop	r18
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	0f 90       	pop	r0
    1a4c:	1f 90       	pop	r1
    1a4e:	18 95       	reti

00001a50 <__vector_8>:
ISR(TIMER1_COMPB_vect)/*handler overflow interrupt of timer0 */
{
    1a50:	1f 92       	push	r1
    1a52:	0f 92       	push	r0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	0f 92       	push	r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	2f 93       	push	r18
    1a5c:	3f 93       	push	r19
    1a5e:	4f 93       	push	r20
    1a60:	5f 93       	push	r21
    1a62:	6f 93       	push	r22
    1a64:	7f 93       	push	r23
    1a66:	8f 93       	push	r24
    1a68:	9f 93       	push	r25
    1a6a:	af 93       	push	r26
    1a6c:	bf 93       	push	r27
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a7a:	80 91 96 00 	lds	r24, 0x0096
    1a7e:	90 91 97 00 	lds	r25, 0x0097
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <__vector_8+0x40>
			(*g_callBackPtr)();
    1a86:	e0 91 96 00 	lds	r30, 0x0096
    1a8a:	f0 91 97 00 	lds	r31, 0x0097
    1a8e:	09 95       	icall
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <Timer1_init>:
 * Description :
 * initialize timer1 compare and overflow mode.
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <Timer1_init+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A |= (1<<FOC1A)|(1<<FOC1B);
    1ac4:	af e4       	ldi	r26, 0x4F	; 79
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ef e4       	ldi	r30, 0x4F	; 79
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8c 60       	ori	r24, 0x0C	; 12
    1ad0:	8c 93       	st	X, r24
	if((Config_Ptr->mode)==Compare)
    1ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad6:	87 81       	ldd	r24, Z+7	; 0x07
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	c1 f5       	brne	.+112    	; 0x1b4c <Timer1_init+0x96>
	{
		TCNT1 =Config_Ptr->initial_value;
    1adc:	ac e4       	ldi	r26, 0x4C	; 76
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	9c 93       	st	X, r25
    1aec:	8e 93       	st	-X, r24
		TCCR1B = (1<<WGM12) ;
    1aee:	ee e4       	ldi	r30, 0x4E	; 78
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	88 e0       	ldi	r24, 0x08	; 8
    1af4:	80 83       	st	Z, r24
#if(CMP_UNITA)
		OCR1B =Config_Ptr->compare_value;
    1af6:	28 e4       	ldi	r18, 0x48	; 72
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	e9 81       	ldd	r30, Y+1	; 0x01
    1afc:	fa 81       	ldd	r31, Y+2	; 0x02
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	a4 81       	ldd	r26, Z+4	; 0x04
    1b04:	b5 81       	ldd	r27, Z+5	; 0x05
    1b06:	f9 01       	movw	r30, r18
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1A1);
    1b0c:	af e4       	ldi	r26, 0x4F	; 79
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ef e4       	ldi	r30, 0x4F	; 79
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 68       	ori	r24, 0x80	; 128
    1b18:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1A);
    1b1a:	a9 e5       	ldi	r26, 0x59	; 89
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e9 e5       	ldi	r30, 0x59	; 89
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 61       	ori	r24, 0x10	; 16
    1b26:	8c 93       	st	X, r24
#elif(CMP_UNITB)
		OCR1B =Config_Ptr->compare_value;
		TCCR1A|=(1<<COM1B1);
		TIMSK |= (1<<OCIE1B);
#endif
		TCCR1B &=0xF8 ;
    1b28:	ae e4       	ldi	r26, 0x4E	; 78
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ee e4       	ldi	r30, 0x4E	; 78
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 7f       	andi	r24, 0xF8	; 248
    1b34:	8c 93       	st	X, r24
		TCCR1B |=Config_Ptr->prescaler;
    1b36:	ae e4       	ldi	r26, 0x4E	; 78
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ee e4       	ldi	r30, 0x4E	; 78
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	90 81       	ld	r25, Z
    1b40:	e9 81       	ldd	r30, Y+1	; 0x01
    1b42:	fa 81       	ldd	r31, Y+2	; 0x02
    1b44:	86 81       	ldd	r24, Z+6	; 0x06
    1b46:	89 2b       	or	r24, r25
    1b48:	8c 93       	st	X, r24
    1b4a:	26 c0       	rjmp	.+76     	; 0x1b98 <Timer1_init+0xe2>
	}

	else if((Config_Ptr->mode)==Normal)
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	87 81       	ldd	r24, Z+7	; 0x07
    1b52:	88 23       	and	r24, r24
    1b54:	09 f5       	brne	.+66     	; 0x1b98 <Timer1_init+0xe2>
	{
		TCNT1 =Config_Ptr->initial_value;
    1b56:	ac e4       	ldi	r26, 0x4C	; 76
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
		TIMSK |= (1<<TOIE1);
    1b68:	a9 e5       	ldi	r26, 0x59	; 89
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e9 e5       	ldi	r30, 0x59	; 89
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	84 60       	ori	r24, 0x04	; 4
    1b74:	8c 93       	st	X, r24
		TCCR1B &=0xF8 ;
    1b76:	ae e4       	ldi	r26, 0x4E	; 78
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ee e4       	ldi	r30, 0x4E	; 78
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 7f       	andi	r24, 0xF8	; 248
    1b82:	8c 93       	st	X, r24
		TCCR1B |=(Config_Ptr->prescaler);
    1b84:	ae e4       	ldi	r26, 0x4E	; 78
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ee e4       	ldi	r30, 0x4E	; 78
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	90 81       	ld	r25, Z
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	86 81       	ldd	r24, Z+6	; 0x06
    1b94:	89 2b       	or	r24, r25
    1b96:	8c 93       	st	X, r24
	}

		}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <Timer1_deInit>:
/*
 * Description :
 * de initialize timer1 compare and overflow mode.
 */
void Timer1_deInit(void)
	{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
TCCR1B&=~(1<<CS10)&~(1<<CS11)&~(1<<CS12);
    1baa:	ae e4       	ldi	r26, 0x4E	; 78
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	ee e4       	ldi	r30, 0x4E	; 78
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 7f       	andi	r24, 0xF8	; 248
    1bb6:	8c 93       	st	X, r24
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <TIMER1_setCallBack+0x6>
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr  ;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	90 93 97 00 	sts	0x0097, r25
    1bd4:	80 93 96 00 	sts	0x0096, r24
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <TWI_init>:
 * Passes the bit rates using pre-scaler TWPS and clock.
 * Passes address of peripheral in case called.
 */

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <TWI_init+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <TWI_init+0x8>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <TWI_init+0xa>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
   switch(Config_Ptr->bit_rate)
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	84 81       	ldd	r24, Z+4	; 0x04
    1bfa:	95 81       	ldd	r25, Z+5	; 0x05
    1bfc:	a6 81       	ldd	r26, Z+6	; 0x06
    1bfe:	b7 81       	ldd	r27, Z+7	; 0x07
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	9c 83       	std	Y+4, r25	; 0x04
    1c04:	ad 83       	std	Y+5, r26	; 0x05
    1c06:	be 83       	std	Y+6, r27	; 0x06
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	ad 81       	ldd	r26, Y+5	; 0x05
    1c0e:	be 81       	ldd	r27, Y+6	; 0x06
    1c10:	80 3a       	cpi	r24, 0xA0	; 160
    1c12:	e6 e8       	ldi	r30, 0x86	; 134
    1c14:	9e 07       	cpc	r25, r30
    1c16:	e1 e0       	ldi	r30, 0x01	; 1
    1c18:	ae 07       	cpc	r26, r30
    1c1a:	e0 e0       	ldi	r30, 0x00	; 0
    1c1c:	be 07       	cpc	r27, r30
    1c1e:	a1 f0       	breq	.+40     	; 0x1c48 <TWI_init+0x66>
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	ad 81       	ldd	r26, Y+5	; 0x05
    1c26:	be 81       	ldd	r27, Y+6	; 0x06
    1c28:	80 38       	cpi	r24, 0x80	; 128
    1c2a:	ea e1       	ldi	r30, 0x1A	; 26
    1c2c:	9e 07       	cpc	r25, r30
    1c2e:	e6 e0       	ldi	r30, 0x06	; 6
    1c30:	ae 07       	cpc	r26, r30
    1c32:	e0 e0       	ldi	r30, 0x00	; 0
    1c34:	be 07       	cpc	r27, r30
    1c36:	81 f4       	brne	.+32     	; 0x1c58 <TWI_init+0x76>
   {
   case 400000:
   TWBR=0x02;
    1c38:	e0 e2       	ldi	r30, 0x20	; 32
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	80 83       	st	Z, r24
   TWSR=PRESCALER_1;
    1c40:	e1 e2       	ldi	r30, 0x21	; 33
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	10 82       	st	Z, r1
    1c46:	08 c0       	rjmp	.+16     	; 0x1c58 <TWI_init+0x76>
   break;
   case 100000:
      TWBR=0x02;
    1c48:	e0 e2       	ldi	r30, 0x20	; 32
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	80 83       	st	Z, r24
      TWSR=PRESCALER_16;
    1c50:	e1 e2       	ldi	r30, 0x21	; 33
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	80 83       	st	Z, r24
#endif
   }
   /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
          General Call Recognition: Off */

   TWAR=Config_Ptr->address;
    1c58:	22 e2       	ldi	r18, 0x22	; 34
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	a2 81       	ldd	r26, Z+2	; 0x02
    1c66:	b3 81       	ldd	r27, Z+3	; 0x03
    1c68:	d9 01       	movw	r26, r18
    1c6a:	8c 93       	st	X, r24
}
    1c6c:	26 96       	adiw	r28, 0x06	; 6
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <TWI_start>:
 * Description:
 * Starts operation of I2C.
 */

void TWI_start(void)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1c86:	e6 e5       	ldi	r30, 0x56	; 86
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	84 ea       	ldi	r24, 0xA4	; 164
    1c8c:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c8e:	e6 e5       	ldi	r30, 0x56	; 86
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	88 23       	and	r24, r24
    1c96:	dc f7       	brge	.-10     	; 0x1c8e <TWI_start+0x10>
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <TWI_stop>:

void TWI_stop(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ca6:	e6 e5       	ldi	r30, 0x56	; 86
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	84 e9       	ldi	r24, 0x94	; 148
    1cac:	80 83       	st	Z, r24
}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1cc0:	e3 e2       	ldi	r30, 0x23	; 35
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1cc8:	e6 e5       	ldi	r30, 0x56	; 86
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	84 e8       	ldi	r24, 0x84	; 132
    1cce:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cd0:	e6 e5       	ldi	r30, 0x56	; 86
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 23       	and	r24, r24
    1cd8:	dc f7       	brge	.-10     	; 0x1cd0 <TWI_writeByte+0x1c>
}
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1cea:	e6 e5       	ldi	r30, 0x56	; 86
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	84 ec       	ldi	r24, 0xC4	; 196
    1cf0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cf2:	e6 e5       	ldi	r30, 0x56	; 86
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 23       	and	r24, r24
    1cfa:	dc f7       	brge	.-10     	; 0x1cf2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1cfc:	e3 e2       	ldi	r30, 0x23	; 35
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d10:	e6 e5       	ldi	r30, 0x56	; 86
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	84 e8       	ldi	r24, 0x84	; 132
    1d16:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d18:	e6 e5       	ldi	r30, 0x56	; 86
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 23       	and	r24, r24
    1d20:	dc f7       	brge	.-10     	; 0x1d18 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1d22:	e3 e2       	ldi	r30, 0x23	; 35
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1d38:	e1 e2       	ldi	r30, 0x21	; 33
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 7f       	andi	r24, 0xF8	; 248
    1d40:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <UART_sendByte>:
uint16 ubrr_value = 0;



void UART_sendByte(uint8 data)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	0f 92       	push	r0
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	89 83       	std	Y+1, r24	; 0x01
#if(!(USART_interrupt_SENDER))
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1d58:	eb e2       	ldi	r30, 0x2B	; 43
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	80 72       	andi	r24, 0x20	; 32
    1d64:	90 70       	andi	r25, 0x00	; 0
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	b9 f3       	breq	.-18     	; 0x1d58 <UART_sendByte+0xc>
	UDR = data;
    1d6a:	ec e2       	ldi	r30, 0x2C	; 44
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	80 83       	st	Z, r24
#else

#endif
}
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
#if(!(USART_interrupt_RECEIVER))
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1d82:	eb e2       	ldi	r30, 0x2B	; 43
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	88 23       	and	r24, r24
    1d8a:	dc f7       	brge	.-10     	; 0x1d82 <UART_receiveByte+0x8>
	return UDR;
    1d8c:	ec e2       	ldi	r30, 0x2C	; 44
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
#else
	return UDR;
#endif
}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <UART_sendString+0x6>
    1d9e:	0f 92       	push	r0
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	9b 83       	std	Y+3, r25	; 0x03
    1da6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1da8:	19 82       	std	Y+1, r1	; 0x01
    1daa:	0e c0       	rjmp	.+28     	; 0x1dc8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	fc 01       	movw	r30, r24
    1db8:	e2 0f       	add	r30, r18
    1dba:	f3 1f       	adc	r31, r19
    1dbc:	80 81       	ld	r24, Z
    1dbe:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <UART_sendByte>
		i++;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 23       	and	r24, r24
    1ddc:	39 f7       	brne	.-50     	; 0x1dac <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <UART_receiveString>:
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */

void UART_receiveString(uint8 *Str)
{
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <UART_receiveString+0xa>
    1df4:	0f 92       	push	r0
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	9b 83       	std	Y+3, r25	; 0x03
    1dfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dfe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0a:	8c 01       	movw	r16, r24
    1e0c:	02 0f       	add	r16, r18
    1e0e:	13 1f       	adc	r17, r19
    1e10:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    1e14:	f8 01       	movw	r30, r16
    1e16:	80 83       	st	Z, r24
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	02 0f       	add	r16, r18
    1e2e:	13 1f       	adc	r17, r19
    1e30:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_receiveByte>
    1e34:	f8 01       	movw	r30, r16
    1e36:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	fc 01       	movw	r30, r24
    1e44:	e2 0f       	add	r30, r18
    1e46:	f3 1f       	adc	r31, r19
    1e48:	80 81       	ld	r24, Z
    1e4a:	83 32       	cpi	r24, 0x23	; 35
    1e4c:	31 f7       	brne	.-52     	; 0x1e1a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	10 82       	st	Z, r1
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret

00001e70 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <UART_init+0x6>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
#if(USARTASYNCDOUBLE_SPEED_MODE)
	SET_BIT(UCSRA,U2X);
    1e7e:	ab e2       	ldi	r26, 0x2B	; 43
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	eb e2       	ldi	r30, 0x2B	; 43
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	82 60       	ori	r24, 0x02	; 2
    1e8a:	8c 93       	st	X, r24
	ISR(USART_UDRE_vect)
		{
		UDR = data;
		}
#endif
	SET_BIT(UCSRC,URSEL);
    1e8c:	a0 e4       	ldi	r26, 0x40	; 64
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e0 e4       	ldi	r30, 0x40	; 64
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 68       	ori	r24, 0x80	; 128
    1e98:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    1e9a:	aa e2       	ldi	r26, 0x2A	; 42
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ea e2       	ldi	r30, 0x2A	; 42
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 61       	ori	r24, 0x10	; 16
    1ea6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    1ea8:	aa e2       	ldi	r26, 0x2A	; 42
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ea e2       	ldi	r30, 0x2A	; 42
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 60       	ori	r24, 0x08	; 8
    1eb4:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2);
    1eb6:	aa e2       	ldi	r26, 0x2A	; 42
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ea e2       	ldi	r30, 0x2A	; 42
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8b 7f       	andi	r24, 0xFB	; 251
    1ec2:	8c 93       	st	X, r24

#if(USARTSYNC_MODE)
	SET_BIT(UCSRC,UMSEL);
	UCSRC|=(Config_Ptr->clock<<UCPOL);
#endif
	UCSRC|=((Config_Ptr->parity)<<UPM0);
    1ec4:	a0 e4       	ldi	r26, 0x40	; 64
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e0 e4       	ldi	r30, 0x40	; 64
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	28 2f       	mov	r18, r24
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	80 81       	ld	r24, Z
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	82 95       	swap	r24
    1edc:	92 95       	swap	r25
    1ede:	90 7f       	andi	r25, 0xF0	; 240
    1ee0:	98 27       	eor	r25, r24
    1ee2:	80 7f       	andi	r24, 0xF0	; 240
    1ee4:	98 27       	eor	r25, r24
    1ee6:	82 2b       	or	r24, r18
    1ee8:	8c 93       	st	X, r24
	UCSRC|=((Config_Ptr->stopbit)<<USBS);
    1eea:	a0 e4       	ldi	r26, 0x40	; 64
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e0 e4       	ldi	r30, 0x40	; 64
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	81 81       	ldd	r24, Z+1	; 0x01
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	82 2b       	or	r24, r18
    1f0e:	8c 93       	st	X, r24
	UCSRC|=((Config_Ptr->size)<<UCSZ0);
    1f10:	a0 e4       	ldi	r26, 0x40	; 64
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e0 e4       	ldi	r30, 0x40	; 64
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	82 2b       	or	r24, r18
    1f2c:	8c 93       	st	X, r24
//UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	//UCSRC|=(Config_Ptr->clock<<UCPOL);
#if(USartAycnNormal_MODE)
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate)* 16UL))) - 1);
#elif(USARTASYNCDOUBLE_SPEED_MODE)
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    1f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f30:	fa 81       	ldd	r31, Y+2	; 0x02
    1f32:	83 81       	ldd	r24, Z+3	; 0x03
    1f34:	94 81       	ldd	r25, Z+4	; 0x04
    1f36:	a5 81       	ldd	r26, Z+5	; 0x05
    1f38:	b6 81       	ldd	r27, Z+6	; 0x06
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	aa 1f       	adc	r26, r26
    1f40:	bb 1f       	adc	r27, r27
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	aa 1f       	adc	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	9c 01       	movw	r18, r24
    1f54:	ad 01       	movw	r20, r26
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	92 e1       	ldi	r25, 0x12	; 18
    1f5a:	aa e7       	ldi	r26, 0x7A	; 122
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__udivmodsi4>
    1f66:	da 01       	movw	r26, r20
    1f68:	c9 01       	movw	r24, r18
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	90 93 99 00 	sts	0x0099, r25
    1f70:	80 93 98 00 	sts	0x0098, r24
#elif(USARTSYNC_MODE)
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 2UL))) - 1);
#endif
	UBRRH = ubrr_value>>8;
    1f74:	e0 e4       	ldi	r30, 0x40	; 64
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 91 98 00 	lds	r24, 0x0098
    1f7c:	90 91 99 00 	lds	r25, 0x0099
    1f80:	89 2f       	mov	r24, r25
    1f82:	99 27       	eor	r25, r25
    1f84:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1f86:	e9 e2       	ldi	r30, 0x29	; 41
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 91 98 00 	lds	r24, 0x0098
    1f8e:	90 91 99 00 	lds	r25, 0x0099
    1f92:	80 83       	st	Z, r24
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <__udivmodsi4>:
    1f9e:	a1 e2       	ldi	r26, 0x21	; 33
    1fa0:	1a 2e       	mov	r1, r26
    1fa2:	aa 1b       	sub	r26, r26
    1fa4:	bb 1b       	sub	r27, r27
    1fa6:	fd 01       	movw	r30, r26
    1fa8:	0d c0       	rjmp	.+26     	; 0x1fc4 <__udivmodsi4_ep>

00001faa <__udivmodsi4_loop>:
    1faa:	aa 1f       	adc	r26, r26
    1fac:	bb 1f       	adc	r27, r27
    1fae:	ee 1f       	adc	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	a2 17       	cp	r26, r18
    1fb4:	b3 07       	cpc	r27, r19
    1fb6:	e4 07       	cpc	r30, r20
    1fb8:	f5 07       	cpc	r31, r21
    1fba:	20 f0       	brcs	.+8      	; 0x1fc4 <__udivmodsi4_ep>
    1fbc:	a2 1b       	sub	r26, r18
    1fbe:	b3 0b       	sbc	r27, r19
    1fc0:	e4 0b       	sbc	r30, r20
    1fc2:	f5 0b       	sbc	r31, r21

00001fc4 <__udivmodsi4_ep>:
    1fc4:	66 1f       	adc	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	1a 94       	dec	r1
    1fce:	69 f7       	brne	.-38     	; 0x1faa <__udivmodsi4_loop>
    1fd0:	60 95       	com	r22
    1fd2:	70 95       	com	r23
    1fd4:	80 95       	com	r24
    1fd6:	90 95       	com	r25
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	bd 01       	movw	r22, r26
    1fde:	cf 01       	movw	r24, r30
    1fe0:	08 95       	ret

00001fe2 <__prologue_saves__>:
    1fe2:	2f 92       	push	r2
    1fe4:	3f 92       	push	r3
    1fe6:	4f 92       	push	r4
    1fe8:	5f 92       	push	r5
    1fea:	6f 92       	push	r6
    1fec:	7f 92       	push	r7
    1fee:	8f 92       	push	r8
    1ff0:	9f 92       	push	r9
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	ca 1b       	sub	r28, r26
    200c:	db 0b       	sbc	r29, r27
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	09 94       	ijmp

0000201a <__epilogue_restores__>:
    201a:	2a 88       	ldd	r2, Y+18	; 0x12
    201c:	39 88       	ldd	r3, Y+17	; 0x11
    201e:	48 88       	ldd	r4, Y+16	; 0x10
    2020:	5f 84       	ldd	r5, Y+15	; 0x0f
    2022:	6e 84       	ldd	r6, Y+14	; 0x0e
    2024:	7d 84       	ldd	r7, Y+13	; 0x0d
    2026:	8c 84       	ldd	r8, Y+12	; 0x0c
    2028:	9b 84       	ldd	r9, Y+11	; 0x0b
    202a:	aa 84       	ldd	r10, Y+10	; 0x0a
    202c:	b9 84       	ldd	r11, Y+9	; 0x09
    202e:	c8 84       	ldd	r12, Y+8	; 0x08
    2030:	df 80       	ldd	r13, Y+7	; 0x07
    2032:	ee 80       	ldd	r14, Y+6	; 0x06
    2034:	fd 80       	ldd	r15, Y+5	; 0x05
    2036:	0c 81       	ldd	r16, Y+4	; 0x04
    2038:	1b 81       	ldd	r17, Y+3	; 0x03
    203a:	aa 81       	ldd	r26, Y+2	; 0x02
    203c:	b9 81       	ldd	r27, Y+1	; 0x01
    203e:	ce 0f       	add	r28, r30
    2040:	d1 1d       	adc	r29, r1
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	ed 01       	movw	r28, r26
    204e:	08 95       	ret

00002050 <_exit>:
    2050:	f8 94       	cli

00002052 <__stop_program>:
    2052:	ff cf       	rjmp	.-2      	; 0x2052 <__stop_program>
