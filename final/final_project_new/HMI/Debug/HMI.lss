
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00003f04  00003f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080010c  0080010c  00004044  2**0
                  ALLOC
  3 .stab         000033c0  00000000  00000000  00004044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f6  00000000  00000000  00007404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000087fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000893a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c779  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <__vector_7>
      20:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__vector_8>
      24:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <main>
      8a:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ed       	ldi	r26, 0xDC	; 220
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ed       	ldi	r24, 0xDC	; 220
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * description: the fun is responsible for set the dir of the pins input/output
 *input: the port number, pin number and the  wanted direction
 * return void
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	//if the entered port number or pin number is greater than the number of total ports and pins then do nothing
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT))
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* do nothing */
	}
	/* Setup the pin direction as required */
	else
	{
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID :
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * description: the fun is responsible for writing the entered value in the entered pin
 *input: the port number, pin number and the  value to be written in the pin
 * return void
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	//if the entered port number or pin number is greater than the number of total ports and pins then do nothing
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT))
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* do nothing */
	}
	/* Write the pin value as required */
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 *input: the port number and pin number
 * return the value for the required pin
 */

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value=LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	//if the entered port number or pin number is greater than the number of total ports and pins then do nothing
	if((port_num>=NUM_OF_PORTS)||(pin_num>=NUM_OF_PINS_PER_PORT))
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* do nothing */
	}
	/* return the value of required pin */
	else
	{
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID :
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value= LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value= LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value= LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value= LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 */



void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	//if the entered port number is greater than the number of total ports then do nothing
	if((port_num>=NUM_OF_PORTS))
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	}
	/* set the direction of the port as required */
	else
	{
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID :
			DDRA= direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB= direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC= direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD= direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:




void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	//if the entered port number is greater than the number of total ports then do nothing
	if((port_num>=NUM_OF_PORTS))
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* do nothing */
	}
	//write the value in the required port
	else
	{
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID :
			PORTA= value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB= value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC= value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD= value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:




uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01
	//if the entered port number is greater than the number of total ports then do nothing
	if((port_num>=NUM_OF_PORTS))
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
	{}
	//read and return the value of the required port
	else
	{
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID :
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <KEYPAD_getPressedKey+0x6>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    11ce:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    11d0:	1b 82       	std	Y+3, r1	; 0x03
    11d2:	43 c0       	rjmp	.+134    	; 0x125a <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	98 2f       	mov	r25, r24
    11e0:	9c 5f       	subi	r25, 0xFC	; 252
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	69 2f       	mov	r22, r25
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 01       	movw	r18, r24
    11f4:	2c 5f       	subi	r18, 0xFC	; 252
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <KEYPAD_getPressedKey+0x40>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <KEYPAD_getPressedKey+0x3c>
    1206:	80 95       	com	r24
    1208:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	69 81       	ldd	r22, Y+1	; 0x01
    120e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1212:	1a 82       	std	Y+2, r1	; 0x02
    1214:	1c c0       	rjmp	.+56     	; 0x124e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	6a 81       	ldd	r22, Y+2	; 0x02
    121a:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    121e:	88 23       	and	r24, r24
    1220:	99 f4       	brne	.+38     	; 0x1248 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	98 2f       	mov	r25, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	89 0f       	add	r24, r25
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	0e 94 32 09 	call	0x1264	; 0x1264 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f3       	brcs	.-62     	; 0x1216 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	08 f4       	brcc	.+2      	; 0x1262 <KEYPAD_getPressedKey+0xa0>
    1260:	b9 cf       	rjmp	.-142    	; 0x11d4 <KEYPAD_getPressedKey+0x12>
    1262:	b6 cf       	rjmp	.-148    	; 0x11d0 <KEYPAD_getPressedKey+0xe>

00001264 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <KEYPAD_4x4_adjustKeyNumber+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <KEYPAD_4x4_adjustKeyNumber+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1272:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 83       	std	Y+4, r19	; 0x04
    127c:	2b 83       	std	Y+3, r18	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	91 05       	cpc	r25, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1288:	70 c0       	rjmp	.+224    	; 0x136a <KEYPAD_4x4_adjustKeyNumber+0x106>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	29 30       	cpi	r18, 0x09	; 9
    1290:	31 05       	cpc	r19, r1
    1292:	5c f5       	brge	.+86     	; 0x12ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    129e:	59 c0       	rjmp	.+178    	; 0x1352 <KEYPAD_4x4_adjustKeyNumber+0xee>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	25 30       	cpi	r18, 0x05	; 5
    12a6:	31 05       	cpc	r19, r1
    12a8:	9c f4       	brge	.+38     	; 0x12d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    12b4:	48 c0       	rjmp	.+144    	; 0x1346 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	23 30       	cpi	r18, 0x03	; 3
    12bc:	31 05       	cpc	r19, r1
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    12c0:	45 c0       	rjmp	.+138    	; 0x134c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    12cc:	39 c0       	rjmp	.+114    	; 0x1340 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    12ce:	67 c0       	rjmp	.+206    	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	26 30       	cpi	r18, 0x06	; 6
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    12da:	41 c0       	rjmp	.+130    	; 0x135e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	87 30       	cpi	r24, 0x07	; 7
    12e2:	91 05       	cpc	r25, r1
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    12e6:	3e c0       	rjmp	.+124    	; 0x1364 <KEYPAD_4x4_adjustKeyNumber+0x100>
    12e8:	37 c0       	rjmp	.+110    	; 0x1358 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	2c 30       	cpi	r18, 0x0C	; 12
    12f0:	31 05       	cpc	r19, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    12f4:	46 c0       	rjmp	.+140    	; 0x1382 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	8d 30       	cpi	r24, 0x0D	; 13
    12fc:	91 05       	cpc	r25, r1
    12fe:	5c f4       	brge	.+22     	; 0x1316 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	2a 30       	cpi	r18, 0x0A	; 10
    1306:	31 05       	cpc	r19, r1
    1308:	b1 f1       	breq	.+108    	; 0x1376 <KEYPAD_4x4_adjustKeyNumber+0x112>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	8b 30       	cpi	r24, 0x0B	; 11
    1310:	91 05       	cpc	r25, r1
    1312:	a4 f5       	brge	.+104    	; 0x137c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1314:	2d c0       	rjmp	.+90     	; 0x1370 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	2e 30       	cpi	r18, 0x0E	; 14
    131c:	31 05       	cpc	r19, r1
    131e:	b9 f1       	breq	.+110    	; 0x138e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	8e 30       	cpi	r24, 0x0E	; 14
    1326:	91 05       	cpc	r25, r1
    1328:	7c f1       	brlt	.+94     	; 0x1388 <KEYPAD_4x4_adjustKeyNumber+0x124>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	2f 30       	cpi	r18, 0x0F	; 15
    1330:	31 05       	cpc	r19, r1
    1332:	79 f1       	breq	.+94     	; 0x1392 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	80 31       	cpi	r24, 0x10	; 16
    133a:	91 05       	cpc	r25, r1
    133c:	69 f1       	breq	.+90     	; 0x1398 <KEYPAD_4x4_adjustKeyNumber+0x134>
    133e:	2f c0       	rjmp	.+94     	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1340:	87 e0       	ldi	r24, 0x07	; 7
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	2e c0       	rjmp	.+92     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	2b c0       	rjmp	.+86     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    134c:	89 e0       	ldi	r24, 0x09	; 9
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1352:	85 e2       	ldi	r24, 0x25	; 37
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	25 c0       	rjmp	.+74     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	22 c0       	rjmp	.+68     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    135e:	85 e0       	ldi	r24, 0x05	; 5
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1364:	86 e0       	ldi	r24, 0x06	; 6
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	1c c0       	rjmp	.+56     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    136a:	8a e2       	ldi	r24, 0x2A	; 42
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	19 c0       	rjmp	.+50     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	10 c0       	rjmp	.+32     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1382:	8d e2       	ldi	r24, 0x2D	; 45
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1388:	8d e0       	ldi	r24, 0x0D	; 13
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    138e:	19 82       	std	Y+1, r1	; 0x01
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1392:	8d e3       	ldi	r24, 0x3D	; 61
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1398:	8b e2       	ldi	r24, 0x2B	; 43
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_sendCommand>:
  description: the fun is responsible for send the command to lcd
 input: command
  return void
 */
void LCD_sendCommand(uint8 command)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	e9 97       	sbiw	r28, 0x39	; 57
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e8       	ldi	r26, 0x80	; 128
    13d8:	bf e3       	ldi	r27, 0x3F	; 63
    13da:	8d ab       	std	Y+53, r24	; 0x35
    13dc:	9e ab       	std	Y+54, r25	; 0x36
    13de:	af ab       	std	Y+55, r26	; 0x37
    13e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	6d a9       	ldd	r22, Y+53	; 0x35
    13e4:	7e a9       	ldd	r23, Y+54	; 0x36
    13e6:	8f a9       	ldd	r24, Y+55	; 0x37
    13e8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a ef       	ldi	r20, 0xFA	; 250
    13f0:	54 e4       	ldi	r21, 0x44	; 68
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	89 ab       	std	Y+49, r24	; 0x31
    13fc:	9a ab       	std	Y+50, r25	; 0x32
    13fe:	ab ab       	std	Y+51, r26	; 0x33
    1400:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1402:	69 a9       	ldd	r22, Y+49	; 0x31
    1404:	7a a9       	ldd	r23, Y+50	; 0x32
    1406:	8b a9       	ldd	r24, Y+51	; 0x33
    1408:	9c a9       	ldd	r25, Y+52	; 0x34
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <LCD_sendCommand+0x72>
		__ticks = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	98 ab       	std	Y+48, r25	; 0x30
    1420:	8f a7       	std	Y+47, r24	; 0x2f
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1424:	69 a9       	ldd	r22, Y+49	; 0x31
    1426:	7a a9       	ldd	r23, Y+50	; 0x32
    1428:	8b a9       	ldd	r24, Y+51	; 0x33
    142a:	9c a9       	ldd	r25, Y+52	; 0x34
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	57 e4       	ldi	r21, 0x47	; 71
    1434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	6d a9       	ldd	r22, Y+53	; 0x35
    143e:	7e a9       	ldd	r23, Y+54	; 0x36
    1440:	8f a9       	ldd	r24, Y+55	; 0x37
    1442:	98 ad       	ldd	r25, Y+56	; 0x38
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	98 ab       	std	Y+48, r25	; 0x30
    1462:	8f a7       	std	Y+47, r24	; 0x2f
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <LCD_sendCommand+0xd2>
    1466:	88 ec       	ldi	r24, 0xC8	; 200
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9e a7       	std	Y+46, r25	; 0x2e
    146c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    146e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1470:	9e a5       	ldd	r25, Y+46	; 0x2e
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_sendCommand+0xc0>
    1476:	9e a7       	std	Y+46, r25	; 0x2e
    1478:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	8f a5       	ldd	r24, Y+47	; 0x2f
    147c:	98 a9       	ldd	r25, Y+48	; 0x30
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	98 ab       	std	Y+48, r25	; 0x30
    1482:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	8f a5       	ldd	r24, Y+47	; 0x2f
    1486:	98 a9       	ldd	r25, Y+48	; 0x30
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <LCD_sendCommand+0xb4>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	69 a9       	ldd	r22, Y+49	; 0x31
    1490:	7a a9       	ldd	r23, Y+50	; 0x32
    1492:	8b a9       	ldd	r24, Y+51	; 0x33
    1494:	9c a9       	ldd	r25, Y+52	; 0x34
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	98 ab       	std	Y+48, r25	; 0x30
    14a0:	8f a7       	std	Y+47, r24	; 0x2f
    14a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a4:	98 a9       	ldd	r25, Y+48	; 0x30
    14a6:	9c a7       	std	Y+44, r25	; 0x2c
    14a8:	8b a7       	std	Y+43, r24	; 0x2b
    14aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <LCD_sendCommand+0xfc>
    14b2:	9c a7       	std	Y+44, r25	; 0x2c
    14b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	63 e0       	ldi	r22, 0x03	; 3
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e8       	ldi	r26, 0x80	; 128
    14c6:	bf e3       	ldi	r27, 0x3F	; 63
    14c8:	8f a3       	std	Y+39, r24	; 0x27
    14ca:	98 a7       	std	Y+40, r25	; 0x28
    14cc:	a9 a7       	std	Y+41, r26	; 0x29
    14ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	6f a1       	ldd	r22, Y+39	; 0x27
    14d2:	78 a5       	ldd	r23, Y+40	; 0x28
    14d4:	89 a5       	ldd	r24, Y+41	; 0x29
    14d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a ef       	ldi	r20, 0xFA	; 250
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8b a3       	std	Y+35, r24	; 0x23
    14ea:	9c a3       	std	Y+36, r25	; 0x24
    14ec:	ad a3       	std	Y+37, r26	; 0x25
    14ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14f0:	6b a1       	ldd	r22, Y+35	; 0x23
    14f2:	7c a1       	ldd	r23, Y+36	; 0x24
    14f4:	8d a1       	ldd	r24, Y+37	; 0x25
    14f6:	9e a1       	ldd	r25, Y+38	; 0x26
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <LCD_sendCommand+0x160>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9a a3       	std	Y+34, r25	; 0x22
    150e:	89 a3       	std	Y+33, r24	; 0x21
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1512:	6b a1       	ldd	r22, Y+35	; 0x23
    1514:	7c a1       	ldd	r23, Y+36	; 0x24
    1516:	8d a1       	ldd	r24, Y+37	; 0x25
    1518:	9e a1       	ldd	r25, Y+38	; 0x26
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3f ef       	ldi	r19, 0xFF	; 255
    151e:	4f e7       	ldi	r20, 0x7F	; 127
    1520:	57 e4       	ldi	r21, 0x47	; 71
    1522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	6f a1       	ldd	r22, Y+39	; 0x27
    152c:	78 a5       	ldd	r23, Y+40	; 0x28
    152e:	89 a5       	ldd	r24, Y+41	; 0x29
    1530:	9a a5       	ldd	r25, Y+42	; 0x2a
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9a a3       	std	Y+34, r25	; 0x22
    1550:	89 a3       	std	Y+33, r24	; 0x21
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <LCD_sendCommand+0x1c0>
    1554:	88 ec       	ldi	r24, 0xC8	; 200
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	98 a3       	std	Y+32, r25	; 0x20
    155a:	8f 8f       	std	Y+31, r24	; 0x1f
    155c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155e:	98 a1       	ldd	r25, Y+32	; 0x20
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <LCD_sendCommand+0x1ae>
    1564:	98 a3       	std	Y+32, r25	; 0x20
    1566:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	89 a1       	ldd	r24, Y+33	; 0x21
    156a:	9a a1       	ldd	r25, Y+34	; 0x22
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f7       	brne	.-38     	; 0x1554 <LCD_sendCommand+0x1a2>
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	6b a1       	ldd	r22, Y+35	; 0x23
    157e:	7c a1       	ldd	r23, Y+36	; 0x24
    1580:	8d a1       	ldd	r24, Y+37	; 0x25
    1582:	9e a1       	ldd	r25, Y+38	; 0x26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9a a3       	std	Y+34, r25	; 0x22
    158e:	89 a3       	std	Y+33, r24	; 0x21
    1590:	89 a1       	ldd	r24, Y+33	; 0x21
    1592:	9a a1       	ldd	r25, Y+34	; 0x22
    1594:	9e 8f       	std	Y+30, r25	; 0x1e
    1596:	8d 8f       	std	Y+29, r24	; 0x1d
    1598:	8d 8d       	ldd	r24, Y+29	; 0x1d
    159a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_sendCommand+0x1ea>
    15a0:	9e 8f       	std	Y+30, r25	; 0x1e
    15a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	69 ad       	ldd	r22, Y+57	; 0x39
    15a8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e8       	ldi	r26, 0x80	; 128
    15b2:	bf e3       	ldi	r27, 0x3F	; 63
    15b4:	89 8f       	std	Y+25, r24	; 0x19
    15b6:	9a 8f       	std	Y+26, r25	; 0x1a
    15b8:	ab 8f       	std	Y+27, r26	; 0x1b
    15ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	69 8d       	ldd	r22, Y+25	; 0x19
    15be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8d 8b       	std	Y+21, r24	; 0x15
    15d6:	9e 8b       	std	Y+22, r25	; 0x16
    15d8:	af 8b       	std	Y+23, r26	; 0x17
    15da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15dc:	6d 89       	ldd	r22, Y+21	; 0x15
    15de:	7e 89       	ldd	r23, Y+22	; 0x16
    15e0:	8f 89       	ldd	r24, Y+23	; 0x17
    15e2:	98 8d       	ldd	r25, Y+24	; 0x18
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <LCD_sendCommand+0x24c>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9c 8b       	std	Y+20, r25	; 0x14
    15fa:	8b 8b       	std	Y+19, r24	; 0x13
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    15fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1600:	7e 89       	ldd	r23, Y+22	; 0x16
    1602:	8f 89       	ldd	r24, Y+23	; 0x17
    1604:	98 8d       	ldd	r25, Y+24	; 0x18
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	69 8d       	ldd	r22, Y+25	; 0x19
    1618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9c 8b       	std	Y+20, r25	; 0x14
    163c:	8b 8b       	std	Y+19, r24	; 0x13
    163e:	0f c0       	rjmp	.+30     	; 0x165e <LCD_sendCommand+0x2ac>
    1640:	88 ec       	ldi	r24, 0xC8	; 200
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9a 8b       	std	Y+18, r25	; 0x12
    1646:	89 8b       	std	Y+17, r24	; 0x11
    1648:	89 89       	ldd	r24, Y+17	; 0x11
    164a:	9a 89       	ldd	r25, Y+18	; 0x12
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <LCD_sendCommand+0x29a>
    1650:	9a 8b       	std	Y+18, r25	; 0x12
    1652:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	8b 89       	ldd	r24, Y+19	; 0x13
    1656:	9c 89       	ldd	r25, Y+20	; 0x14
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9c 8b       	std	Y+20, r25	; 0x14
    165c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	8b 89       	ldd	r24, Y+19	; 0x13
    1660:	9c 89       	ldd	r25, Y+20	; 0x14
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <LCD_sendCommand+0x28e>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	6d 89       	ldd	r22, Y+21	; 0x15
    166a:	7e 89       	ldd	r23, Y+22	; 0x16
    166c:	8f 89       	ldd	r24, Y+23	; 0x17
    166e:	98 8d       	ldd	r25, Y+24	; 0x18
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	8b 89       	ldd	r24, Y+19	; 0x13
    167e:	9c 89       	ldd	r25, Y+20	; 0x14
    1680:	98 8b       	std	Y+16, r25	; 0x10
    1682:	8f 87       	std	Y+15, r24	; 0x0f
    1684:	8f 85       	ldd	r24, Y+15	; 0x0f
    1686:	98 89       	ldd	r25, Y+16	; 0x10
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_sendCommand+0x2d6>
    168c:	98 8b       	std	Y+16, r25	; 0x10
    168e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	63 e0       	ldi	r22, 0x03	; 3
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a0 e8       	ldi	r26, 0x80	; 128
    16a0:	bf e3       	ldi	r27, 0x3F	; 63
    16a2:	8b 87       	std	Y+11, r24	; 0x0b
    16a4:	9c 87       	std	Y+12, r25	; 0x0c
    16a6:	ad 87       	std	Y+13, r26	; 0x0d
    16a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a ef       	ldi	r20, 0xFA	; 250
    16b8:	54 e4       	ldi	r21, 0x44	; 68
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8f 83       	std	Y+7, r24	; 0x07
    16c4:	98 87       	std	Y+8, r25	; 0x08
    16c6:	a9 87       	std	Y+9, r26	; 0x09
    16c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	2c f4       	brge	.+10     	; 0x16ec <LCD_sendCommand+0x33a>
		__ticks = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9e 83       	std	Y+6, r25	; 0x06
    16e8:	8d 83       	std	Y+5, r24	; 0x05
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	4c f5       	brge	.+82     	; 0x1756 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1704:	6b 85       	ldd	r22, Y+11	; 0x0b
    1706:	7c 85       	ldd	r23, Y+12	; 0x0c
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	9e 85       	ldd	r25, Y+14	; 0x0e
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	0f c0       	rjmp	.+30     	; 0x174c <LCD_sendCommand+0x39a>
    172e:	88 ec       	ldi	r24, 0xC8	; 200
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <LCD_sendCommand+0x388>
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f7       	brne	.-38     	; 0x172e <LCD_sendCommand+0x37c>
    1754:	14 c0       	rjmp	.+40     	; 0x177e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	6f 81       	ldd	r22, Y+7	; 0x07
    1758:	78 85       	ldd	r23, Y+8	; 0x08
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <LCD_sendCommand+0x3c4>
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    177e:	e9 96       	adiw	r28, 0x39	; 57
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <LCD_displayCharacter>:
   description: the fun is responsible for display character on lcd
  input: data to be printed on LCD
   return void
 */
void LCD_displayCharacter(uint8 data)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	e9 97       	sbiw	r28, 0x39	; 57
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	62 e0       	ldi	r22, 0x02	; 2
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e8       	ldi	r26, 0x80	; 128
    17b6:	bf e3       	ldi	r27, 0x3F	; 63
    17b8:	8d ab       	std	Y+53, r24	; 0x35
    17ba:	9e ab       	std	Y+54, r25	; 0x36
    17bc:	af ab       	std	Y+55, r26	; 0x37
    17be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	6d a9       	ldd	r22, Y+53	; 0x35
    17c2:	7e a9       	ldd	r23, Y+54	; 0x36
    17c4:	8f a9       	ldd	r24, Y+55	; 0x37
    17c6:	98 ad       	ldd	r25, Y+56	; 0x38
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a ef       	ldi	r20, 0xFA	; 250
    17ce:	54 e4       	ldi	r21, 0x44	; 68
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	89 ab       	std	Y+49, r24	; 0x31
    17da:	9a ab       	std	Y+50, r25	; 0x32
    17dc:	ab ab       	std	Y+51, r26	; 0x33
    17de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e0:	69 a9       	ldd	r22, Y+49	; 0x31
    17e2:	7a a9       	ldd	r23, Y+50	; 0x32
    17e4:	8b a9       	ldd	r24, Y+51	; 0x33
    17e6:	9c a9       	ldd	r25, Y+52	; 0x34
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <LCD_displayCharacter+0x72>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	98 ab       	std	Y+48, r25	; 0x30
    17fe:	8f a7       	std	Y+47, r24	; 0x2f
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1802:	69 a9       	ldd	r22, Y+49	; 0x31
    1804:	7a a9       	ldd	r23, Y+50	; 0x32
    1806:	8b a9       	ldd	r24, Y+51	; 0x33
    1808:	9c a9       	ldd	r25, Y+52	; 0x34
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1816:	18 16       	cp	r1, r24
    1818:	4c f5       	brge	.+82     	; 0x186c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181a:	6d a9       	ldd	r22, Y+53	; 0x35
    181c:	7e a9       	ldd	r23, Y+54	; 0x36
    181e:	8f a9       	ldd	r24, Y+55	; 0x37
    1820:	98 ad       	ldd	r25, Y+56	; 0x38
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	98 ab       	std	Y+48, r25	; 0x30
    1840:	8f a7       	std	Y+47, r24	; 0x2f
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <LCD_displayCharacter+0xd2>
    1844:	88 ec       	ldi	r24, 0xC8	; 200
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9e a7       	std	Y+46, r25	; 0x2e
    184a:	8d a7       	std	Y+45, r24	; 0x2d
    184c:	8d a5       	ldd	r24, Y+45	; 0x2d
    184e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_displayCharacter+0xc0>
    1854:	9e a7       	std	Y+46, r25	; 0x2e
    1856:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	98 ab       	std	Y+48, r25	; 0x30
    1860:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	8f a5       	ldd	r24, Y+47	; 0x2f
    1864:	98 a9       	ldd	r25, Y+48	; 0x30
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f7       	brne	.-38     	; 0x1844 <LCD_displayCharacter+0xb4>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	69 a9       	ldd	r22, Y+49	; 0x31
    186e:	7a a9       	ldd	r23, Y+50	; 0x32
    1870:	8b a9       	ldd	r24, Y+51	; 0x33
    1872:	9c a9       	ldd	r25, Y+52	; 0x34
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	98 ab       	std	Y+48, r25	; 0x30
    187e:	8f a7       	std	Y+47, r24	; 0x2f
    1880:	8f a5       	ldd	r24, Y+47	; 0x2f
    1882:	98 a9       	ldd	r25, Y+48	; 0x30
    1884:	9c a7       	std	Y+44, r25	; 0x2c
    1886:	8b a7       	std	Y+43, r24	; 0x2b
    1888:	8b a5       	ldd	r24, Y+43	; 0x2b
    188a:	9c a5       	ldd	r25, Y+44	; 0x2c
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_displayCharacter+0xfc>
    1890:	9c a7       	std	Y+44, r25	; 0x2c
    1892:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	63 e0       	ldi	r22, 0x03	; 3
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e8       	ldi	r26, 0x80	; 128
    18a4:	bf e3       	ldi	r27, 0x3F	; 63
    18a6:	8f a3       	std	Y+39, r24	; 0x27
    18a8:	98 a7       	std	Y+40, r25	; 0x28
    18aa:	a9 a7       	std	Y+41, r26	; 0x29
    18ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6f a1       	ldd	r22, Y+39	; 0x27
    18b0:	78 a5       	ldd	r23, Y+40	; 0x28
    18b2:	89 a5       	ldd	r24, Y+41	; 0x29
    18b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8b a3       	std	Y+35, r24	; 0x23
    18c8:	9c a3       	std	Y+36, r25	; 0x24
    18ca:	ad a3       	std	Y+37, r26	; 0x25
    18cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ce:	6b a1       	ldd	r22, Y+35	; 0x23
    18d0:	7c a1       	ldd	r23, Y+36	; 0x24
    18d2:	8d a1       	ldd	r24, Y+37	; 0x25
    18d4:	9e a1       	ldd	r25, Y+38	; 0x26
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9a a3       	std	Y+34, r25	; 0x22
    18ec:	89 a3       	std	Y+33, r24	; 0x21
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    18f0:	6b a1       	ldd	r22, Y+35	; 0x23
    18f2:	7c a1       	ldd	r23, Y+36	; 0x24
    18f4:	8d a1       	ldd	r24, Y+37	; 0x25
    18f6:	9e a1       	ldd	r25, Y+38	; 0x26
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6f a1       	ldd	r22, Y+39	; 0x27
    190a:	78 a5       	ldd	r23, Y+40	; 0x28
    190c:	89 a5       	ldd	r24, Y+41	; 0x29
    190e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9a a3       	std	Y+34, r25	; 0x22
    192e:	89 a3       	std	Y+33, r24	; 0x21
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <LCD_displayCharacter+0x1c0>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	98 a3       	std	Y+32, r25	; 0x20
    1938:	8f 8f       	std	Y+31, r24	; 0x1f
    193a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    193c:	98 a1       	ldd	r25, Y+32	; 0x20
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <LCD_displayCharacter+0x1ae>
    1942:	98 a3       	std	Y+32, r25	; 0x20
    1944:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	89 a1       	ldd	r24, Y+33	; 0x21
    1948:	9a a1       	ldd	r25, Y+34	; 0x22
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9a a3       	std	Y+34, r25	; 0x22
    194e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	89 a1       	ldd	r24, Y+33	; 0x21
    1952:	9a a1       	ldd	r25, Y+34	; 0x22
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <LCD_displayCharacter+0x1a2>
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6b a1       	ldd	r22, Y+35	; 0x23
    195c:	7c a1       	ldd	r23, Y+36	; 0x24
    195e:	8d a1       	ldd	r24, Y+37	; 0x25
    1960:	9e a1       	ldd	r25, Y+38	; 0x26
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9a a3       	std	Y+34, r25	; 0x22
    196c:	89 a3       	std	Y+33, r24	; 0x21
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	9e 8f       	std	Y+30, r25	; 0x1e
    1974:	8d 8f       	std	Y+29, r24	; 0x1d
    1976:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1978:	9e 8d       	ldd	r25, Y+30	; 0x1e
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_displayCharacter+0x1ea>
    197e:	9e 8f       	std	Y+30, r25	; 0x1e
    1980:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	69 ad       	ldd	r22, Y+57	; 0x39
    1986:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e8       	ldi	r26, 0x80	; 128
    1990:	bf e3       	ldi	r27, 0x3F	; 63
    1992:	89 8f       	std	Y+25, r24	; 0x19
    1994:	9a 8f       	std	Y+26, r25	; 0x1a
    1996:	ab 8f       	std	Y+27, r26	; 0x1b
    1998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	69 8d       	ldd	r22, Y+25	; 0x19
    199c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	4a ef       	ldi	r20, 0xFA	; 250
    19a8:	54 e4       	ldi	r21, 0x44	; 68
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8d 8b       	std	Y+21, r24	; 0x15
    19b4:	9e 8b       	std	Y+22, r25	; 0x16
    19b6:	af 8b       	std	Y+23, r26	; 0x17
    19b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ba:	6d 89       	ldd	r22, Y+21	; 0x15
    19bc:	7e 89       	ldd	r23, Y+22	; 0x16
    19be:	8f 89       	ldd	r24, Y+23	; 0x17
    19c0:	98 8d       	ldd	r25, Y+24	; 0x18
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ce:	88 23       	and	r24, r24
    19d0:	2c f4       	brge	.+10     	; 0x19dc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9c 8b       	std	Y+20, r25	; 0x14
    19d8:	8b 8b       	std	Y+19, r24	; 0x13
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    19dc:	6d 89       	ldd	r22, Y+21	; 0x15
    19de:	7e 89       	ldd	r23, Y+22	; 0x16
    19e0:	8f 89       	ldd	r24, Y+23	; 0x17
    19e2:	98 8d       	ldd	r25, Y+24	; 0x18
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	4c f5       	brge	.+82     	; 0x1a46 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	69 8d       	ldd	r22, Y+25	; 0x19
    19f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	8b 8b       	std	Y+19, r24	; 0x13
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <LCD_displayCharacter+0x2ac>
    1a1e:	88 ec       	ldi	r24, 0xC8	; 200
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9a 8b       	std	Y+18, r25	; 0x12
    1a24:	89 8b       	std	Y+17, r24	; 0x11
    1a26:	89 89       	ldd	r24, Y+17	; 0x11
    1a28:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_displayCharacter+0x29a>
    1a2e:	9a 8b       	std	Y+18, r25	; 0x12
    1a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	9c 8b       	std	Y+20, r25	; 0x14
    1a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <LCD_displayCharacter+0x28e>
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	6d 89       	ldd	r22, Y+21	; 0x15
    1a48:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9c 8b       	std	Y+20, r25	; 0x14
    1a58:	8b 8b       	std	Y+19, r24	; 0x13
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	98 8b       	std	Y+16, r25	; 0x10
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	98 89       	ldd	r25, Y+16	; 0x10
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_displayCharacter+0x2d6>
    1a6a:	98 8b       	std	Y+16, r25	; 0x10
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	63 e0       	ldi	r22, 0x03	; 3
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e8       	ldi	r26, 0x80	; 128
    1a7e:	bf e3       	ldi	r27, 0x3F	; 63
    1a80:	8b 87       	std	Y+11, r24	; 0x0b
    1a82:	9c 87       	std	Y+12, r25	; 0x0c
    1a84:	ad 87       	std	Y+13, r26	; 0x0d
    1a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a ef       	ldi	r20, 0xFA	; 250
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f 83       	std	Y+7, r24	; 0x07
    1aa2:	98 87       	std	Y+8, r25	; 0x08
    1aa4:	a9 87       	std	Y+9, r26	; 0x09
    1aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_displayCharacter+0x39a>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_displayCharacter+0x388>
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_displayCharacter+0x37c>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_displayCharacter+0x3c4>
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b5c:	e9 96       	adiw	r28, 0x39	; 57
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <LCD_init>:
/*LCD_init
   description: the fun is responsible for initialize the characteristics of lcd
  input: void
   return void
 */
void LCD_init(void){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	2e 97       	sbiw	r28, 0x0e	; 14
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	63 e0       	ldi	r22, 0x03	; 3
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 ea       	ldi	r26, 0xA0	; 160
    1b9c:	b1 e4       	ldi	r27, 0x41	; 65
    1b9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ba0:	9c 87       	std	Y+12, r25	; 0x0c
    1ba2:	ad 87       	std	Y+13, r26	; 0x0d
    1ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8f 83       	std	Y+7, r24	; 0x07
    1bc0:	98 87       	std	Y+8, r25	; 0x08
    1bc2:	a9 87       	std	Y+9, r26	; 0x09
    1bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_init+0x7a>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_init+0xda>
    1c2a:	88 ec       	ldi	r24, 0xC8	; 200
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_init+0xc8>
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_init+0xbc>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_init+0x104>
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	6f ef       	ldi	r22, 0xFF	; 255
    1c7e:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1c82:	88 e3       	ldi	r24, 0x38	; 56
    1c84:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c88:	8c e0       	ldi	r24, 0x0C	; 12
    1c8a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_sendCommand>

}
    1c94:	2e 96       	adiw	r28, 0x0e	; 14
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <LCD_displayString>:
  input: string to be printed on LCD
   return void
 */
//pointer to constant data so pointer cannot change in the string
void LCD_displayString(const char *string)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	61 97       	sbiw	r28, 0x11	; 17
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	99 8b       	std	Y+17, r25	; 0x11
    1cbc:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
    1cbe:	1f 86       	std	Y+15, r1	; 0x0f
    1cc0:	0e c0       	rjmp	.+28     	; 0x1cde <LCD_displayString+0x38>
	while(string[i]!='\0')
	{
		LCD_displayCharacter(string[i]);
    1cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	88 89       	ldd	r24, Y+16	; 0x10
    1cca:	99 89       	ldd	r25, Y+17	; 0x11
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e2 0f       	add	r30, r18
    1cd0:	f3 1f       	adc	r31, r19
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
		i++;
    1cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	8f 87       	std	Y+15, r24	; 0x0f
 */
//pointer to constant data so pointer cannot change in the string
void LCD_displayString(const char *string)
{
	uint8 i=0;
	while(string[i]!='\0')
    1cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	88 89       	ldd	r24, Y+16	; 0x10
    1ce6:	99 89       	ldd	r25, Y+17	; 0x11
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e2 0f       	add	r30, r18
    1cec:	f3 1f       	adc	r31, r19
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 23       	and	r24, r24
    1cf2:	39 f7       	brne	.-50     	; 0x1cc2 <LCD_displayString+0x1c>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e4       	ldi	r26, 0x40	; 64
    1cfa:	b0 e4       	ldi	r27, 0x40	; 64
    1cfc:	8b 87       	std	Y+11, r24	; 0x0b
    1cfe:	9c 87       	std	Y+12, r25	; 0x0c
    1d00:	ad 87       	std	Y+13, r26	; 0x0d
    1d02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a ef       	ldi	r20, 0xFA	; 250
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8f 83       	std	Y+7, r24	; 0x07
    1d1e:	98 87       	std	Y+8, r25	; 0x08
    1d20:	a9 87       	std	Y+9, r26	; 0x09
    1d22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <LCD_displayString+0xa0>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <LCD_displayString+0x11e>
	else if (__tmp > 65535)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <LCD_displayString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <LCD_displayString+0x100>
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 83       	std	Y+4, r25	; 0x04
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_displayString+0xee>
    1d98:	9c 83       	std	Y+4, r25	; 0x04
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <LCD_displayString+0xe2>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <LCD_displayString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	6f 81       	ldd	r22, Y+7	; 0x07
    1db2:	78 85       	ldd	r23, Y+8	; 0x08
    1db4:	89 85       	ldd	r24, Y+9	; 0x09
    1db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_displayString+0x12a>
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_displayCharacter(string[i]);
		i++;
	}
	_delay_ms(3);
}
    1dd8:	61 96       	adiw	r28, 0x11	; 17
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_moveCursor>:
   description: the fun is responsible for move cursor on lcd
  input:  number of row ,number of column
   return void
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <LCD_moveCursor+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <LCD_moveCursor+0x8>
    1df2:	0f 92       	push	r0
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	8a 83       	std	Y+2, r24	; 0x02
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	3d 83       	std	Y+5, r19	; 0x05
    1e04:	2c 83       	std	Y+4, r18	; 0x04
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	c1 f0       	breq	.+48     	; 0x1e40 <LCD_moveCursor+0x56>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	31 05       	cpc	r19, r1
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_moveCursor+0x3a>
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <LCD_moveCursor+0x50>
    1e22:	19 c0       	rjmp	.+50     	; 0x1e56 <LCD_moveCursor+0x6c>
    1e24:	2c 81       	ldd	r18, Y+4	; 0x04
    1e26:	3d 81       	ldd	r19, Y+5	; 0x05
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	69 f0       	breq	.+26     	; 0x1e48 <LCD_moveCursor+0x5e>
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	91 05       	cpc	r25, r1
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <LCD_moveCursor+0x66>
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	0b c0       	rjmp	.+22     	; 0x1e56 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	80 5c       	subi	r24, 0xC0	; 192
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	07 c0       	rjmp	.+14     	; 0x1e56 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	80 5f       	subi	r24, 0xF0	; 240
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	80 5b       	subi	r24, 0xB0	; 176
    1e54:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	80 68       	ori	r24, 0x80	; 128
    1e5a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_sendCommand>
}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <LCD_displayStringRowColumn>:
   description: the fun is responsible for display string on specific location on lcd
  input: no of row,no of col,pointer to char
   return void
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <LCD_displayStringRowColumn+0x6>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <LCD_displayStringRowColumn+0x8>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	6a 83       	std	Y+2, r22	; 0x02
    1e7e:	5c 83       	std	Y+4, r21	; 0x04
    1e80:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	6a 81       	ldd	r22, Y+2	; 0x02
    1e86:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <LCD_intgerToString>:
   description: the fun is responsible for display number on lcd
  input: data
   return void
 */
void LCD_intgerToString(int data)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	62 97       	sbiw	r28, 0x12	; 18
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	9a 8b       	std	Y+18, r25	; 0x12
    1eb6:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1eb8:	89 89       	ldd	r24, Y+17	; 0x11
    1eba:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebc:	9e 01       	movw	r18, r28
    1ebe:	2f 5f       	subi	r18, 0xFF	; 255
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	4a e0       	ldi	r20, 0x0A	; 10
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <itoa>
	LCD_displayString(buff); /* Display the string */
    1ecc:	ce 01       	movw	r24, r28
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
}
    1ed4:	62 96       	adiw	r28, 0x12	; 18
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_sendCommand>
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <time>:
Timer1_ConfigType Config_Ptr_time1 = {0,0,prescaler_1024,Normal};
Timer1_ConfigType Config_Ptr_time2 = {13884,0,prescaler_1024,Normal};
Timer1_ConfigType Config_Ptr_time3 = {42099,0,prescaler_1024,Normal};
Timer1_ConfigType Config_Ptr_time4 = {55538,0,prescaler_1024,Normal};
void time()
{tick++;
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	80 91 11 01 	lds	r24, 0x0111
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	80 93 11 01 	sts	0x0111, r24
	}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <main>:
int main()
{
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	c1 5e       	subi	r28, 0xE1	; 225
    1f20:	d0 40       	sbci	r29, 0x00	; 0
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1f2c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <LCD_init>
	SREG|=(1<<7);
    1f30:	af e5       	ldi	r26, 0x5F	; 95
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ef e5       	ldi	r30, 0x5F	; 95
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 68       	ori	r24, 0x80	; 128
    1f3c:	8c 93       	st	X, r24
	UART_ConfigType Config_Ptr_2 ={Disabled,one_bit,bit_8,9600};
    1f3e:	ce 01       	movw	r24, r28
    1f40:	8c 52       	subi	r24, 0x2C	; 44
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	c3 52       	subi	r28, 0x23	; 35
    1f46:	df 4f       	sbci	r29, 0xFF	; 255
    1f48:	99 83       	std	Y+1, r25	; 0x01
    1f4a:	88 83       	st	Y, r24
    1f4c:	cd 5d       	subi	r28, 0xDD	; 221
    1f4e:	d0 40       	sbci	r29, 0x00	; 0
    1f50:	24 e0       	ldi	r18, 0x04	; 4
    1f52:	31 e0       	ldi	r19, 0x01	; 1
    1f54:	c1 52       	subi	r28, 0x21	; 33
    1f56:	df 4f       	sbci	r29, 0xFF	; 255
    1f58:	39 83       	std	Y+1, r19	; 0x01
    1f5a:	28 83       	st	Y, r18
    1f5c:	cf 5d       	subi	r28, 0xDF	; 223
    1f5e:	d0 40       	sbci	r29, 0x00	; 0
    1f60:	37 e0       	ldi	r19, 0x07	; 7
    1f62:	cf 51       	subi	r28, 0x1F	; 31
    1f64:	df 4f       	sbci	r29, 0xFF	; 255
    1f66:	38 83       	st	Y, r19
    1f68:	c1 5e       	subi	r28, 0xE1	; 225
    1f6a:	d0 40       	sbci	r29, 0x00	; 0
    1f6c:	c1 52       	subi	r28, 0x21	; 33
    1f6e:	df 4f       	sbci	r29, 0xFF	; 255
    1f70:	e8 81       	ld	r30, Y
    1f72:	f9 81       	ldd	r31, Y+1	; 0x01
    1f74:	cf 5d       	subi	r28, 0xDF	; 223
    1f76:	d0 40       	sbci	r29, 0x00	; 0
    1f78:	00 80       	ld	r0, Z
    1f7a:	c1 52       	subi	r28, 0x21	; 33
    1f7c:	df 4f       	sbci	r29, 0xFF	; 255
    1f7e:	28 81       	ld	r18, Y
    1f80:	39 81       	ldd	r19, Y+1	; 0x01
    1f82:	cf 5d       	subi	r28, 0xDF	; 223
    1f84:	d0 40       	sbci	r29, 0x00	; 0
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	c1 52       	subi	r28, 0x21	; 33
    1f8c:	df 4f       	sbci	r29, 0xFF	; 255
    1f8e:	39 83       	std	Y+1, r19	; 0x01
    1f90:	28 83       	st	Y, r18
    1f92:	cf 5d       	subi	r28, 0xDF	; 223
    1f94:	d0 40       	sbci	r29, 0x00	; 0
    1f96:	c3 52       	subi	r28, 0x23	; 35
    1f98:	df 4f       	sbci	r29, 0xFF	; 255
    1f9a:	e8 81       	ld	r30, Y
    1f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9e:	cd 5d       	subi	r28, 0xDD	; 221
    1fa0:	d0 40       	sbci	r29, 0x00	; 0
    1fa2:	00 82       	st	Z, r0
    1fa4:	c3 52       	subi	r28, 0x23	; 35
    1fa6:	df 4f       	sbci	r29, 0xFF	; 255
    1fa8:	28 81       	ld	r18, Y
    1faa:	39 81       	ldd	r19, Y+1	; 0x01
    1fac:	cd 5d       	subi	r28, 0xDD	; 221
    1fae:	d0 40       	sbci	r29, 0x00	; 0
    1fb0:	2f 5f       	subi	r18, 0xFF	; 255
    1fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb4:	c3 52       	subi	r28, 0x23	; 35
    1fb6:	df 4f       	sbci	r29, 0xFF	; 255
    1fb8:	39 83       	std	Y+1, r19	; 0x01
    1fba:	28 83       	st	Y, r18
    1fbc:	cd 5d       	subi	r28, 0xDD	; 221
    1fbe:	d0 40       	sbci	r29, 0x00	; 0
    1fc0:	cf 51       	subi	r28, 0x1F	; 31
    1fc2:	df 4f       	sbci	r29, 0xFF	; 255
    1fc4:	38 81       	ld	r19, Y
    1fc6:	c1 5e       	subi	r28, 0xE1	; 225
    1fc8:	d0 40       	sbci	r29, 0x00	; 0
    1fca:	31 50       	subi	r19, 0x01	; 1
    1fcc:	cf 51       	subi	r28, 0x1F	; 31
    1fce:	df 4f       	sbci	r29, 0xFF	; 255
    1fd0:	38 83       	st	Y, r19
    1fd2:	c1 5e       	subi	r28, 0xE1	; 225
    1fd4:	d0 40       	sbci	r29, 0x00	; 0
    1fd6:	cf 51       	subi	r28, 0x1F	; 31
    1fd8:	df 4f       	sbci	r29, 0xFF	; 255
    1fda:	88 81       	ld	r24, Y
    1fdc:	c1 5e       	subi	r28, 0xE1	; 225
    1fde:	d0 40       	sbci	r29, 0x00	; 0
    1fe0:	88 23       	and	r24, r24
    1fe2:	21 f6       	brne	.-120    	; 0x1f6c <main+0x5a>
	UART_init(&Config_Ptr_2);
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	8c 52       	subi	r24, 0x2C	; 44
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <UART_init>
	uint8 i=0;
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ed 52       	subi	r30, 0x2D	; 45
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	10 82       	st	Z, r1

while(1){
//**************************************first system*******************************************************

	do{
		check_bit1=matched;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	80 93 0d 01 	sts	0x010D, r24
		/*Get the password from user and send it to the Control_ECU*/
		LCD_displayStringRowColumn(0, 0, "plz enter pass");
    1ffc:	20 e6       	ldi	r18, 0x60	; 96
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	a9 01       	movw	r20, r18
    2006:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <LCD_displayStringRowColumn>
    200a:	fe 01       	movw	r30, r28
    200c:	e1 53       	subi	r30, 0x31	; 49
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	aa ef       	ldi	r26, 0xFA	; 250
    2016:	b3 e4       	ldi	r27, 0x43	; 67
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	a2 83       	std	Z+2, r26	; 0x02
    201e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	8e 01       	movw	r16, r28
    2022:	05 53       	subi	r16, 0x35	; 53
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	fe 01       	movw	r30, r28
    2028:	e1 53       	subi	r30, 0x31	; 49
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a ef       	ldi	r20, 0xFA	; 250
    203a:	54 e4       	ldi	r21, 0x44	; 68
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	f8 01       	movw	r30, r16
    2046:	80 83       	st	Z, r24
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	a2 83       	std	Z+2, r26	; 0x02
    204c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    204e:	fe 01       	movw	r30, r28
    2050:	e5 53       	subi	r30, 0x35	; 53
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	44 f4       	brge	.+16     	; 0x207c <main+0x16a>
		__ticks = 1;
    206c:	fe 01       	movw	r30, r28
    206e:	e7 53       	subi	r30, 0x37	; 55
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	64 c0       	rjmp	.+200    	; 0x2144 <main+0x232>
	else if (__tmp > 65535)
    207c:	fe 01       	movw	r30, r28
    207e:	e5 53       	subi	r30, 0x35	; 53
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	0c f0       	brlt	.+2      	; 0x209c <main+0x18a>
    209a:	43 c0       	rjmp	.+134    	; 0x2122 <main+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	fe 01       	movw	r30, r28
    209e:	e1 53       	subi	r30, 0x31	; 49
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8e 01       	movw	r16, r28
    20bc:	07 53       	subi	r16, 0x37	; 55
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	f8 01       	movw	r30, r16
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	1f c0       	rjmp	.+62     	; 0x2112 <main+0x200>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e9 53       	subi	r30, 0x39	; 57
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
    20e2:	fe 01       	movw	r30, r28
    20e4:	e9 53       	subi	r30, 0x39	; 57
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <main+0x1da>
    20f0:	fe 01       	movw	r30, r28
    20f2:	e9 53       	subi	r30, 0x39	; 57
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	de 01       	movw	r26, r28
    20fc:	a7 53       	subi	r26, 0x37	; 55
    20fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2100:	fe 01       	movw	r30, r28
    2102:	e7 53       	subi	r30, 0x37	; 55
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	fe 01       	movw	r30, r28
    2114:	e7 53       	subi	r30, 0x37	; 55
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	d1 f6       	brne	.-76     	; 0x20d4 <main+0x1c2>
    2120:	27 c0       	rjmp	.+78     	; 0x2170 <main+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	8e 01       	movw	r16, r28
    2124:	07 53       	subi	r16, 0x37	; 55
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	fe 01       	movw	r30, r28
    212a:	e5 53       	subi	r30, 0x35	; 53
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	f8 01       	movw	r30, r16
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	de 01       	movw	r26, r28
    2146:	ab 53       	subi	r26, 0x3B	; 59
    2148:	bf 4f       	sbci	r27, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	e7 53       	subi	r30, 0x37	; 55
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	8d 93       	st	X+, r24
    2156:	9c 93       	st	X, r25
    2158:	fe 01       	movw	r30, r28
    215a:	eb 53       	subi	r30, 0x3B	; 59
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <main+0x250>
    2166:	fe 01       	movw	r30, r28
    2168:	eb 53       	subi	r30, 0x3B	; 59
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_moveCursor(1, 0);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>

		for(i=0;i<5;i++)
    2178:	fe 01       	movw	r30, r28
    217a:	ed 52       	subi	r30, 0x2D	; 45
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	10 82       	st	Z, r1
    2180:	cb c0       	rjmp	.+406    	; 0x2318 <main+0x406>
		{array[i]=KEYPAD_getPressedKey();
    2182:	fe 01       	movw	r30, r28
    2184:	ed 52       	subi	r30, 0x2D	; 45
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	08 2f       	mov	r16, r24
    218c:	10 e0       	ldi	r17, 0x00	; 0
    218e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2192:	f8 01       	movw	r30, r16
    2194:	e5 5e       	subi	r30, 0xE5	; 229
    2196:	fe 4f       	sbci	r31, 0xFE	; 254
    2198:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    219a:	8a e2       	ldi	r24, 0x2A	; 42
    219c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
    21a0:	fe 01       	movw	r30, r28
    21a2:	ef 53       	subi	r30, 0x3F	; 63
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	aa ef       	ldi	r26, 0xFA	; 250
    21ac:	b3 e4       	ldi	r27, 0x43	; 67
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	8e 01       	movw	r16, r28
    21b8:	03 54       	subi	r16, 0x43	; 67
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	fe 01       	movw	r30, r28
    21be:	ef 53       	subi	r30, 0x3F	; 63
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	f8 01       	movw	r30, r16
    21dc:	80 83       	st	Z, r24
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	a2 83       	std	Z+2, r26	; 0x02
    21e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 54       	subi	r30, 0x43	; 67
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	44 f4       	brge	.+16     	; 0x2212 <main+0x300>
		__ticks = 1;
    2202:	fe 01       	movw	r30, r28
    2204:	e5 54       	subi	r30, 0x45	; 69
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	64 c0       	rjmp	.+200    	; 0x22da <main+0x3c8>
	else if (__tmp > 65535)
    2212:	fe 01       	movw	r30, r28
    2214:	e3 54       	subi	r30, 0x43	; 67
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	0c f0       	brlt	.+2      	; 0x2232 <main+0x320>
    2230:	43 c0       	rjmp	.+134    	; 0x22b8 <main+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	fe 01       	movw	r30, r28
    2234:	ef 53       	subi	r30, 0x3F	; 63
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8e 01       	movw	r16, r28
    2252:	05 54       	subi	r16, 0x45	; 69
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	1f c0       	rjmp	.+62     	; 0x22a8 <main+0x396>
    226a:	fe 01       	movw	r30, r28
    226c:	e7 54       	subi	r30, 0x47	; 71
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	88 ec       	ldi	r24, 0xC8	; 200
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
    2278:	fe 01       	movw	r30, r28
    227a:	e7 54       	subi	r30, 0x47	; 71
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <main+0x370>
    2286:	fe 01       	movw	r30, r28
    2288:	e7 54       	subi	r30, 0x47	; 71
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	de 01       	movw	r26, r28
    2292:	a5 54       	subi	r26, 0x45	; 69
    2294:	bf 4f       	sbci	r27, 0xFF	; 255
    2296:	fe 01       	movw	r30, r28
    2298:	e5 54       	subi	r30, 0x45	; 69
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	fe 01       	movw	r30, r28
    22aa:	e5 54       	subi	r30, 0x45	; 69
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	d1 f6       	brne	.-76     	; 0x226a <main+0x358>
    22b6:	27 c0       	rjmp	.+78     	; 0x2306 <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	8e 01       	movw	r16, r28
    22ba:	05 54       	subi	r16, 0x45	; 69
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	fe 01       	movw	r30, r28
    22c0:	e3 54       	subi	r30, 0x43	; 67
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	93 81       	ldd	r25, Z+3	; 0x03
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	f8 01       	movw	r30, r16
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	de 01       	movw	r26, r28
    22dc:	a9 54       	subi	r26, 0x49	; 73
    22de:	bf 4f       	sbci	r27, 0xFF	; 255
    22e0:	fe 01       	movw	r30, r28
    22e2:	e5 54       	subi	r30, 0x45	; 69
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	8d 93       	st	X+, r24
    22ec:	9c 93       	st	X, r25
    22ee:	fe 01       	movw	r30, r28
    22f0:	e9 54       	subi	r30, 0x49	; 73
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <main+0x3e6>
    22fc:	fe 01       	movw	r30, r28
    22fe:	e9 54       	subi	r30, 0x49	; 73
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
		/*Get the password from user and send it to the Control_ECU*/
		LCD_displayStringRowColumn(0, 0, "plz enter pass");
		_delay_ms(500);
		LCD_moveCursor(1, 0);

		for(i=0;i<5;i++)
    2306:	de 01       	movw	r26, r28
    2308:	ad 52       	subi	r26, 0x2D	; 45
    230a:	bf 4f       	sbci	r27, 0xFF	; 255
    230c:	fe 01       	movw	r30, r28
    230e:	ed 52       	subi	r30, 0x2D	; 45
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	8c 93       	st	X, r24
    2318:	fe 01       	movw	r30, r28
    231a:	ed 52       	subi	r30, 0x2D	; 45
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	85 30       	cpi	r24, 0x05	; 5
    2322:	08 f4       	brcc	.+2      	; 0x2326 <main+0x414>
    2324:	2e cf       	rjmp	.-420    	; 0x2182 <main+0x270>
		{array[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
		}

		while(KEYPAD_getPressedKey()!='+');
    2326:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    232a:	8b 32       	cpi	r24, 0x2B	; 43
    232c:	e1 f7       	brne	.-8      	; 0x2326 <main+0x414>

		if(KEYPAD_getPressedKey()=='+')//+ is enter key
    232e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2332:	8b 32       	cpi	r24, 0x2B	; 43
    2334:	11 f4       	brne	.+4      	; 0x233a <main+0x428>

			LCD_clearScreen();
    2336:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

		//re-enter the pass to check
		LCD_displayString("plz re-enter the");
    233a:	8f e6       	ldi	r24, 0x6F	; 111
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
		LCD_moveCursor(1, 0);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>
		LCD_displayString("same pass");
    234a:	80 e8       	ldi	r24, 0x80	; 128
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
    2352:	fe 01       	movw	r30, r28
    2354:	ed 54       	subi	r30, 0x4D	; 77
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	aa e7       	ldi	r26, 0x7A	; 122
    235e:	b4 e4       	ldi	r27, 0x44	; 68
    2360:	80 83       	st	Z, r24
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	a2 83       	std	Z+2, r26	; 0x02
    2366:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	8e 01       	movw	r16, r28
    236a:	01 55       	subi	r16, 0x51	; 81
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	fe 01       	movw	r30, r28
    2370:	ed 54       	subi	r30, 0x4D	; 77
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	f8 01       	movw	r30, r16
    238e:	80 83       	st	Z, r24
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	a2 83       	std	Z+2, r26	; 0x02
    2394:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2396:	fe 01       	movw	r30, r28
    2398:	e1 55       	subi	r30, 0x51	; 81
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	44 f4       	brge	.+16     	; 0x23c4 <main+0x4b2>
		__ticks = 1;
    23b4:	fe 01       	movw	r30, r28
    23b6:	e3 55       	subi	r30, 0x53	; 83
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	80 83       	st	Z, r24
    23c2:	64 c0       	rjmp	.+200    	; 0x248c <main+0x57a>
	else if (__tmp > 65535)
    23c4:	fe 01       	movw	r30, r28
    23c6:	e1 55       	subi	r30, 0x51	; 81
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	4f e7       	ldi	r20, 0x7F	; 127
    23d8:	57 e4       	ldi	r21, 0x47	; 71
    23da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23de:	18 16       	cp	r1, r24
    23e0:	0c f0       	brlt	.+2      	; 0x23e4 <main+0x4d2>
    23e2:	43 c0       	rjmp	.+134    	; 0x246a <main+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	fe 01       	movw	r30, r28
    23e6:	ed 54       	subi	r30, 0x4D	; 77
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8e 01       	movw	r16, r28
    2404:	03 55       	subi	r16, 0x53	; 83
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	f8 01       	movw	r30, r16
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    241a:	1f c0       	rjmp	.+62     	; 0x245a <main+0x548>
    241c:	fe 01       	movw	r30, r28
    241e:	e5 55       	subi	r30, 0x55	; 85
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	88 ec       	ldi	r24, 0xC8	; 200
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
    242a:	fe 01       	movw	r30, r28
    242c:	e5 55       	subi	r30, 0x55	; 85
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <main+0x522>
    2438:	fe 01       	movw	r30, r28
    243a:	e5 55       	subi	r30, 0x55	; 85
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	de 01       	movw	r26, r28
    2444:	a3 55       	subi	r26, 0x53	; 83
    2446:	bf 4f       	sbci	r27, 0xFF	; 255
    2448:	fe 01       	movw	r30, r28
    244a:	e3 55       	subi	r30, 0x53	; 83
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	11 96       	adiw	r26, 0x01	; 1
    2456:	9c 93       	st	X, r25
    2458:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	fe 01       	movw	r30, r28
    245c:	e3 55       	subi	r30, 0x53	; 83
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	d1 f6       	brne	.-76     	; 0x241c <main+0x50a>
    2468:	28 c0       	rjmp	.+80     	; 0x24ba <main+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	8e 01       	movw	r16, r28
    246c:	03 55       	subi	r16, 0x53	; 83
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	fe 01       	movw	r30, r28
    2472:	e1 55       	subi	r30, 0x51	; 81
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	f8 01       	movw	r30, r16
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	de 01       	movw	r26, r28
    248e:	a7 55       	subi	r26, 0x57	; 87
    2490:	bf 4f       	sbci	r27, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	e3 55       	subi	r30, 0x53	; 83
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	91 81       	ldd	r25, Z+1	; 0x01
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 55       	subi	r30, 0x57	; 87
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <main+0x59a>
    24b0:	fe 01       	movw	r30, r28
    24b2:	e7 55       	subi	r30, 0x57	; 87
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
		_delay_ms(1000);

		for(i=0;i<5;i++)
    24ba:	fe 01       	movw	r30, r28
    24bc:	ed 52       	subi	r30, 0x2D	; 45
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	10 82       	st	Z, r1
    24c2:	d2 c0       	rjmp	.+420    	; 0x2668 <main+0x756>
		{
			LCD_moveCursor(2, i);
    24c4:	fe 01       	movw	r30, r28
    24c6:	ed 52       	subi	r30, 0x2D	; 45
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	60 81       	ld	r22, Z
    24ce:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>
			re_enter[i]=KEYPAD_getPressedKey();
    24d2:	fe 01       	movw	r30, r28
    24d4:	ed 52       	subi	r30, 0x2D	; 45
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	08 2f       	mov	r16, r24
    24dc:	10 e0       	ldi	r17, 0x00	; 0
    24de:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    24e2:	f8 01       	movw	r30, r16
    24e4:	e0 5e       	subi	r30, 0xE0	; 224
    24e6:	fe 4f       	sbci	r31, 0xFE	; 254
    24e8:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    24ea:	8a e2       	ldi	r24, 0x2A	; 42
    24ec:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
    24f0:	fe 01       	movw	r30, r28
    24f2:	eb 55       	subi	r30, 0x5B	; 91
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	aa ef       	ldi	r26, 0xFA	; 250
    24fc:	b3 e4       	ldi	r27, 0x43	; 67
    24fe:	80 83       	st	Z, r24
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	a2 83       	std	Z+2, r26	; 0x02
    2504:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	8e 01       	movw	r16, r28
    2508:	0f 55       	subi	r16, 0x5F	; 95
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	eb 55       	subi	r30, 0x5B	; 91
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a ef       	ldi	r20, 0xFA	; 250
    2520:	54 e4       	ldi	r21, 0x44	; 68
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	80 83       	st	Z, r24
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	a2 83       	std	Z+2, r26	; 0x02
    2532:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2534:	fe 01       	movw	r30, r28
    2536:	ef 55       	subi	r30, 0x5F	; 95
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	44 f4       	brge	.+16     	; 0x2562 <main+0x650>
		__ticks = 1;
    2552:	fe 01       	movw	r30, r28
    2554:	e1 56       	subi	r30, 0x61	; 97
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
    2560:	64 c0       	rjmp	.+200    	; 0x262a <main+0x718>
	else if (__tmp > 65535)
    2562:	fe 01       	movw	r30, r28
    2564:	ef 55       	subi	r30, 0x5F	; 95
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	0c f0       	brlt	.+2      	; 0x2582 <main+0x670>
    2580:	43 c0       	rjmp	.+134    	; 0x2608 <main+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	fe 01       	movw	r30, r28
    2584:	eb 55       	subi	r30, 0x5B	; 91
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8e 01       	movw	r16, r28
    25a2:	01 56       	subi	r16, 0x61	; 97
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    25b8:	1f c0       	rjmp	.+62     	; 0x25f8 <main+0x6e6>
    25ba:	fe 01       	movw	r30, r28
    25bc:	e3 56       	subi	r30, 0x63	; 99
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	88 ec       	ldi	r24, 0xC8	; 200
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    25c8:	fe 01       	movw	r30, r28
    25ca:	e3 56       	subi	r30, 0x63	; 99
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <main+0x6c0>
    25d6:	fe 01       	movw	r30, r28
    25d8:	e3 56       	subi	r30, 0x63	; 99
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e0:	de 01       	movw	r26, r28
    25e2:	a1 56       	subi	r26, 0x61	; 97
    25e4:	bf 4f       	sbci	r27, 0xFF	; 255
    25e6:	fe 01       	movw	r30, r28
    25e8:	e1 56       	subi	r30, 0x61	; 97
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	11 96       	adiw	r26, 0x01	; 1
    25f4:	9c 93       	st	X, r25
    25f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	fe 01       	movw	r30, r28
    25fa:	e1 56       	subi	r30, 0x61	; 97
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	d1 f6       	brne	.-76     	; 0x25ba <main+0x6a8>
    2606:	27 c0       	rjmp	.+78     	; 0x2656 <main+0x744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	8e 01       	movw	r16, r28
    260a:	01 56       	subi	r16, 0x61	; 97
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	fe 01       	movw	r30, r28
    2610:	ef 55       	subi	r30, 0x5F	; 95
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	f8 01       	movw	r30, r16
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
    262a:	de 01       	movw	r26, r28
    262c:	a5 56       	subi	r26, 0x65	; 101
    262e:	bf 4f       	sbci	r27, 0xFF	; 255
    2630:	fe 01       	movw	r30, r28
    2632:	e1 56       	subi	r30, 0x61	; 97
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	8d 93       	st	X+, r24
    263c:	9c 93       	st	X, r25
    263e:	fe 01       	movw	r30, r28
    2640:	e5 56       	subi	r30, 0x65	; 101
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <main+0x736>
    264c:	fe 01       	movw	r30, r28
    264e:	e5 56       	subi	r30, 0x65	; 101
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
		LCD_displayString("plz re-enter the");
		LCD_moveCursor(1, 0);
		LCD_displayString("same pass");
		_delay_ms(1000);

		for(i=0;i<5;i++)
    2656:	de 01       	movw	r26, r28
    2658:	ad 52       	subi	r26, 0x2D	; 45
    265a:	bf 4f       	sbci	r27, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	ed 52       	subi	r30, 0x2D	; 45
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	8c 93       	st	X, r24
    2668:	fe 01       	movw	r30, r28
    266a:	ed 52       	subi	r30, 0x2D	; 45
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	85 30       	cpi	r24, 0x05	; 5
    2672:	08 f4       	brcc	.+2      	; 0x2676 <main+0x764>
    2674:	27 cf       	rjmp	.-434    	; 0x24c4 <main+0x5b2>
			re_enter[i]=KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}

		while(KEYPAD_getPressedKey()!='+');
    2676:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    267a:	8b 32       	cpi	r24, 0x2B	; 43
    267c:	e1 f7       	brne	.-8      	; 0x2676 <main+0x764>

		LCD_clearScreen();
    267e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

		for(i=0;i<5;i++)
    2682:	fe 01       	movw	r30, r28
    2684:	ed 52       	subi	r30, 0x2D	; 45
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	10 82       	st	Z, r1
    268a:	15 c0       	rjmp	.+42     	; 0x26b6 <main+0x7a4>
			UART_sendByte(array[i]);
    268c:	fe 01       	movw	r30, r28
    268e:	ed 52       	subi	r30, 0x2D	; 45
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	fc 01       	movw	r30, r24
    269a:	e5 5e       	subi	r30, 0xE5	; 229
    269c:	fe 4f       	sbci	r31, 0xFE	; 254
    269e:	80 81       	ld	r24, Z
    26a0:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>

		while(KEYPAD_getPressedKey()!='+');

		LCD_clearScreen();

		for(i=0;i<5;i++)
    26a4:	de 01       	movw	r26, r28
    26a6:	ad 52       	subi	r26, 0x2D	; 45
    26a8:	bf 4f       	sbci	r27, 0xFF	; 255
    26aa:	fe 01       	movw	r30, r28
    26ac:	ed 52       	subi	r30, 0x2D	; 45
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 81       	ld	r24, Z
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	8c 93       	st	X, r24
    26b6:	fe 01       	movw	r30, r28
    26b8:	ed 52       	subi	r30, 0x2D	; 45
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	85 30       	cpi	r24, 0x05	; 5
    26c0:	28 f3       	brcs	.-54     	; 0x268c <main+0x77a>
			UART_sendByte(array[i]);

		for(i=0;i<5;i++)
    26c2:	fe 01       	movw	r30, r28
    26c4:	ed 52       	subi	r30, 0x2D	; 45
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	10 82       	st	Z, r1
    26ca:	15 c0       	rjmp	.+42     	; 0x26f6 <main+0x7e4>
			UART_sendByte(re_enter[i]);
    26cc:	fe 01       	movw	r30, r28
    26ce:	ed 52       	subi	r30, 0x2D	; 45
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	fc 01       	movw	r30, r24
    26da:	e0 5e       	subi	r30, 0xE0	; 224
    26dc:	fe 4f       	sbci	r31, 0xFE	; 254
    26de:	80 81       	ld	r24, Z
    26e0:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
		LCD_clearScreen();

		for(i=0;i<5;i++)
			UART_sendByte(array[i]);

		for(i=0;i<5;i++)
    26e4:	de 01       	movw	r26, r28
    26e6:	ad 52       	subi	r26, 0x2D	; 45
    26e8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	ed 52       	subi	r30, 0x2D	; 45
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	8c 93       	st	X, r24
    26f6:	fe 01       	movw	r30, r28
    26f8:	ed 52       	subi	r30, 0x2D	; 45
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	85 30       	cpi	r24, 0x05	; 5
    2700:	28 f3       	brcs	.-54     	; 0x26cc <main+0x7ba>
			UART_sendByte(re_enter[i]);

		/*Check if the entering password and the re-entering password are the same*/
		check_bit1 =UART_receiveByte();
    2702:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <UART_receiveByte>
    2706:	80 93 0d 01 	sts	0x010D, r24

		LCD_clearScreen();
    270a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

	}

	while(check_bit1 == unmatched);
    270e:	80 91 0d 01 	lds	r24, 0x010D
    2712:	88 23       	and	r24, r24
    2714:	09 f4       	brne	.+2      	; 0x2718 <main+0x806>
    2716:	6f cc       	rjmp	.-1826   	; 0x1ff6 <main+0xe4>

//**************************************second system**********************************************

while(1)
{
	check_bit2=matched;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 93 10 01 	sts	0x0110, r24
false_attempts=0;
    271e:	10 92 0e 01 	sts	0x010E, r1
    2722:	fe 01       	movw	r30, r28
    2724:	e9 56       	subi	r30, 0x69	; 105
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	aa ef       	ldi	r26, 0xFA	; 250
    272e:	b3 e4       	ldi	r27, 0x43	; 67
    2730:	80 83       	st	Z, r24
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	a2 83       	std	Z+2, r26	; 0x02
    2736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2738:	8e 01       	movw	r16, r28
    273a:	0d 56       	subi	r16, 0x6D	; 109
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	fe 01       	movw	r30, r28
    2740:	e9 56       	subi	r30, 0x69	; 105
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a ef       	ldi	r20, 0xFA	; 250
    2752:	54 e4       	ldi	r21, 0x44	; 68
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	f8 01       	movw	r30, r16
    275e:	80 83       	st	Z, r24
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	a2 83       	std	Z+2, r26	; 0x02
    2764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2766:	fe 01       	movw	r30, r28
    2768:	ed 56       	subi	r30, 0x6D	; 109
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	44 f4       	brge	.+16     	; 0x2794 <main+0x882>
		__ticks = 1;
    2784:	fe 01       	movw	r30, r28
    2786:	ef 56       	subi	r30, 0x6F	; 111
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
    2792:	64 c0       	rjmp	.+200    	; 0x285c <main+0x94a>
	else if (__tmp > 65535)
    2794:	fe 01       	movw	r30, r28
    2796:	ed 56       	subi	r30, 0x6D	; 109
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	0c f0       	brlt	.+2      	; 0x27b4 <main+0x8a2>
    27b2:	43 c0       	rjmp	.+134    	; 0x283a <main+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	fe 01       	movw	r30, r28
    27b6:	e9 56       	subi	r30, 0x69	; 105
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	60 81       	ld	r22, Z
    27bc:	71 81       	ldd	r23, Z+1	; 0x01
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8e 01       	movw	r16, r28
    27d4:	0f 56       	subi	r16, 0x6F	; 111
    27d6:	1f 4f       	sbci	r17, 0xFF	; 255
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	f8 01       	movw	r30, r16
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	1f c0       	rjmp	.+62     	; 0x282a <main+0x918>
    27ec:	fe 01       	movw	r30, r28
    27ee:	e1 57       	subi	r30, 0x71	; 113
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	88 ec       	ldi	r24, 0xC8	; 200
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	80 83       	st	Z, r24
    27fa:	fe 01       	movw	r30, r28
    27fc:	e1 57       	subi	r30, 0x71	; 113
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <main+0x8f2>
    2808:	fe 01       	movw	r30, r28
    280a:	e1 57       	subi	r30, 0x71	; 113
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	de 01       	movw	r26, r28
    2814:	af 56       	subi	r26, 0x6F	; 111
    2816:	bf 4f       	sbci	r27, 0xFF	; 255
    2818:	fe 01       	movw	r30, r28
    281a:	ef 56       	subi	r30, 0x6F	; 111
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	11 96       	adiw	r26, 0x01	; 1
    2826:	9c 93       	st	X, r25
    2828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	fe 01       	movw	r30, r28
    282c:	ef 56       	subi	r30, 0x6F	; 111
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	91 81       	ldd	r25, Z+1	; 0x01
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	d1 f6       	brne	.-76     	; 0x27ec <main+0x8da>
    2838:	27 c0       	rjmp	.+78     	; 0x2888 <main+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	8e 01       	movw	r16, r28
    283c:	0f 56       	subi	r16, 0x6F	; 111
    283e:	1f 4f       	sbci	r17, 0xFF	; 255
    2840:	fe 01       	movw	r30, r28
    2842:	ed 56       	subi	r30, 0x6D	; 109
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	f8 01       	movw	r30, r16
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	80 83       	st	Z, r24
    285c:	de 01       	movw	r26, r28
    285e:	a3 57       	subi	r26, 0x73	; 115
    2860:	bf 4f       	sbci	r27, 0xFF	; 255
    2862:	fe 01       	movw	r30, r28
    2864:	ef 56       	subi	r30, 0x6F	; 111
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	91 81       	ldd	r25, Z+1	; 0x01
    286c:	8d 93       	st	X+, r24
    286e:	9c 93       	st	X, r25
    2870:	fe 01       	movw	r30, r28
    2872:	e3 57       	subi	r30, 0x73	; 115
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <main+0x968>
    287e:	fe 01       	movw	r30, r28
    2880:	e3 57       	subi	r30, 0x73	; 115
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
_delay_ms(500);
//display main options of the LCD
LCD_displayString("+:open door");
    2888:	8a e8       	ldi	r24, 0x8A	; 138
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
LCD_moveCursor(1, 0);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>
LCD_displayString("-:change pass");
    2898:	86 e9       	ldi	r24, 0x96	; 150
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
while(!(KEYPAD_getPressedKey()=='+'||KEYPAD_getPressedKey()=='-'));
    28a0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    28a4:	8b 32       	cpi	r24, 0x2B	; 43
    28a6:	21 f0       	breq	.+8      	; 0x28b0 <main+0x99e>
    28a8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    28ac:	8d 32       	cpi	r24, 0x2D	; 45
    28ae:	c1 f7       	brne	.-16     	; 0x28a0 <main+0x98e>

//get the option from the user
option=KEYPAD_getPressedKey();
    28b0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    28b4:	80 93 0f 01 	sts	0x010F, r24

switch(option)
    28b8:	80 91 0f 01 	lds	r24, 0x010F
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	c5 52       	subi	r28, 0x25	; 37
    28c2:	df 4f       	sbci	r29, 0xFF	; 255
    28c4:	39 83       	std	Y+1, r19	; 0x01
    28c6:	28 83       	st	Y, r18
    28c8:	cb 5d       	subi	r28, 0xDB	; 219
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	c5 52       	subi	r28, 0x25	; 37
    28ce:	df 4f       	sbci	r29, 0xFF	; 255
    28d0:	88 81       	ld	r24, Y
    28d2:	99 81       	ldd	r25, Y+1	; 0x01
    28d4:	cb 5d       	subi	r28, 0xDB	; 219
    28d6:	d0 40       	sbci	r29, 0x00	; 0
    28d8:	8b 32       	cpi	r24, 0x2B	; 43
    28da:	91 05       	cpc	r25, r1
    28dc:	59 f0       	breq	.+22     	; 0x28f4 <main+0x9e2>
    28de:	c5 52       	subi	r28, 0x25	; 37
    28e0:	df 4f       	sbci	r29, 0xFF	; 255
    28e2:	e8 81       	ld	r30, Y
    28e4:	f9 81       	ldd	r31, Y+1	; 0x01
    28e6:	cb 5d       	subi	r28, 0xDB	; 219
    28e8:	d0 40       	sbci	r29, 0x00	; 0
    28ea:	ed 32       	cpi	r30, 0x2D	; 45
    28ec:	f1 05       	cpc	r31, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <main+0x9e0>
    28f0:	13 c3       	rjmp	.+1574   	; 0x2f18 <main+0x1006>
    28f2:	12 cf       	rjmp	.-476    	; 0x2718 <main+0x806>
//in case the user chose to open the door
case'+':

	do{
		//send option to the other mc
		UART_sendByte(option);
    28f4:	80 91 0f 01 	lds	r24, 0x010F
    28f8:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
		LCD_clearScreen();
    28fc:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    2900:	fe 01       	movw	r30, r28
    2902:	e7 57       	subi	r30, 0x77	; 119
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	aa ef       	ldi	r26, 0xFA	; 250
    290c:	b3 e4       	ldi	r27, 0x43	; 67
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2916:	8e 01       	movw	r16, r28
    2918:	0b 57       	subi	r16, 0x7B	; 123
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	fe 01       	movw	r30, r28
    291e:	e7 57       	subi	r30, 0x77	; 119
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4a ef       	ldi	r20, 0xFA	; 250
    2930:	54 e4       	ldi	r21, 0x44	; 68
    2932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	f8 01       	movw	r30, r16
    293c:	80 83       	st	Z, r24
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	a2 83       	std	Z+2, r26	; 0x02
    2942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2944:	fe 01       	movw	r30, r28
    2946:	eb 57       	subi	r30, 0x7B	; 123
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	44 f4       	brge	.+16     	; 0x2972 <main+0xa60>
		__ticks = 1;
    2962:	fe 01       	movw	r30, r28
    2964:	ed 57       	subi	r30, 0x7D	; 125
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
    2970:	64 c0       	rjmp	.+200    	; 0x2a3a <main+0xb28>
	else if (__tmp > 65535)
    2972:	fe 01       	movw	r30, r28
    2974:	eb 57       	subi	r30, 0x7B	; 123
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	3f ef       	ldi	r19, 0xFF	; 255
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	57 e4       	ldi	r21, 0x47	; 71
    2988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	0c f0       	brlt	.+2      	; 0x2992 <main+0xa80>
    2990:	43 c0       	rjmp	.+134    	; 0x2a18 <main+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	fe 01       	movw	r30, r28
    2994:	e7 57       	subi	r30, 0x77	; 119
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8e 01       	movw	r16, r28
    29b2:	0d 57       	subi	r16, 0x7D	; 125
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	f8 01       	movw	r30, r16
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
    29c8:	1f c0       	rjmp	.+62     	; 0x2a08 <main+0xaf6>
    29ca:	fe 01       	movw	r30, r28
    29cc:	ef 57       	subi	r30, 0x7F	; 127
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	88 ec       	ldi	r24, 0xC8	; 200
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
    29d8:	fe 01       	movw	r30, r28
    29da:	ef 57       	subi	r30, 0x7F	; 127
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <main+0xad0>
    29e6:	fe 01       	movw	r30, r28
    29e8:	ef 57       	subi	r30, 0x7F	; 127
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	de 01       	movw	r26, r28
    29f2:	ad 57       	subi	r26, 0x7D	; 125
    29f4:	bf 4f       	sbci	r27, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	ed 57       	subi	r30, 0x7D	; 125
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	11 96       	adiw	r26, 0x01	; 1
    2a04:	9c 93       	st	X, r25
    2a06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ed 57       	subi	r30, 0x7D	; 125
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	d1 f6       	brne	.-76     	; 0x29ca <main+0xab8>
    2a16:	27 c0       	rjmp	.+78     	; 0x2a66 <main+0xb54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	8e 01       	movw	r16, r28
    2a1a:	0d 57       	subi	r16, 0x7D	; 125
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	fe 01       	movw	r30, r28
    2a20:	eb 57       	subi	r30, 0x7B	; 123
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	60 81       	ld	r22, Z
    2a26:	71 81       	ldd	r23, Z+1	; 0x01
    2a28:	82 81       	ldd	r24, Z+2	; 0x02
    2a2a:	93 81       	ldd	r25, Z+3	; 0x03
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	de 01       	movw	r26, r28
    2a3c:	a1 58       	subi	r26, 0x81	; 129
    2a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a40:	fe 01       	movw	r30, r28
    2a42:	ed 57       	subi	r30, 0x7D	; 125
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	8d 93       	st	X+, r24
    2a4c:	9c 93       	st	X, r25
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e1 58       	subi	r30, 0x81	; 129
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <main+0xb46>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e1 58       	subi	r30, 0x81	; 129
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
		_delay_ms(500);

		//ask the user to enter the password
		LCD_displayString("plz enter pass:");
    2a66:	84 ea       	ldi	r24, 0xA4	; 164
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
		LCD_moveCursor(1, 0);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>

		for(i=0;i<5;i++)
    2a76:	fe 01       	movw	r30, r28
    2a78:	ed 52       	subi	r30, 0x2D	; 45
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	10 82       	st	Z, r1
    2a7e:	cb c0       	rjmp	.+406    	; 0x2c16 <main+0xd04>
		{check[i]=KEYPAD_getPressedKey();
    2a80:	fe 01       	movw	r30, r28
    2a82:	ed 52       	subi	r30, 0x2D	; 45
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	08 2f       	mov	r16, r24
    2a8a:	10 e0       	ldi	r17, 0x00	; 0
    2a8c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2a90:	f8 01       	movw	r30, r16
    2a92:	ea 5e       	subi	r30, 0xEA	; 234
    2a94:	fe 4f       	sbci	r31, 0xFE	; 254
    2a96:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2a98:	8a e2       	ldi	r24, 0x2A	; 42
    2a9a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e5 58       	subi	r30, 0x85	; 133
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	aa ef       	ldi	r26, 0xFA	; 250
    2aaa:	b3 e4       	ldi	r27, 0x43	; 67
    2aac:	80 83       	st	Z, r24
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	a2 83       	std	Z+2, r26	; 0x02
    2ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	09 58       	subi	r16, 0x89	; 137
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	e5 58       	subi	r30, 0x85	; 133
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	60 81       	ld	r22, Z
    2ac2:	71 81       	ldd	r23, Z+1	; 0x01
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	4a ef       	ldi	r20, 0xFA	; 250
    2ace:	54 e4       	ldi	r21, 0x44	; 68
    2ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	f8 01       	movw	r30, r16
    2ada:	80 83       	st	Z, r24
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	a2 83       	std	Z+2, r26	; 0x02
    2ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e9 58       	subi	r30, 0x89	; 137
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e8       	ldi	r20, 0x80	; 128
    2af6:	5f e3       	ldi	r21, 0x3F	; 63
    2af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2afc:	88 23       	and	r24, r24
    2afe:	44 f4       	brge	.+16     	; 0x2b10 <main+0xbfe>
		__ticks = 1;
    2b00:	fe 01       	movw	r30, r28
    2b02:	eb 58       	subi	r30, 0x8B	; 139
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	80 83       	st	Z, r24
    2b0e:	64 c0       	rjmp	.+200    	; 0x2bd8 <main+0xcc6>
	else if (__tmp > 65535)
    2b10:	fe 01       	movw	r30, r28
    2b12:	e9 58       	subi	r30, 0x89	; 137
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	0c f0       	brlt	.+2      	; 0x2b30 <main+0xc1e>
    2b2e:	43 c0       	rjmp	.+134    	; 0x2bb6 <main+0xca4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	fe 01       	movw	r30, r28
    2b32:	e5 58       	subi	r30, 0x85	; 133
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8e 01       	movw	r16, r28
    2b50:	0b 58       	subi	r16, 0x8B	; 139
    2b52:	1f 4f       	sbci	r17, 0xFF	; 255
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	f8 01       	movw	r30, r16
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
    2b66:	1f c0       	rjmp	.+62     	; 0x2ba6 <main+0xc94>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ed 58       	subi	r30, 0x8D	; 141
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	88 ec       	ldi	r24, 0xC8	; 200
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
    2b76:	fe 01       	movw	r30, r28
    2b78:	ed 58       	subi	r30, 0x8D	; 141
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <main+0xc6e>
    2b84:	fe 01       	movw	r30, r28
    2b86:	ed 58       	subi	r30, 0x8D	; 141
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	de 01       	movw	r26, r28
    2b90:	ab 58       	subi	r26, 0x8B	; 139
    2b92:	bf 4f       	sbci	r27, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	eb 58       	subi	r30, 0x8B	; 139
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	9c 93       	st	X, r25
    2ba4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	eb 58       	subi	r30, 0x8B	; 139
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	d1 f6       	brne	.-76     	; 0x2b68 <main+0xc56>
    2bb4:	27 c0       	rjmp	.+78     	; 0x2c04 <main+0xcf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb6:	8e 01       	movw	r16, r28
    2bb8:	0b 58       	subi	r16, 0x8B	; 139
    2bba:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 58       	subi	r30, 0x89	; 137
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	60 81       	ld	r22, Z
    2bc4:	71 81       	ldd	r23, Z+1	; 0x01
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	f8 01       	movw	r30, r16
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
    2bd8:	de 01       	movw	r26, r28
    2bda:	af 58       	subi	r26, 0x8F	; 143
    2bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 58       	subi	r30, 0x8B	; 139
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	8d 93       	st	X+, r24
    2bea:	9c 93       	st	X, r25
    2bec:	fe 01       	movw	r30, r28
    2bee:	ef 58       	subi	r30, 0x8F	; 143
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <main+0xce4>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ef 58       	subi	r30, 0x8F	; 143
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	80 83       	st	Z, r24

		//ask the user to enter the password
		LCD_displayString("plz enter pass:");
		LCD_moveCursor(1, 0);

		for(i=0;i<5;i++)
    2c04:	de 01       	movw	r26, r28
    2c06:	ad 52       	subi	r26, 0x2D	; 45
    2c08:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ed 52       	subi	r30, 0x2D	; 45
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	8f 5f       	subi	r24, 0xFF	; 255
    2c14:	8c 93       	st	X, r24
    2c16:	fe 01       	movw	r30, r28
    2c18:	ed 52       	subi	r30, 0x2D	; 45
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	85 30       	cpi	r24, 0x05	; 5
    2c20:	08 f4       	brcc	.+2      	; 0x2c24 <main+0xd12>
    2c22:	2e cf       	rjmp	.-420    	; 0x2a80 <main+0xb6e>
		{check[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);}
//wait until the user press on the enter key
		while(KEYPAD_getPressedKey()!='+');
    2c24:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2c28:	8b 32       	cpi	r24, 0x2B	; 43
    2c2a:	e1 f7       	brne	.-8      	; 0x2c24 <main+0xd12>
		LCD_clearScreen();
    2c2c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    2c30:	fe 01       	movw	r30, r28
    2c32:	e3 59       	subi	r30, 0x93	; 147
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	aa ef       	ldi	r26, 0xFA	; 250
    2c3c:	b3 e4       	ldi	r27, 0x43	; 67
    2c3e:	80 83       	st	Z, r24
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	a2 83       	std	Z+2, r26	; 0x02
    2c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	8e 01       	movw	r16, r28
    2c48:	07 59       	subi	r16, 0x97	; 151
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e3 59       	subi	r30, 0x93	; 147
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a ef       	ldi	r20, 0xFA	; 250
    2c60:	54 e4       	ldi	r21, 0x44	; 68
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	80 83       	st	Z, r24
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	a2 83       	std	Z+2, r26	; 0x02
    2c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c74:	fe 01       	movw	r30, r28
    2c76:	e7 59       	subi	r30, 0x97	; 151
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	44 f4       	brge	.+16     	; 0x2ca2 <main+0xd90>
		__ticks = 1;
    2c92:	fe 01       	movw	r30, r28
    2c94:	e9 59       	subi	r30, 0x99	; 153
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	64 c0       	rjmp	.+200    	; 0x2d6a <main+0xe58>
	else if (__tmp > 65535)
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e7 59       	subi	r30, 0x97	; 151
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	0c f0       	brlt	.+2      	; 0x2cc2 <main+0xdb0>
    2cc0:	43 c0       	rjmp	.+134    	; 0x2d48 <main+0xe36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 59       	subi	r30, 0x93	; 147
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8e 01       	movw	r16, r28
    2ce2:	09 59       	subi	r16, 0x99	; 153
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	80 83       	st	Z, r24
    2cf8:	1f c0       	rjmp	.+62     	; 0x2d38 <main+0xe26>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	eb 59       	subi	r30, 0x9B	; 155
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	88 ec       	ldi	r24, 0xC8	; 200
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	fe 01       	movw	r30, r28
    2d0a:	eb 59       	subi	r30, 0x9B	; 155
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <main+0xe00>
    2d16:	fe 01       	movw	r30, r28
    2d18:	eb 59       	subi	r30, 0x9B	; 155
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	de 01       	movw	r26, r28
    2d22:	a9 59       	subi	r26, 0x99	; 153
    2d24:	bf 4f       	sbci	r27, 0xFF	; 255
    2d26:	fe 01       	movw	r30, r28
    2d28:	e9 59       	subi	r30, 0x99	; 153
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	11 96       	adiw	r26, 0x01	; 1
    2d34:	9c 93       	st	X, r25
    2d36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e9 59       	subi	r30, 0x99	; 153
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	d1 f6       	brne	.-76     	; 0x2cfa <main+0xde8>
    2d46:	28 c0       	rjmp	.+80     	; 0x2d98 <main+0xe86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	8e 01       	movw	r16, r28
    2d4a:	09 59       	subi	r16, 0x99	; 153
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e7 59       	subi	r30, 0x97	; 151
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	f8 01       	movw	r30, r16
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
    2d6a:	de 01       	movw	r26, r28
    2d6c:	ad 59       	subi	r26, 0x9D	; 157
    2d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d70:	fe 01       	movw	r30, r28
    2d72:	e9 59       	subi	r30, 0x99	; 153
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	11 96       	adiw	r26, 0x01	; 1
    2d7c:	9c 93       	st	X, r25
    2d7e:	8e 93       	st	-X, r24
    2d80:	fe 01       	movw	r30, r28
    2d82:	ed 59       	subi	r30, 0x9D	; 157
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <main+0xe78>
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ed 59       	subi	r30, 0x9D	; 157
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
		_delay_ms(500);

		//send the password to the other mc
		for(i=0;i<5;i++)
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ed 52       	subi	r30, 0x2D	; 45
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	10 82       	st	Z, r1
    2da0:	15 c0       	rjmp	.+42     	; 0x2dcc <main+0xeba>
			UART_sendByte(check[i]);
    2da2:	fe 01       	movw	r30, r28
    2da4:	ed 52       	subi	r30, 0x2D	; 45
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 81       	ld	r24, Z
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	fc 01       	movw	r30, r24
    2db0:	ea 5e       	subi	r30, 0xEA	; 234
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	80 81       	ld	r24, Z
    2db6:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
		while(KEYPAD_getPressedKey()!='+');
		LCD_clearScreen();
		_delay_ms(500);

		//send the password to the other mc
		for(i=0;i<5;i++)
    2dba:	de 01       	movw	r26, r28
    2dbc:	ad 52       	subi	r26, 0x2D	; 45
    2dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ed 52       	subi	r30, 0x2D	; 45
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	8c 93       	st	X, r24
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 52       	subi	r30, 0x2D	; 45
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	85 30       	cpi	r24, 0x05	; 5
    2dd6:	28 f3       	brcs	.-54     	; 0x2da2 <main+0xe90>
			UART_sendByte(check[i]);

		//check if the entered password is matched with the password of the system
		check_bit2=UART_receiveByte();
    2dd8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <UART_receiveByte>
    2ddc:	80 93 10 01 	sts	0x0110, r24

		if(check_bit2==matched)
    2de0:	80 91 10 01 	lds	r24, 0x0110
    2de4:	81 30       	cpi	r24, 0x01	; 1
    2de6:	09 f0       	breq	.+2      	; 0x2dea <main+0xed8>
    2de8:	5f c0       	rjmp	.+190    	; 0x2ea8 <main+0xf96>
			{false_attempts=0;
    2dea:	10 92 0e 01 	sts	0x010E, r1

	//display a message on the screen "door is unlocking" for 15 seconds
		LCD_displayString("door is unlocking");
    2dee:	84 eb       	ldi	r24, 0xB4	; 180
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>

		//calculate 8.4 sec
		Timer1_init(&Config_Ptr_time1);
    2df6:	84 ee       	ldi	r24, 0xE4	; 228
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
		TIMER1_setCallBack(time);
    2dfe:	8d e7       	ldi	r24, 0x7D	; 125
    2e00:	9f e0       	ldi	r25, 0x0F	; 15
    2e02:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
		while(tick < 1);
    2e06:	80 91 11 01 	lds	r24, 0x0111
    2e0a:	88 23       	and	r24, r24
    2e0c:	e1 f3       	breq	.-8      	; 0x2e06 <main+0xef4>
		tick = 0;
    2e0e:	10 92 11 01 	sts	0x0111, r1
		Timer1_deInit();
    2e12:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>

		//calculate 6.6 sec so the total seconds calculated = 6.6+8.4=15sec
		Timer1_init(&Config_Ptr_time2);
    2e16:	8c ee       	ldi	r24, 0xEC	; 236
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
		TIMER1_setCallBack(time);
    2e1e:	8d e7       	ldi	r24, 0x7D	; 125
    2e20:	9f e0       	ldi	r25, 0x0F	; 15
    2e22:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
		while(tick < 1);
    2e26:	80 91 11 01 	lds	r24, 0x0111
    2e2a:	88 23       	and	r24, r24
    2e2c:	e1 f3       	breq	.-8      	; 0x2e26 <main+0xf14>
		tick = 0;
    2e2e:	10 92 11 01 	sts	0x0111, r1
		Timer1_deInit();
    2e32:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>

		LCD_clearScreen();
    2e36:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

		//hold the motor for 3 seconds

		Timer1_init(&Config_Ptr_time3);
    2e3a:	84 ef       	ldi	r24, 0xF4	; 244
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
		TIMER1_setCallBack(time);
    2e42:	8d e7       	ldi	r24, 0x7D	; 125
    2e44:	9f e0       	ldi	r25, 0x0F	; 15
    2e46:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
		while(tick < 1);
    2e4a:	80 91 11 01 	lds	r24, 0x0111
    2e4e:	88 23       	and	r24, r24
    2e50:	e1 f3       	breq	.-8      	; 0x2e4a <main+0xf38>
		tick = 0;
    2e52:	10 92 11 01 	sts	0x0111, r1
		Timer1_deInit();
    2e56:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>
		//display a message on the screen "door is locking" for 15 seconds
		LCD_displayString("door is locking");
    2e5a:	86 ec       	ldi	r24, 0xC6	; 198
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>

		//calculate 8.4 sec
		Timer1_init(&Config_Ptr_time1);
    2e62:	84 ee       	ldi	r24, 0xE4	; 228
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
		TIMER1_setCallBack(time);
    2e6a:	8d e7       	ldi	r24, 0x7D	; 125
    2e6c:	9f e0       	ldi	r25, 0x0F	; 15
    2e6e:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
		while(tick < 1);
    2e72:	80 91 11 01 	lds	r24, 0x0111
    2e76:	88 23       	and	r24, r24
    2e78:	e1 f3       	breq	.-8      	; 0x2e72 <main+0xf60>
		tick = 0;
    2e7a:	10 92 11 01 	sts	0x0111, r1
		Timer1_deInit();
    2e7e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>

		//calculate 6.6 sec so the total seconds calculated = 6.6+8.4=15sec
		Timer1_init(&Config_Ptr_time2);
    2e82:	8c ee       	ldi	r24, 0xEC	; 236
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
		TIMER1_setCallBack(time);
    2e8a:	8d e7       	ldi	r24, 0x7D	; 125
    2e8c:	9f e0       	ldi	r25, 0x0F	; 15
    2e8e:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
		while(tick < 1);
    2e92:	80 91 11 01 	lds	r24, 0x0111
    2e96:	88 23       	and	r24, r24
    2e98:	e1 f3       	breq	.-8      	; 0x2e92 <main+0xf80>
		tick = 0;
    2e9a:	10 92 11 01 	sts	0x0111, r1
		Timer1_deInit();
    2e9e:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>

		LCD_clearScreen();;
    2ea2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    2ea6:	38 cc       	rjmp	.-1936   	; 0x2718 <main+0x806>
		break;}
else{
	false_attempts++;
    2ea8:	80 91 0e 01 	lds	r24, 0x010E
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	80 93 0e 01 	sts	0x010E, r24
	if (false_attempts<3)
    2eb2:	80 91 0e 01 	lds	r24, 0x010E
    2eb6:	83 30       	cpi	r24, 0x03	; 3
    2eb8:	48 f1       	brcs	.+82     	; 0x2f0c <main+0xffa>
		continue;

		else{
			//start timer1 to calculate 8.4 sec
			Timer1_init(&Config_Ptr_time1);
    2eba:	84 ee       	ldi	r24, 0xE4	; 228
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
			TIMER1_setCallBack(time);
    2ec2:	8d e7       	ldi	r24, 0x7D	; 125
    2ec4:	9f e0       	ldi	r25, 0x0F	; 15
    2ec6:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
		//display error message on the screen
			LCD_displayString("error");
    2eca:	86 ed       	ldi	r24, 0xD6	; 214
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
			//now we calculated 7*8.4=58.8sec
			while(tick<7);
    2ed2:	80 91 11 01 	lds	r24, 0x0111
    2ed6:	87 30       	cpi	r24, 0x07	; 7
    2ed8:	e0 f3       	brcs	.-8      	; 0x2ed2 <main+0xfc0>
			tick=0;
    2eda:	10 92 11 01 	sts	0x0111, r1
			Timer1_deInit();
    2ede:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>
			//add 1.2 sec so total time calculated = 1 minute
			Timer1_init(&Config_Ptr_time4);
    2ee2:	8c ef       	ldi	r24, 0xFC	; 252
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
			TIMER1_setCallBack(time);
    2eea:	8d e7       	ldi	r24, 0x7D	; 125
    2eec:	9f e0       	ldi	r25, 0x0F	; 15
    2eee:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
			while(tick<1);
    2ef2:	80 91 11 01 	lds	r24, 0x0111
    2ef6:	88 23       	and	r24, r24
    2ef8:	e1 f3       	breq	.-8      	; 0x2ef2 <main+0xfe0>
			tick=0;
    2efa:	10 92 11 01 	sts	0x0111, r1
			Timer1_deInit();
    2efe:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>
			false_attempts=0;
    2f02:	10 92 0e 01 	sts	0x010E, r1
			LCD_clearScreen();
    2f06:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    2f0a:	06 cc       	rjmp	.-2036   	; 0x2718 <main+0x806>
			break;
		}
}}
while(false_attempts<3);
    2f0c:	80 91 0e 01 	lds	r24, 0x010E
    2f10:	83 30       	cpi	r24, 0x03	; 3
    2f12:	08 f4       	brcc	.+2      	; 0x2f16 <main+0x1004>
    2f14:	ef cc       	rjmp	.-1570   	; 0x28f4 <main+0x9e2>
    2f16:	00 cc       	rjmp	.-2048   	; 0x2718 <main+0x806>
	break;
	//in case user choose to change the password
case'-':
	do{
		//send option to the other mc
		UART_sendByte(option);
    2f18:	80 91 0f 01 	lds	r24, 0x010F
    2f1c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
		LCD_clearScreen();
    2f20:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e1 5a       	subi	r30, 0xA1	; 161
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	aa ef       	ldi	r26, 0xFA	; 250
    2f30:	b3 e4       	ldi	r27, 0x43	; 67
    2f32:	80 83       	st	Z, r24
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	a2 83       	std	Z+2, r26	; 0x02
    2f38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	05 5a       	subi	r16, 0xA5	; 165
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	fe 01       	movw	r30, r28
    2f42:	e1 5a       	subi	r30, 0xA1	; 161
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	4a ef       	ldi	r20, 0xFA	; 250
    2f54:	54 e4       	ldi	r21, 0x44	; 68
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 83       	st	Z, r24
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	a2 83       	std	Z+2, r26	; 0x02
    2f66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e5 5a       	subi	r30, 0xA5	; 165
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	44 f4       	brge	.+16     	; 0x2f96 <main+0x1084>
		__ticks = 1;
    2f86:	fe 01       	movw	r30, r28
    2f88:	e7 5a       	subi	r30, 0xA7	; 167
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	64 c0       	rjmp	.+200    	; 0x305e <main+0x114c>
	else if (__tmp > 65535)
    2f96:	fe 01       	movw	r30, r28
    2f98:	e5 5a       	subi	r30, 0xA5	; 165
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	0c f0       	brlt	.+2      	; 0x2fb6 <main+0x10a4>
    2fb4:	43 c0       	rjmp	.+134    	; 0x303c <main+0x112a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e1 5a       	subi	r30, 0xA1	; 161
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8e 01       	movw	r16, r28
    2fd6:	07 5a       	subi	r16, 0xA7	; 167
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    2fec:	1f c0       	rjmp	.+62     	; 0x302c <main+0x111a>
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e9 5a       	subi	r30, 0xA9	; 169
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	88 ec       	ldi	r24, 0xC8	; 200
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	80 83       	st	Z, r24
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e9 5a       	subi	r30, 0xA9	; 169
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <main+0x10f4>
    300a:	fe 01       	movw	r30, r28
    300c:	e9 5a       	subi	r30, 0xA9	; 169
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3014:	de 01       	movw	r26, r28
    3016:	a7 5a       	subi	r26, 0xA7	; 167
    3018:	bf 4f       	sbci	r27, 0xFF	; 255
    301a:	fe 01       	movw	r30, r28
    301c:	e7 5a       	subi	r30, 0xA7	; 167
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	9c 93       	st	X, r25
    302a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302c:	fe 01       	movw	r30, r28
    302e:	e7 5a       	subi	r30, 0xA7	; 167
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	d1 f6       	brne	.-76     	; 0x2fee <main+0x10dc>
    303a:	27 c0       	rjmp	.+78     	; 0x308a <main+0x1178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	8e 01       	movw	r16, r28
    303e:	07 5a       	subi	r16, 0xA7	; 167
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	e5 5a       	subi	r30, 0xA5	; 165
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	f8 01       	movw	r30, r16
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	80 83       	st	Z, r24
    305e:	de 01       	movw	r26, r28
    3060:	ab 5a       	subi	r26, 0xAB	; 171
    3062:	bf 4f       	sbci	r27, 0xFF	; 255
    3064:	fe 01       	movw	r30, r28
    3066:	e7 5a       	subi	r30, 0xA7	; 167
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	8d 93       	st	X+, r24
    3070:	9c 93       	st	X, r25
    3072:	fe 01       	movw	r30, r28
    3074:	eb 5a       	subi	r30, 0xAB	; 171
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <main+0x116a>
    3080:	fe 01       	movw	r30, r28
    3082:	eb 5a       	subi	r30, 0xAB	; 171
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
		_delay_ms(500);

		//ask the user to enter the password
		LCD_displayString("plz enter pass:");
    308a:	84 ea       	ldi	r24, 0xA4	; 164
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
		LCD_moveCursor(1, 0);
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>

		for(i=0;i<5;i++)
    309a:	fe 01       	movw	r30, r28
    309c:	ed 52       	subi	r30, 0x2D	; 45
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	10 82       	st	Z, r1
    30a2:	cb c0       	rjmp	.+406    	; 0x323a <main+0x1328>
		{check[i]=KEYPAD_getPressedKey();
    30a4:	fe 01       	movw	r30, r28
    30a6:	ed 52       	subi	r30, 0x2D	; 45
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	80 81       	ld	r24, Z
    30ac:	08 2f       	mov	r16, r24
    30ae:	10 e0       	ldi	r17, 0x00	; 0
    30b0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    30b4:	f8 01       	movw	r30, r16
    30b6:	ea 5e       	subi	r30, 0xEA	; 234
    30b8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ba:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    30bc:	8a e2       	ldi	r24, 0x2A	; 42
    30be:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
    30c2:	fe 01       	movw	r30, r28
    30c4:	ef 5a       	subi	r30, 0xAF	; 175
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	aa ef       	ldi	r26, 0xFA	; 250
    30ce:	b3 e4       	ldi	r27, 0x43	; 67
    30d0:	80 83       	st	Z, r24
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	a2 83       	std	Z+2, r26	; 0x02
    30d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d8:	8e 01       	movw	r16, r28
    30da:	03 5b       	subi	r16, 0xB3	; 179
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	fe 01       	movw	r30, r28
    30e0:	ef 5a       	subi	r30, 0xAF	; 175
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a ef       	ldi	r20, 0xFA	; 250
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	f8 01       	movw	r30, r16
    30fe:	80 83       	st	Z, r24
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	a2 83       	std	Z+2, r26	; 0x02
    3104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3106:	fe 01       	movw	r30, r28
    3108:	e3 5b       	subi	r30, 0xB3	; 179
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	44 f4       	brge	.+16     	; 0x3134 <main+0x1222>
		__ticks = 1;
    3124:	fe 01       	movw	r30, r28
    3126:	e5 5b       	subi	r30, 0xB5	; 181
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24
    3132:	64 c0       	rjmp	.+200    	; 0x31fc <main+0x12ea>
	else if (__tmp > 65535)
    3134:	fe 01       	movw	r30, r28
    3136:	e3 5b       	subi	r30, 0xB3	; 179
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	0c f0       	brlt	.+2      	; 0x3154 <main+0x1242>
    3152:	43 c0       	rjmp	.+134    	; 0x31da <main+0x12c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3154:	fe 01       	movw	r30, r28
    3156:	ef 5a       	subi	r30, 0xAF	; 175
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e2       	ldi	r20, 0x20	; 32
    3168:	51 e4       	ldi	r21, 0x41	; 65
    316a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	8e 01       	movw	r16, r28
    3174:	05 5b       	subi	r16, 0xB5	; 181
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	f8 01       	movw	r30, r16
    3186:	91 83       	std	Z+1, r25	; 0x01
    3188:	80 83       	st	Z, r24
    318a:	1f c0       	rjmp	.+62     	; 0x31ca <main+0x12b8>
    318c:	fe 01       	movw	r30, r28
    318e:	e7 5b       	subi	r30, 0xB7	; 183
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	91 83       	std	Z+1, r25	; 0x01
    3198:	80 83       	st	Z, r24
    319a:	fe 01       	movw	r30, r28
    319c:	e7 5b       	subi	r30, 0xB7	; 183
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	91 81       	ldd	r25, Z+1	; 0x01
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <main+0x1292>
    31a8:	fe 01       	movw	r30, r28
    31aa:	e7 5b       	subi	r30, 0xB7	; 183
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b2:	de 01       	movw	r26, r28
    31b4:	a5 5b       	subi	r26, 0xB5	; 181
    31b6:	bf 4f       	sbci	r27, 0xFF	; 255
    31b8:	fe 01       	movw	r30, r28
    31ba:	e5 5b       	subi	r30, 0xB5	; 181
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	80 81       	ld	r24, Z
    31c0:	91 81       	ldd	r25, Z+1	; 0x01
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	11 96       	adiw	r26, 0x01	; 1
    31c6:	9c 93       	st	X, r25
    31c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	fe 01       	movw	r30, r28
    31cc:	e5 5b       	subi	r30, 0xB5	; 181
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	91 81       	ldd	r25, Z+1	; 0x01
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	d1 f6       	brne	.-76     	; 0x318c <main+0x127a>
    31d8:	27 c0       	rjmp	.+78     	; 0x3228 <main+0x1316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31da:	8e 01       	movw	r16, r28
    31dc:	05 5b       	subi	r16, 0xB5	; 181
    31de:	1f 4f       	sbci	r17, 0xFF	; 255
    31e0:	fe 01       	movw	r30, r28
    31e2:	e3 5b       	subi	r30, 0xB3	; 179
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	f8 01       	movw	r30, r16
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	de 01       	movw	r26, r28
    31fe:	a9 5b       	subi	r26, 0xB9	; 185
    3200:	bf 4f       	sbci	r27, 0xFF	; 255
    3202:	fe 01       	movw	r30, r28
    3204:	e5 5b       	subi	r30, 0xB5	; 181
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	8d 93       	st	X+, r24
    320e:	9c 93       	st	X, r25
    3210:	fe 01       	movw	r30, r28
    3212:	e9 5b       	subi	r30, 0xB9	; 185
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <main+0x1308>
    321e:	fe 01       	movw	r30, r28
    3220:	e9 5b       	subi	r30, 0xB9	; 185
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24

		//ask the user to enter the password
		LCD_displayString("plz enter pass:");
		LCD_moveCursor(1, 0);

		for(i=0;i<5;i++)
    3228:	de 01       	movw	r26, r28
    322a:	ad 52       	subi	r26, 0x2D	; 45
    322c:	bf 4f       	sbci	r27, 0xFF	; 255
    322e:	fe 01       	movw	r30, r28
    3230:	ed 52       	subi	r30, 0x2D	; 45
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	8f 5f       	subi	r24, 0xFF	; 255
    3238:	8c 93       	st	X, r24
    323a:	fe 01       	movw	r30, r28
    323c:	ed 52       	subi	r30, 0x2D	; 45
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	85 30       	cpi	r24, 0x05	; 5
    3244:	08 f4       	brcc	.+2      	; 0x3248 <main+0x1336>
    3246:	2e cf       	rjmp	.-420    	; 0x30a4 <main+0x1192>
		{check[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);}
		//wait until the user press on the enter key
		while(KEYPAD_getPressedKey()!='+');
    3248:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    324c:	8b 32       	cpi	r24, 0x2B	; 43
    324e:	e1 f7       	brne	.-8      	; 0x3248 <main+0x1336>
		LCD_clearScreen();
    3250:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    3254:	fe 01       	movw	r30, r28
    3256:	ed 5b       	subi	r30, 0xBD	; 189
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	aa ef       	ldi	r26, 0xFA	; 250
    3260:	b3 e4       	ldi	r27, 0x43	; 67
    3262:	80 83       	st	Z, r24
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	a2 83       	std	Z+2, r26	; 0x02
    3268:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326a:	8e 01       	movw	r16, r28
    326c:	01 5c       	subi	r16, 0xC1	; 193
    326e:	1f 4f       	sbci	r17, 0xFF	; 255
    3270:	fe 01       	movw	r30, r28
    3272:	ed 5b       	subi	r30, 0xBD	; 189
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a ef       	ldi	r20, 0xFA	; 250
    3284:	54 e4       	ldi	r21, 0x44	; 68
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	f8 01       	movw	r30, r16
    3290:	80 83       	st	Z, r24
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	a2 83       	std	Z+2, r26	; 0x02
    3296:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3298:	fe 01       	movw	r30, r28
    329a:	ff 96       	adiw	r30, 0x3f	; 63
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e8       	ldi	r20, 0x80	; 128
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b0:	88 23       	and	r24, r24
    32b2:	2c f4       	brge	.+10     	; 0x32be <main+0x13ac>
		__ticks = 1;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	9e af       	std	Y+62, r25	; 0x3e
    32ba:	8d af       	std	Y+61, r24	; 0x3d
    32bc:	46 c0       	rjmp	.+140    	; 0x334a <main+0x1438>
	else if (__tmp > 65535)
    32be:	fe 01       	movw	r30, r28
    32c0:	ff 96       	adiw	r30, 0x3f	; 63
    32c2:	60 81       	ld	r22, Z
    32c4:	71 81       	ldd	r23, Z+1	; 0x01
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	3f ef       	ldi	r19, 0xFF	; 255
    32ce:	4f e7       	ldi	r20, 0x7F	; 127
    32d0:	57 e4       	ldi	r21, 0x47	; 71
    32d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d6:	18 16       	cp	r1, r24
    32d8:	64 f5       	brge	.+88     	; 0x3332 <main+0x1420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32da:	fe 01       	movw	r30, r28
    32dc:	ed 5b       	subi	r30, 0xBD	; 189
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e2       	ldi	r20, 0x20	; 32
    32ee:	51 e4       	ldi	r21, 0x41	; 65
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e af       	std	Y+62, r25	; 0x3e
    3306:	8d af       	std	Y+61, r24	; 0x3d
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <main+0x1416>
    330a:	88 ec       	ldi	r24, 0xC8	; 200
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	9c af       	std	Y+60, r25	; 0x3c
    3310:	8b af       	std	Y+59, r24	; 0x3b
    3312:	8b ad       	ldd	r24, Y+59	; 0x3b
    3314:	9c ad       	ldd	r25, Y+60	; 0x3c
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <main+0x1404>
    331a:	9c af       	std	Y+60, r25	; 0x3c
    331c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3320:	9e ad       	ldd	r25, Y+62	; 0x3e
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9e af       	std	Y+62, r25	; 0x3e
    3326:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3328:	8d ad       	ldd	r24, Y+61	; 0x3d
    332a:	9e ad       	ldd	r25, Y+62	; 0x3e
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	69 f7       	brne	.-38     	; 0x330a <main+0x13f8>
    3330:	16 c0       	rjmp	.+44     	; 0x335e <main+0x144c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3332:	fe 01       	movw	r30, r28
    3334:	ff 96       	adiw	r30, 0x3f	; 63
    3336:	60 81       	ld	r22, Z
    3338:	71 81       	ldd	r23, Z+1	; 0x01
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9e af       	std	Y+62, r25	; 0x3e
    3348:	8d af       	std	Y+61, r24	; 0x3d
    334a:	8d ad       	ldd	r24, Y+61	; 0x3d
    334c:	9e ad       	ldd	r25, Y+62	; 0x3e
    334e:	9a af       	std	Y+58, r25	; 0x3a
    3350:	89 af       	std	Y+57, r24	; 0x39
    3352:	89 ad       	ldd	r24, Y+57	; 0x39
    3354:	9a ad       	ldd	r25, Y+58	; 0x3a
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <main+0x1444>
    335a:	9a af       	std	Y+58, r25	; 0x3a
    335c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);

		//send the password to the other mc
		for(i=0;i<5;i++)
    335e:	fe 01       	movw	r30, r28
    3360:	ed 52       	subi	r30, 0x2D	; 45
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	10 82       	st	Z, r1
    3366:	15 c0       	rjmp	.+42     	; 0x3392 <main+0x1480>
			UART_sendByte(check[i]);
    3368:	fe 01       	movw	r30, r28
    336a:	ed 52       	subi	r30, 0x2D	; 45
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 81       	ld	r24, Z
    3370:	88 2f       	mov	r24, r24
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	fc 01       	movw	r30, r24
    3376:	ea 5e       	subi	r30, 0xEA	; 234
    3378:	fe 4f       	sbci	r31, 0xFE	; 254
    337a:	80 81       	ld	r24, Z
    337c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
		while(KEYPAD_getPressedKey()!='+');
		LCD_clearScreen();
		_delay_ms(500);

		//send the password to the other mc
		for(i=0;i<5;i++)
    3380:	de 01       	movw	r26, r28
    3382:	ad 52       	subi	r26, 0x2D	; 45
    3384:	bf 4f       	sbci	r27, 0xFF	; 255
    3386:	fe 01       	movw	r30, r28
    3388:	ed 52       	subi	r30, 0x2D	; 45
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	8f 5f       	subi	r24, 0xFF	; 255
    3390:	8c 93       	st	X, r24
    3392:	fe 01       	movw	r30, r28
    3394:	ed 52       	subi	r30, 0x2D	; 45
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	80 81       	ld	r24, Z
    339a:	85 30       	cpi	r24, 0x05	; 5
    339c:	28 f3       	brcs	.-54     	; 0x3368 <main+0x1456>
			UART_sendByte(check[i]);

		//check if the entered password is matched with the password of the system
		check_bit2=UART_receiveByte();
    339e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <UART_receiveByte>
    33a2:	80 93 10 01 	sts	0x0110, r24
if(check_bit2==matched)
    33a6:	80 91 10 01 	lds	r24, 0x0110
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <main+0x149e>
    33ae:	8d c2       	rjmp	.+1306   	; 0x38ca <main+0x19b8>
{
	false_attempts=0;
    33b0:	10 92 0e 01 	sts	0x010E, r1
	do{
		LCD_displayStringRowColumn(0, 0, "plz enter pass");
    33b4:	20 e6       	ldi	r18, 0x60	; 96
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	a9 01       	movw	r20, r18
    33be:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <LCD_displayStringRowColumn>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	aa ef       	ldi	r26, 0xFA	; 250
    33c8:	b3 e4       	ldi	r27, 0x43	; 67
    33ca:	8d ab       	std	Y+53, r24	; 0x35
    33cc:	9e ab       	std	Y+54, r25	; 0x36
    33ce:	af ab       	std	Y+55, r26	; 0x37
    33d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	6d a9       	ldd	r22, Y+53	; 0x35
    33d4:	7e a9       	ldd	r23, Y+54	; 0x36
    33d6:	8f a9       	ldd	r24, Y+55	; 0x37
    33d8:	98 ad       	ldd	r25, Y+56	; 0x38
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a ef       	ldi	r20, 0xFA	; 250
    33e0:	54 e4       	ldi	r21, 0x44	; 68
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	89 ab       	std	Y+49, r24	; 0x31
    33ec:	9a ab       	std	Y+50, r25	; 0x32
    33ee:	ab ab       	std	Y+51, r26	; 0x33
    33f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33f2:	69 a9       	ldd	r22, Y+49	; 0x31
    33f4:	7a a9       	ldd	r23, Y+50	; 0x32
    33f6:	8b a9       	ldd	r24, Y+51	; 0x33
    33f8:	9c a9       	ldd	r25, Y+52	; 0x34
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	2c f4       	brge	.+10     	; 0x3414 <main+0x1502>
		__ticks = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	98 ab       	std	Y+48, r25	; 0x30
    3410:	8f a7       	std	Y+47, r24	; 0x2f
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <main+0x1580>
	else if (__tmp > 65535)
    3414:	69 a9       	ldd	r22, Y+49	; 0x31
    3416:	7a a9       	ldd	r23, Y+50	; 0x32
    3418:	8b a9       	ldd	r24, Y+51	; 0x33
    341a:	9c a9       	ldd	r25, Y+52	; 0x34
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	4c f5       	brge	.+82     	; 0x347e <main+0x156c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	6d a9       	ldd	r22, Y+53	; 0x35
    342e:	7e a9       	ldd	r23, Y+54	; 0x36
    3430:	8f a9       	ldd	r24, Y+55	; 0x37
    3432:	98 ad       	ldd	r25, Y+56	; 0x38
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	98 ab       	std	Y+48, r25	; 0x30
    3452:	8f a7       	std	Y+47, r24	; 0x2f
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <main+0x1562>
    3456:	88 ec       	ldi	r24, 0xC8	; 200
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	9e a7       	std	Y+46, r25	; 0x2e
    345c:	8d a7       	std	Y+45, r24	; 0x2d
    345e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3460:	9e a5       	ldd	r25, Y+46	; 0x2e
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <main+0x1550>
    3466:	9e a7       	std	Y+46, r25	; 0x2e
    3468:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	8f a5       	ldd	r24, Y+47	; 0x2f
    346c:	98 a9       	ldd	r25, Y+48	; 0x30
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	98 ab       	std	Y+48, r25	; 0x30
    3472:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3474:	8f a5       	ldd	r24, Y+47	; 0x2f
    3476:	98 a9       	ldd	r25, Y+48	; 0x30
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	69 f7       	brne	.-38     	; 0x3456 <main+0x1544>
    347c:	14 c0       	rjmp	.+40     	; 0x34a6 <main+0x1594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	69 a9       	ldd	r22, Y+49	; 0x31
    3480:	7a a9       	ldd	r23, Y+50	; 0x32
    3482:	8b a9       	ldd	r24, Y+51	; 0x33
    3484:	9c a9       	ldd	r25, Y+52	; 0x34
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	98 ab       	std	Y+48, r25	; 0x30
    3490:	8f a7       	std	Y+47, r24	; 0x2f
    3492:	8f a5       	ldd	r24, Y+47	; 0x2f
    3494:	98 a9       	ldd	r25, Y+48	; 0x30
    3496:	9c a7       	std	Y+44, r25	; 0x2c
    3498:	8b a7       	std	Y+43, r24	; 0x2b
    349a:	8b a5       	ldd	r24, Y+43	; 0x2b
    349c:	9c a5       	ldd	r25, Y+44	; 0x2c
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0x158c>
    34a2:	9c a7       	std	Y+44, r25	; 0x2c
    34a4:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_moveCursor(1, 0);
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>

				for(i=0;i<5;i++)
    34ae:	fe 01       	movw	r30, r28
    34b0:	ed 52       	subi	r30, 0x2D	; 45
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	10 82       	st	Z, r1
    34b6:	8a c0       	rjmp	.+276    	; 0x35cc <main+0x16ba>
				{array[i]=KEYPAD_getPressedKey();
    34b8:	fe 01       	movw	r30, r28
    34ba:	ed 52       	subi	r30, 0x2D	; 45
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 81       	ld	r24, Z
    34c0:	08 2f       	mov	r16, r24
    34c2:	10 e0       	ldi	r17, 0x00	; 0
    34c4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    34c8:	f8 01       	movw	r30, r16
    34ca:	e5 5e       	subi	r30, 0xE5	; 229
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    34d0:	8a e2       	ldi	r24, 0x2A	; 42
    34d2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	aa ef       	ldi	r26, 0xFA	; 250
    34dc:	b3 e4       	ldi	r27, 0x43	; 67
    34de:	8f a3       	std	Y+39, r24	; 0x27
    34e0:	98 a7       	std	Y+40, r25	; 0x28
    34e2:	a9 a7       	std	Y+41, r26	; 0x29
    34e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e6:	6f a1       	ldd	r22, Y+39	; 0x27
    34e8:	78 a5       	ldd	r23, Y+40	; 0x28
    34ea:	89 a5       	ldd	r24, Y+41	; 0x29
    34ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	4a ef       	ldi	r20, 0xFA	; 250
    34f4:	54 e4       	ldi	r21, 0x44	; 68
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	8b a3       	std	Y+35, r24	; 0x23
    3500:	9c a3       	std	Y+36, r25	; 0x24
    3502:	ad a3       	std	Y+37, r26	; 0x25
    3504:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3506:	6b a1       	ldd	r22, Y+35	; 0x23
    3508:	7c a1       	ldd	r23, Y+36	; 0x24
    350a:	8d a1       	ldd	r24, Y+37	; 0x25
    350c:	9e a1       	ldd	r25, Y+38	; 0x26
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	2c f4       	brge	.+10     	; 0x3528 <main+0x1616>
		__ticks = 1;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9a a3       	std	Y+34, r25	; 0x22
    3524:	89 a3       	std	Y+33, r24	; 0x21
    3526:	3f c0       	rjmp	.+126    	; 0x35a6 <main+0x1694>
	else if (__tmp > 65535)
    3528:	6b a1       	ldd	r22, Y+35	; 0x23
    352a:	7c a1       	ldd	r23, Y+36	; 0x24
    352c:	8d a1       	ldd	r24, Y+37	; 0x25
    352e:	9e a1       	ldd	r25, Y+38	; 0x26
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    353c:	18 16       	cp	r1, r24
    353e:	4c f5       	brge	.+82     	; 0x3592 <main+0x1680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3540:	6f a1       	ldd	r22, Y+39	; 0x27
    3542:	78 a5       	ldd	r23, Y+40	; 0x28
    3544:	89 a5       	ldd	r24, Y+41	; 0x29
    3546:	9a a5       	ldd	r25, Y+42	; 0x2a
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e2       	ldi	r20, 0x20	; 32
    354e:	51 e4       	ldi	r21, 0x41	; 65
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9a a3       	std	Y+34, r25	; 0x22
    3566:	89 a3       	std	Y+33, r24	; 0x21
    3568:	0f c0       	rjmp	.+30     	; 0x3588 <main+0x1676>
    356a:	88 ec       	ldi	r24, 0xC8	; 200
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	98 a3       	std	Y+32, r25	; 0x20
    3570:	8f 8f       	std	Y+31, r24	; 0x1f
    3572:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3574:	98 a1       	ldd	r25, Y+32	; 0x20
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <main+0x1664>
    357a:	98 a3       	std	Y+32, r25	; 0x20
    357c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357e:	89 a1       	ldd	r24, Y+33	; 0x21
    3580:	9a a1       	ldd	r25, Y+34	; 0x22
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	9a a3       	std	Y+34, r25	; 0x22
    3586:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3588:	89 a1       	ldd	r24, Y+33	; 0x21
    358a:	9a a1       	ldd	r25, Y+34	; 0x22
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	69 f7       	brne	.-38     	; 0x356a <main+0x1658>
    3590:	14 c0       	rjmp	.+40     	; 0x35ba <main+0x16a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3592:	6b a1       	ldd	r22, Y+35	; 0x23
    3594:	7c a1       	ldd	r23, Y+36	; 0x24
    3596:	8d a1       	ldd	r24, Y+37	; 0x25
    3598:	9e a1       	ldd	r25, Y+38	; 0x26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9a a3       	std	Y+34, r25	; 0x22
    35a4:	89 a3       	std	Y+33, r24	; 0x21
    35a6:	89 a1       	ldd	r24, Y+33	; 0x21
    35a8:	9a a1       	ldd	r25, Y+34	; 0x22
    35aa:	9e 8f       	std	Y+30, r25	; 0x1e
    35ac:	8d 8f       	std	Y+29, r24	; 0x1d
    35ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0x16a0>
    35b6:	9e 8f       	std	Y+30, r25	; 0x1e
    35b8:	8d 8f       	std	Y+29, r24	; 0x1d
	do{
		LCD_displayStringRowColumn(0, 0, "plz enter pass");
				_delay_ms(500);
				LCD_moveCursor(1, 0);

				for(i=0;i<5;i++)
    35ba:	de 01       	movw	r26, r28
    35bc:	ad 52       	subi	r26, 0x2D	; 45
    35be:	bf 4f       	sbci	r27, 0xFF	; 255
    35c0:	fe 01       	movw	r30, r28
    35c2:	ed 52       	subi	r30, 0x2D	; 45
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	8c 93       	st	X, r24
    35cc:	fe 01       	movw	r30, r28
    35ce:	ed 52       	subi	r30, 0x2D	; 45
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	80 81       	ld	r24, Z
    35d4:	85 30       	cpi	r24, 0x05	; 5
    35d6:	08 f4       	brcc	.+2      	; 0x35da <main+0x16c8>
    35d8:	6f cf       	rjmp	.-290    	; 0x34b8 <main+0x15a6>
				{array[i]=KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
				}

				while(KEYPAD_getPressedKey()!='+');
    35da:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    35de:	8b 32       	cpi	r24, 0x2B	; 43
    35e0:	e1 f7       	brne	.-8      	; 0x35da <main+0x16c8>

				if(KEYPAD_getPressedKey()=='+')//+ is enter key
    35e2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    35e6:	8b 32       	cpi	r24, 0x2B	; 43
    35e8:	11 f4       	brne	.+4      	; 0x35ee <main+0x16dc>

					LCD_clearScreen();
    35ea:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

				//re-enter the pass to check
				LCD_displayString("plz re-enter the");
    35ee:	8f e6       	ldi	r24, 0x6F	; 111
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
				LCD_moveCursor(1, 0);
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>
				LCD_displayString("same pass");
    35fe:	80 e8       	ldi	r24, 0x80	; 128
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	aa e7       	ldi	r26, 0x7A	; 122
    360c:	b4 e4       	ldi	r27, 0x44	; 68
    360e:	89 8f       	std	Y+25, r24	; 0x19
    3610:	9a 8f       	std	Y+26, r25	; 0x1a
    3612:	ab 8f       	std	Y+27, r26	; 0x1b
    3614:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	69 8d       	ldd	r22, Y+25	; 0x19
    3618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    361a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    361c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	4a ef       	ldi	r20, 0xFA	; 250
    3624:	54 e4       	ldi	r21, 0x44	; 68
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	8d 8b       	std	Y+21, r24	; 0x15
    3630:	9e 8b       	std	Y+22, r25	; 0x16
    3632:	af 8b       	std	Y+23, r26	; 0x17
    3634:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3636:	6d 89       	ldd	r22, Y+21	; 0x15
    3638:	7e 89       	ldd	r23, Y+22	; 0x16
    363a:	8f 89       	ldd	r24, Y+23	; 0x17
    363c:	98 8d       	ldd	r25, Y+24	; 0x18
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	2c f4       	brge	.+10     	; 0x3658 <main+0x1746>
		__ticks = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9c 8b       	std	Y+20, r25	; 0x14
    3654:	8b 8b       	std	Y+19, r24	; 0x13
    3656:	3f c0       	rjmp	.+126    	; 0x36d6 <main+0x17c4>
	else if (__tmp > 65535)
    3658:	6d 89       	ldd	r22, Y+21	; 0x15
    365a:	7e 89       	ldd	r23, Y+22	; 0x16
    365c:	8f 89       	ldd	r24, Y+23	; 0x17
    365e:	98 8d       	ldd	r25, Y+24	; 0x18
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	4c f5       	brge	.+82     	; 0x36c2 <main+0x17b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3670:	69 8d       	ldd	r22, Y+25	; 0x19
    3672:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3674:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3676:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9c 8b       	std	Y+20, r25	; 0x14
    3696:	8b 8b       	std	Y+19, r24	; 0x13
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <main+0x17a6>
    369a:	88 ec       	ldi	r24, 0xC8	; 200
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9a 8b       	std	Y+18, r25	; 0x12
    36a0:	89 8b       	std	Y+17, r24	; 0x11
    36a2:	89 89       	ldd	r24, Y+17	; 0x11
    36a4:	9a 89       	ldd	r25, Y+18	; 0x12
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <main+0x1794>
    36aa:	9a 8b       	std	Y+18, r25	; 0x12
    36ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	8b 89       	ldd	r24, Y+19	; 0x13
    36b0:	9c 89       	ldd	r25, Y+20	; 0x14
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	9c 8b       	std	Y+20, r25	; 0x14
    36b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ba:	9c 89       	ldd	r25, Y+20	; 0x14
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	69 f7       	brne	.-38     	; 0x369a <main+0x1788>
    36c0:	14 c0       	rjmp	.+40     	; 0x36ea <main+0x17d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	6d 89       	ldd	r22, Y+21	; 0x15
    36c4:	7e 89       	ldd	r23, Y+22	; 0x16
    36c6:	8f 89       	ldd	r24, Y+23	; 0x17
    36c8:	98 8d       	ldd	r25, Y+24	; 0x18
    36ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9c 8b       	std	Y+20, r25	; 0x14
    36d4:	8b 8b       	std	Y+19, r24	; 0x13
    36d6:	8b 89       	ldd	r24, Y+19	; 0x13
    36d8:	9c 89       	ldd	r25, Y+20	; 0x14
    36da:	98 8b       	std	Y+16, r25	; 0x10
    36dc:	8f 87       	std	Y+15, r24	; 0x0f
    36de:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e0:	98 89       	ldd	r25, Y+16	; 0x10
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <main+0x17d0>
    36e6:	98 8b       	std	Y+16, r25	; 0x10
    36e8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);

				for(i=0;i<5;i++)
    36ea:	fe 01       	movw	r30, r28
    36ec:	ed 52       	subi	r30, 0x2D	; 45
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	10 82       	st	Z, r1
    36f2:	91 c0       	rjmp	.+290    	; 0x3816 <main+0x1904>
				{
					LCD_moveCursor(2, i);
    36f4:	fe 01       	movw	r30, r28
    36f6:	ed 52       	subi	r30, 0x2D	; 45
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	82 e0       	ldi	r24, 0x02	; 2
    36fc:	60 81       	ld	r22, Z
    36fe:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_moveCursor>
					re_enter[i]=KEYPAD_getPressedKey();
    3702:	fe 01       	movw	r30, r28
    3704:	ed 52       	subi	r30, 0x2D	; 45
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	08 2f       	mov	r16, r24
    370c:	10 e0       	ldi	r17, 0x00	; 0
    370e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    3712:	f8 01       	movw	r30, r16
    3714:	e0 5e       	subi	r30, 0xE0	; 224
    3716:	fe 4f       	sbci	r31, 0xFE	; 254
    3718:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    371a:	8a e2       	ldi	r24, 0x2A	; 42
    371c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_displayCharacter>
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	aa ef       	ldi	r26, 0xFA	; 250
    3726:	b3 e4       	ldi	r27, 0x43	; 67
    3728:	8b 87       	std	Y+11, r24	; 0x0b
    372a:	9c 87       	std	Y+12, r25	; 0x0c
    372c:	ad 87       	std	Y+13, r26	; 0x0d
    372e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3730:	6b 85       	ldd	r22, Y+11	; 0x0b
    3732:	7c 85       	ldd	r23, Y+12	; 0x0c
    3734:	8d 85       	ldd	r24, Y+13	; 0x0d
    3736:	9e 85       	ldd	r25, Y+14	; 0x0e
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a ef       	ldi	r20, 0xFA	; 250
    373e:	54 e4       	ldi	r21, 0x44	; 68
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	8f 83       	std	Y+7, r24	; 0x07
    374a:	98 87       	std	Y+8, r25	; 0x08
    374c:	a9 87       	std	Y+9, r26	; 0x09
    374e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3750:	6f 81       	ldd	r22, Y+7	; 0x07
    3752:	78 85       	ldd	r23, Y+8	; 0x08
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e8       	ldi	r20, 0x80	; 128
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3764:	88 23       	and	r24, r24
    3766:	2c f4       	brge	.+10     	; 0x3772 <main+0x1860>
		__ticks = 1;
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	3f c0       	rjmp	.+126    	; 0x37f0 <main+0x18de>
	else if (__tmp > 65535)
    3772:	6f 81       	ldd	r22, Y+7	; 0x07
    3774:	78 85       	ldd	r23, Y+8	; 0x08
    3776:	89 85       	ldd	r24, Y+9	; 0x09
    3778:	9a 85       	ldd	r25, Y+10	; 0x0a
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	3f ef       	ldi	r19, 0xFF	; 255
    377e:	4f e7       	ldi	r20, 0x7F	; 127
    3780:	57 e4       	ldi	r21, 0x47	; 71
    3782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3786:	18 16       	cp	r1, r24
    3788:	4c f5       	brge	.+82     	; 0x37dc <main+0x18ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378a:	6b 85       	ldd	r22, Y+11	; 0x0b
    378c:	7c 85       	ldd	r23, Y+12	; 0x0c
    378e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3790:	9e 85       	ldd	r25, Y+14	; 0x0e
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9e 83       	std	Y+6, r25	; 0x06
    37b0:	8d 83       	std	Y+5, r24	; 0x05
    37b2:	0f c0       	rjmp	.+30     	; 0x37d2 <main+0x18c0>
    37b4:	88 ec       	ldi	r24, 0xC8	; 200
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	9c 81       	ldd	r25, Y+4	; 0x04
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <main+0x18ae>
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ca:	9e 81       	ldd	r25, Y+6	; 0x06
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	69 f7       	brne	.-38     	; 0x37b4 <main+0x18a2>
    37da:	14 c0       	rjmp	.+40     	; 0x3804 <main+0x18f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37dc:	6f 81       	ldd	r22, Y+7	; 0x07
    37de:	78 85       	ldd	r23, Y+8	; 0x08
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	9e 83       	std	Y+6, r25	; 0x06
    37ee:	8d 83       	std	Y+5, r24	; 0x05
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	9a 81       	ldd	r25, Y+2	; 0x02
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <main+0x18ea>
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
				LCD_displayString("plz re-enter the");
				LCD_moveCursor(1, 0);
				LCD_displayString("same pass");
				_delay_ms(1000);

				for(i=0;i<5;i++)
    3804:	de 01       	movw	r26, r28
    3806:	ad 52       	subi	r26, 0x2D	; 45
    3808:	bf 4f       	sbci	r27, 0xFF	; 255
    380a:	fe 01       	movw	r30, r28
    380c:	ed 52       	subi	r30, 0x2D	; 45
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	80 81       	ld	r24, Z
    3812:	8f 5f       	subi	r24, 0xFF	; 255
    3814:	8c 93       	st	X, r24
    3816:	fe 01       	movw	r30, r28
    3818:	ed 52       	subi	r30, 0x2D	; 45
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	85 30       	cpi	r24, 0x05	; 5
    3820:	08 f4       	brcc	.+2      	; 0x3824 <main+0x1912>
    3822:	68 cf       	rjmp	.-304    	; 0x36f4 <main+0x17e2>
					re_enter[i]=KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}

				while(KEYPAD_getPressedKey()!='+');
    3824:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    3828:	8b 32       	cpi	r24, 0x2B	; 43
    382a:	e1 f7       	brne	.-8      	; 0x3824 <main+0x1912>

				LCD_clearScreen();
    382c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

				for(i=0;i<5;i++)
    3830:	fe 01       	movw	r30, r28
    3832:	ed 52       	subi	r30, 0x2D	; 45
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	10 82       	st	Z, r1
    3838:	15 c0       	rjmp	.+42     	; 0x3864 <main+0x1952>
					UART_sendByte(array[i]);
    383a:	fe 01       	movw	r30, r28
    383c:	ed 52       	subi	r30, 0x2D	; 45
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	80 81       	ld	r24, Z
    3842:	88 2f       	mov	r24, r24
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	fc 01       	movw	r30, r24
    3848:	e5 5e       	subi	r30, 0xE5	; 229
    384a:	fe 4f       	sbci	r31, 0xFE	; 254
    384c:	80 81       	ld	r24, Z
    384e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>

				while(KEYPAD_getPressedKey()!='+');

				LCD_clearScreen();

				for(i=0;i<5;i++)
    3852:	de 01       	movw	r26, r28
    3854:	ad 52       	subi	r26, 0x2D	; 45
    3856:	bf 4f       	sbci	r27, 0xFF	; 255
    3858:	fe 01       	movw	r30, r28
    385a:	ed 52       	subi	r30, 0x2D	; 45
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	8f 5f       	subi	r24, 0xFF	; 255
    3862:	8c 93       	st	X, r24
    3864:	fe 01       	movw	r30, r28
    3866:	ed 52       	subi	r30, 0x2D	; 45
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 81       	ld	r24, Z
    386c:	85 30       	cpi	r24, 0x05	; 5
    386e:	28 f3       	brcs	.-54     	; 0x383a <main+0x1928>
					UART_sendByte(array[i]);

				for(i=0;i<5;i++)
    3870:	fe 01       	movw	r30, r28
    3872:	ed 52       	subi	r30, 0x2D	; 45
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	10 82       	st	Z, r1
    3878:	15 c0       	rjmp	.+42     	; 0x38a4 <main+0x1992>
					UART_sendByte(re_enter[i]);
    387a:	fe 01       	movw	r30, r28
    387c:	ed 52       	subi	r30, 0x2D	; 45
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	fc 01       	movw	r30, r24
    3888:	e0 5e       	subi	r30, 0xE0	; 224
    388a:	fe 4f       	sbci	r31, 0xFE	; 254
    388c:	80 81       	ld	r24, Z
    388e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
				LCD_clearScreen();

				for(i=0;i<5;i++)
					UART_sendByte(array[i]);

				for(i=0;i<5;i++)
    3892:	de 01       	movw	r26, r28
    3894:	ad 52       	subi	r26, 0x2D	; 45
    3896:	bf 4f       	sbci	r27, 0xFF	; 255
    3898:	fe 01       	movw	r30, r28
    389a:	ed 52       	subi	r30, 0x2D	; 45
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	80 81       	ld	r24, Z
    38a0:	8f 5f       	subi	r24, 0xFF	; 255
    38a2:	8c 93       	st	X, r24
    38a4:	fe 01       	movw	r30, r28
    38a6:	ed 52       	subi	r30, 0x2D	; 45
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	85 30       	cpi	r24, 0x05	; 5
    38ae:	28 f3       	brcs	.-54     	; 0x387a <main+0x1968>
					UART_sendByte(re_enter[i]);

				/*Check if the entering password and the re-entering password are the same*/
				check_bit2 =UART_receiveByte();
    38b0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <UART_receiveByte>
    38b4:	80 93 10 01 	sts	0x0110, r24

				LCD_clearScreen();
    38b8:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>

			}

			while(check_bit2 == unmatched);
    38bc:	80 91 10 01 	lds	r24, 0x0110
    38c0:	88 23       	and	r24, r24
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <main+0x19b4>
    38c4:	77 cd       	rjmp	.-1298   	; 0x33b4 <main+0x14a2>
    38c6:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <main+0x806>
break;
}
else
{
false_attempts++;
    38ca:	80 91 0e 01 	lds	r24, 0x010E
    38ce:	8f 5f       	subi	r24, 0xFF	; 255
    38d0:	80 93 0e 01 	sts	0x010E, r24
if(false_attempts<3)
    38d4:	80 91 0e 01 	lds	r24, 0x010E
    38d8:	83 30       	cpi	r24, 0x03	; 3
    38da:	50 f1       	brcs	.+84     	; 0x3930 <main+0x1a1e>
	continue;
else{
	//start timer1 to calculate 8.4 sec
	Timer1_init(&Config_Ptr_time1);
    38dc:	84 ee       	ldi	r24, 0xE4	; 228
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
	TIMER1_setCallBack(time);
    38e4:	8d e7       	ldi	r24, 0x7D	; 125
    38e6:	9f e0       	ldi	r25, 0x0F	; 15
    38e8:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
	//display error message on the screen
	LCD_displayString("error");
    38ec:	86 ed       	ldi	r24, 0xD6	; 214
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <LCD_displayString>
	//now we calculated 7*8.4=58.8sec
	while(tick<7);
    38f4:	80 91 11 01 	lds	r24, 0x0111
    38f8:	87 30       	cpi	r24, 0x07	; 7
    38fa:	e0 f3       	brcs	.-8      	; 0x38f4 <main+0x19e2>
	tick=0;
    38fc:	10 92 11 01 	sts	0x0111, r1
	Timer1_deInit();
    3900:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>
	//add 1.2 sec so total time calculated = 1 minute
	Timer1_init(&Config_Ptr_time4);
    3904:	8c ef       	ldi	r24, 0xFC	; 252
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <Timer1_init>
	TIMER1_setCallBack(time);
    390c:	8d e7       	ldi	r24, 0x7D	; 125
    390e:	9f e0       	ldi	r25, 0x0F	; 15
    3910:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_setCallBack>
	while(tick<1);
    3914:	80 91 11 01 	lds	r24, 0x0111
    3918:	88 23       	and	r24, r24
    391a:	e1 f3       	breq	.-8      	; 0x3914 <main+0x1a02>
	tick=0;
    391c:	10 92 11 01 	sts	0x0111, r1
	Timer1_deInit();
    3920:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Timer1_deInit>
	false_attempts=0;
    3924:	10 92 0e 01 	sts	0x010E, r1
	LCD_clearScreen();
    3928:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_clearScreen>
    392c:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <main+0x806>

}
}

	}
	while(false_attempts<3);
    3930:	80 91 0e 01 	lds	r24, 0x010E
    3934:	83 30       	cpi	r24, 0x03	; 3
    3936:	08 f4       	brcc	.+2      	; 0x393a <main+0x1a28>
    3938:	ef ca       	rjmp	.-2594   	; 0x2f18 <main+0x1006>
    393a:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <main+0x806>

0000393e <__vector_9>:
#include"std_types.h"
#include"avr\io.h"
#include"avr\interrupt.h"
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)/*handler overflow interrupt of timer0 */
{
    393e:	1f 92       	push	r1
    3940:	0f 92       	push	r0
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	0f 92       	push	r0
    3946:	11 24       	eor	r1, r1
    3948:	2f 93       	push	r18
    394a:	3f 93       	push	r19
    394c:	4f 93       	push	r20
    394e:	5f 93       	push	r21
    3950:	6f 93       	push	r22
    3952:	7f 93       	push	r23
    3954:	8f 93       	push	r24
    3956:	9f 93       	push	r25
    3958:	af 93       	push	r26
    395a:	bf 93       	push	r27
    395c:	ef 93       	push	r30
    395e:	ff 93       	push	r31
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3968:	80 91 12 01 	lds	r24, 0x0112
    396c:	90 91 13 01 	lds	r25, 0x0113
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	29 f0       	breq	.+10     	; 0x397e <__vector_9+0x40>
			(*g_callBackPtr)();
    3974:	e0 91 12 01 	lds	r30, 0x0112
    3978:	f0 91 13 01 	lds	r31, 0x0113
    397c:	09 95       	icall
}
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	ff 91       	pop	r31
    3984:	ef 91       	pop	r30
    3986:	bf 91       	pop	r27
    3988:	af 91       	pop	r26
    398a:	9f 91       	pop	r25
    398c:	8f 91       	pop	r24
    398e:	7f 91       	pop	r23
    3990:	6f 91       	pop	r22
    3992:	5f 91       	pop	r21
    3994:	4f 91       	pop	r20
    3996:	3f 91       	pop	r19
    3998:	2f 91       	pop	r18
    399a:	0f 90       	pop	r0
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	0f 90       	pop	r0
    39a0:	1f 90       	pop	r1
    39a2:	18 95       	reti

000039a4 <__vector_7>:
ISR (TIMER1_COMPA_vect)/*handler output compare  interrupt of timer0 */
{
    39a4:	1f 92       	push	r1
    39a6:	0f 92       	push	r0
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	0f 92       	push	r0
    39ac:	11 24       	eor	r1, r1
    39ae:	2f 93       	push	r18
    39b0:	3f 93       	push	r19
    39b2:	4f 93       	push	r20
    39b4:	5f 93       	push	r21
    39b6:	6f 93       	push	r22
    39b8:	7f 93       	push	r23
    39ba:	8f 93       	push	r24
    39bc:	9f 93       	push	r25
    39be:	af 93       	push	r26
    39c0:	bf 93       	push	r27
    39c2:	ef 93       	push	r30
    39c4:	ff 93       	push	r31
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    39ce:	80 91 12 01 	lds	r24, 0x0112
    39d2:	90 91 13 01 	lds	r25, 0x0113
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	29 f0       	breq	.+10     	; 0x39e4 <__vector_7+0x40>
			(*g_callBackPtr)();
    39da:	e0 91 12 01 	lds	r30, 0x0112
    39de:	f0 91 13 01 	lds	r31, 0x0113
    39e2:	09 95       	icall
}
    39e4:	cf 91       	pop	r28
    39e6:	df 91       	pop	r29
    39e8:	ff 91       	pop	r31
    39ea:	ef 91       	pop	r30
    39ec:	bf 91       	pop	r27
    39ee:	af 91       	pop	r26
    39f0:	9f 91       	pop	r25
    39f2:	8f 91       	pop	r24
    39f4:	7f 91       	pop	r23
    39f6:	6f 91       	pop	r22
    39f8:	5f 91       	pop	r21
    39fa:	4f 91       	pop	r20
    39fc:	3f 91       	pop	r19
    39fe:	2f 91       	pop	r18
    3a00:	0f 90       	pop	r0
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	0f 90       	pop	r0
    3a06:	1f 90       	pop	r1
    3a08:	18 95       	reti

00003a0a <__vector_8>:
ISR(TIMER1_COMPB_vect)/*handler overflow interrupt of timer0 */
{
    3a0a:	1f 92       	push	r1
    3a0c:	0f 92       	push	r0
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	0f 92       	push	r0
    3a12:	11 24       	eor	r1, r1
    3a14:	2f 93       	push	r18
    3a16:	3f 93       	push	r19
    3a18:	4f 93       	push	r20
    3a1a:	5f 93       	push	r21
    3a1c:	6f 93       	push	r22
    3a1e:	7f 93       	push	r23
    3a20:	8f 93       	push	r24
    3a22:	9f 93       	push	r25
    3a24:	af 93       	push	r26
    3a26:	bf 93       	push	r27
    3a28:	ef 93       	push	r30
    3a2a:	ff 93       	push	r31
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3a34:	80 91 12 01 	lds	r24, 0x0112
    3a38:	90 91 13 01 	lds	r25, 0x0113
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	29 f0       	breq	.+10     	; 0x3a4a <__vector_8+0x40>
			(*g_callBackPtr)();
    3a40:	e0 91 12 01 	lds	r30, 0x0112
    3a44:	f0 91 13 01 	lds	r31, 0x0113
    3a48:	09 95       	icall
}
    3a4a:	cf 91       	pop	r28
    3a4c:	df 91       	pop	r29
    3a4e:	ff 91       	pop	r31
    3a50:	ef 91       	pop	r30
    3a52:	bf 91       	pop	r27
    3a54:	af 91       	pop	r26
    3a56:	9f 91       	pop	r25
    3a58:	8f 91       	pop	r24
    3a5a:	7f 91       	pop	r23
    3a5c:	6f 91       	pop	r22
    3a5e:	5f 91       	pop	r21
    3a60:	4f 91       	pop	r20
    3a62:	3f 91       	pop	r19
    3a64:	2f 91       	pop	r18
    3a66:	0f 90       	pop	r0
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	0f 90       	pop	r0
    3a6c:	1f 90       	pop	r1
    3a6e:	18 95       	reti

00003a70 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <Timer1_init+0x6>
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A |= (1<<FOC1A)|(1<<FOC1B);
    3a7e:	af e4       	ldi	r26, 0x4F	; 79
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	ef e4       	ldi	r30, 0x4F	; 79
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	8c 60       	ori	r24, 0x0C	; 12
    3a8a:	8c 93       	st	X, r24
	if((Config_Ptr->mode)==Compare)
    3a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a90:	87 81       	ldd	r24, Z+7	; 0x07
    3a92:	81 30       	cpi	r24, 0x01	; 1
    3a94:	39 f5       	brne	.+78     	; 0x3ae4 <Timer1_init+0x74>
	{
		TCNT1 =Config_Ptr->initial_value;
    3a96:	ac e4       	ldi	r26, 0x4C	; 76
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9e:	80 81       	ld	r24, Z
    3aa0:	91 81       	ldd	r25, Z+1	; 0x01
    3aa2:	11 96       	adiw	r26, 0x01	; 1
    3aa4:	9c 93       	st	X, r25
    3aa6:	8e 93       	st	-X, r24
		TCCR1B = (1<<WGM12) ;
    3aa8:	ee e4       	ldi	r30, 0x4E	; 78
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	88 e0       	ldi	r24, 0x08	; 8
    3aae:	80 83       	st	Z, r24
#if(CMP_UNITA)
		OCR1B =Config_Ptr->compare_value;
    3ab0:	28 e4       	ldi	r18, 0x48	; 72
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab8:	82 81       	ldd	r24, Z+2	; 0x02
    3aba:	93 81       	ldd	r25, Z+3	; 0x03
    3abc:	a4 81       	ldd	r26, Z+4	; 0x04
    3abe:	b5 81       	ldd	r27, Z+5	; 0x05
    3ac0:	f9 01       	movw	r30, r18
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1A1);
    3ac6:	af e4       	ldi	r26, 0x4F	; 79
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	ef e4       	ldi	r30, 0x4F	; 79
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	80 81       	ld	r24, Z
    3ad0:	80 68       	ori	r24, 0x80	; 128
    3ad2:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1A);
    3ad4:	a9 e5       	ldi	r26, 0x59	; 89
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	e9 e5       	ldi	r30, 0x59	; 89
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	80 81       	ld	r24, Z
    3ade:	80 61       	ori	r24, 0x10	; 16
    3ae0:	8c 93       	st	X, r24
    3ae2:	15 c0       	rjmp	.+42     	; 0x3b0e <Timer1_init+0x9e>
		TCCR1A|=(1<<COM1B1);
		TIMSK |= (1<<OCIE1B);
#endif
	}

	else if((Config_Ptr->mode)==Normal)
    3ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae8:	87 81       	ldd	r24, Z+7	; 0x07
    3aea:	88 23       	and	r24, r24
    3aec:	81 f4       	brne	.+32     	; 0x3b0e <Timer1_init+0x9e>
	{
		TCNT1 =Config_Ptr->initial_value;
    3aee:	ac e4       	ldi	r26, 0x4C	; 76
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e9 81       	ldd	r30, Y+1	; 0x01
    3af4:	fa 81       	ldd	r31, Y+2	; 0x02
    3af6:	80 81       	ld	r24, Z
    3af8:	91 81       	ldd	r25, Z+1	; 0x01
    3afa:	11 96       	adiw	r26, 0x01	; 1
    3afc:	9c 93       	st	X, r25
    3afe:	8e 93       	st	-X, r24
		TIMSK |= (1<<TOIE1);
    3b00:	a9 e5       	ldi	r26, 0x59	; 89
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	e9 e5       	ldi	r30, 0x59	; 89
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	84 60       	ori	r24, 0x04	; 4
    3b0c:	8c 93       	st	X, r24
	}
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->prescaler) & 0x07);
    3b0e:	ae e4       	ldi	r26, 0x4E	; 78
    3b10:	b0 e0       	ldi	r27, 0x00	; 0
    3b12:	ee e4       	ldi	r30, 0x4E	; 78
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	80 81       	ld	r24, Z
    3b18:	98 2f       	mov	r25, r24
    3b1a:	98 7f       	andi	r25, 0xF8	; 248
    3b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b20:	86 81       	ldd	r24, Z+6	; 0x06
    3b22:	87 70       	andi	r24, 0x07	; 7
    3b24:	89 2b       	or	r24, r25
    3b26:	8c 93       	st	X, r24

		}
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <Timer1_deInit>:
void Timer1_deInit(void)
	{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
TCCR1B&=~(1<<CS10)&~(1<<CS11)&~(1<<CS12);
    3b3a:	ae e4       	ldi	r26, 0x4E	; 78
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	ee e4       	ldi	r30, 0x4E	; 78
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	88 7f       	andi	r24, 0xF8	; 248
    3b46:	8c 93       	st	X, r24
}
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	00 d0       	rcall	.+0      	; 0x3b54 <TIMER1_setCallBack+0x6>
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	9a 83       	std	Y+2, r25	; 0x02
    3b5a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr  ;
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b60:	90 93 13 01 	sts	0x0113, r25
    3b64:	80 93 12 01 	sts	0x0112, r24
}
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	cf 91       	pop	r28
    3b6e:	df 91       	pop	r29
    3b70:	08 95       	ret

00003b72 <UART_sendByte>:
uint16 ubrr_value = 0;



void UART_sendByte(uint8 data)
{
    3b72:	df 93       	push	r29
    3b74:	cf 93       	push	r28
    3b76:	0f 92       	push	r0
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	89 83       	std	Y+1, r24	; 0x01
#if(!(USART_interrupt_SENDER))
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3b7e:	eb e2       	ldi	r30, 0x2B	; 43
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	88 2f       	mov	r24, r24
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	80 72       	andi	r24, 0x20	; 32
    3b8a:	90 70       	andi	r25, 0x00	; 0
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	b9 f3       	breq	.-18     	; 0x3b7e <UART_sendByte+0xc>
	UDR = data;
    3b90:	ec e2       	ldi	r30, 0x2C	; 44
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	80 83       	st	Z, r24
#else

#endif
}
    3b98:	0f 90       	pop	r0
    3b9a:	cf 91       	pop	r28
    3b9c:	df 91       	pop	r29
    3b9e:	08 95       	ret

00003ba0 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    3ba0:	df 93       	push	r29
    3ba2:	cf 93       	push	r28
    3ba4:	cd b7       	in	r28, 0x3d	; 61
    3ba6:	de b7       	in	r29, 0x3e	; 62
#if(!(USART_interrupt_RECEIVER))
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3ba8:	eb e2       	ldi	r30, 0x2B	; 43
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	88 23       	and	r24, r24
    3bb0:	dc f7       	brge	.-10     	; 0x3ba8 <UART_receiveByte+0x8>
	return UDR;
    3bb2:	ec e2       	ldi	r30, 0x2C	; 44
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
#else
	return UDR;
#endif
}
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	08 95       	ret

00003bbe <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <UART_sendString+0x6>
    3bc4:	0f 92       	push	r0
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	9b 83       	std	Y+3, r25	; 0x03
    3bcc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bce:	19 82       	std	Y+1, r1	; 0x01
    3bd0:	0e c0       	rjmp	.+28     	; 0x3bee <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	28 2f       	mov	r18, r24
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	9b 81       	ldd	r25, Y+3	; 0x03
    3bdc:	fc 01       	movw	r30, r24
    3bde:	e2 0f       	add	r30, r18
    3be0:	f3 1f       	adc	r31, r19
    3be2:	80 81       	ld	r24, Z
    3be4:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <UART_sendByte>
		i++;
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	8f 5f       	subi	r24, 0xFF	; 255
    3bec:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	28 2f       	mov	r18, r24
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	e2 0f       	add	r30, r18
    3bfc:	f3 1f       	adc	r31, r19
    3bfe:	80 81       	ld	r24, Z
    3c00:	88 23       	and	r24, r24
    3c02:	39 f7       	brne	.-50     	; 0x3bd2 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <UART_receiveString>:
void UART_receiveString(uint8 *Str)
{
    3c10:	0f 93       	push	r16
    3c12:	1f 93       	push	r17
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <UART_receiveString+0xa>
    3c1a:	0f 92       	push	r0
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	9b 83       	std	Y+3, r25	; 0x03
    3c22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c24:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	28 2f       	mov	r18, r24
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c30:	8c 01       	movw	r16, r24
    3c32:	02 0f       	add	r16, r18
    3c34:	13 1f       	adc	r17, r19
    3c36:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <UART_receiveByte>
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	80 83       	st	Z, r24
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	8f 5f       	subi	r24, 0xFF	; 255
    3c44:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	28 2f       	mov	r18, r24
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c50:	8c 01       	movw	r16, r24
    3c52:	02 0f       	add	r16, r18
    3c54:	13 1f       	adc	r17, r19
    3c56:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <UART_receiveByte>
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	28 2f       	mov	r18, r24
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	9b 81       	ldd	r25, Y+3	; 0x03
    3c68:	fc 01       	movw	r30, r24
    3c6a:	e2 0f       	add	r30, r18
    3c6c:	f3 1f       	adc	r31, r19
    3c6e:	80 81       	ld	r24, Z
    3c70:	83 32       	cpi	r24, 0x23	; 35
    3c72:	31 f7       	brne	.-52     	; 0x3c40 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	28 2f       	mov	r18, r24
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7e:	fc 01       	movw	r30, r24
    3c80:	e2 0f       	add	r30, r18
    3c82:	f3 1f       	adc	r31, r19
    3c84:	10 82       	st	Z, r1
}
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	1f 91       	pop	r17
    3c92:	0f 91       	pop	r16
    3c94:	08 95       	ret

00003c96 <UART_init>:
//void UART_init(uint32 baud_rate,const USART_ConfigType * Config_Ptr)
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <UART_init+0x6>
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	9a 83       	std	Y+2, r25	; 0x02
    3ca2:	89 83       	std	Y+1, r24	; 0x01
#if(USARTASYNCDOUBLE_SPEED_MODE)
	SET_BIT(UCSRA,U2X);
    3ca4:	ab e2       	ldi	r26, 0x2B	; 43
    3ca6:	b0 e0       	ldi	r27, 0x00	; 0
    3ca8:	eb e2       	ldi	r30, 0x2B	; 43
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	80 81       	ld	r24, Z
    3cae:	82 60       	ori	r24, 0x02	; 2
    3cb0:	8c 93       	st	X, r24
	ISR(USART_UDRE_vect)
		{
		UDR = data;
		}
#endif
	SET_BIT(UCSRC,URSEL);
    3cb2:	a0 e4       	ldi	r26, 0x40	; 64
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	e0 e4       	ldi	r30, 0x40	; 64
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	80 68       	ori	r24, 0x80	; 128
    3cbe:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    3cc0:	aa e2       	ldi	r26, 0x2A	; 42
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	ea e2       	ldi	r30, 0x2A	; 42
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	80 61       	ori	r24, 0x10	; 16
    3ccc:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    3cce:	aa e2       	ldi	r26, 0x2A	; 42
    3cd0:	b0 e0       	ldi	r27, 0x00	; 0
    3cd2:	ea e2       	ldi	r30, 0x2A	; 42
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 81       	ld	r24, Z
    3cd8:	88 60       	ori	r24, 0x08	; 8
    3cda:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2);
    3cdc:	aa e2       	ldi	r26, 0x2A	; 42
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	ea e2       	ldi	r30, 0x2A	; 42
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	8b 7f       	andi	r24, 0xFB	; 251
    3ce8:	8c 93       	st	X, r24

#if(USARTSYNC_MODE)
	SET_BIT(UCSRC,UMSEL);
	UCSRC|=(Config_Ptr->clock<<UCPOL);
#endif
	UCSRC|=((Config_Ptr->parity)<<UPM0);
    3cea:	a0 e4       	ldi	r26, 0x40	; 64
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	e0 e4       	ldi	r30, 0x40	; 64
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	28 2f       	mov	r18, r24
    3cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cfa:	80 81       	ld	r24, Z
    3cfc:	88 2f       	mov	r24, r24
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	82 95       	swap	r24
    3d02:	92 95       	swap	r25
    3d04:	90 7f       	andi	r25, 0xF0	; 240
    3d06:	98 27       	eor	r25, r24
    3d08:	80 7f       	andi	r24, 0xF0	; 240
    3d0a:	98 27       	eor	r25, r24
    3d0c:	82 2b       	or	r24, r18
    3d0e:	8c 93       	st	X, r24
	UCSRC|=((Config_Ptr->stopbit)<<USBS);
    3d10:	a0 e4       	ldi	r26, 0x40	; 64
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	e0 e4       	ldi	r30, 0x40	; 64
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	28 2f       	mov	r18, r24
    3d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d20:	81 81       	ldd	r24, Z+1	; 0x01
    3d22:	88 2f       	mov	r24, r24
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	88 0f       	add	r24, r24
    3d28:	99 1f       	adc	r25, r25
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	82 2b       	or	r24, r18
    3d34:	8c 93       	st	X, r24
	UCSRC|=((Config_Ptr->size)<<UCSZ0);
    3d36:	a0 e4       	ldi	r26, 0x40	; 64
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	e0 e4       	ldi	r30, 0x40	; 64
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	80 81       	ld	r24, Z
    3d40:	28 2f       	mov	r18, r24
    3d42:	e9 81       	ldd	r30, Y+1	; 0x01
    3d44:	fa 81       	ldd	r31, Y+2	; 0x02
    3d46:	82 81       	ldd	r24, Z+2	; 0x02
    3d48:	88 2f       	mov	r24, r24
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	88 0f       	add	r24, r24
    3d4e:	99 1f       	adc	r25, r25
    3d50:	82 2b       	or	r24, r18
    3d52:	8c 93       	st	X, r24
//UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	//UCSRC|=(Config_Ptr->clock<<UCPOL);
#if(USartAycnNormal_MODE)
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate)* 16UL))) - 1);
#elif(USARTASYNCDOUBLE_SPEED_MODE)
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3d54:	e9 81       	ldd	r30, Y+1	; 0x01
    3d56:	fa 81       	ldd	r31, Y+2	; 0x02
    3d58:	83 81       	ldd	r24, Z+3	; 0x03
    3d5a:	94 81       	ldd	r25, Z+4	; 0x04
    3d5c:	a5 81       	ldd	r26, Z+5	; 0x05
    3d5e:	b6 81       	ldd	r27, Z+6	; 0x06
    3d60:	88 0f       	add	r24, r24
    3d62:	99 1f       	adc	r25, r25
    3d64:	aa 1f       	adc	r26, r26
    3d66:	bb 1f       	adc	r27, r27
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	aa 1f       	adc	r26, r26
    3d6e:	bb 1f       	adc	r27, r27
    3d70:	88 0f       	add	r24, r24
    3d72:	99 1f       	adc	r25, r25
    3d74:	aa 1f       	adc	r26, r26
    3d76:	bb 1f       	adc	r27, r27
    3d78:	9c 01       	movw	r18, r24
    3d7a:	ad 01       	movw	r20, r26
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	92 e1       	ldi	r25, 0x12	; 18
    3d80:	aa e7       	ldi	r26, 0x7A	; 122
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__udivmodsi4>
    3d8c:	da 01       	movw	r26, r20
    3d8e:	c9 01       	movw	r24, r18
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	90 93 15 01 	sts	0x0115, r25
    3d96:	80 93 14 01 	sts	0x0114, r24
#elif(USARTSYNC_MODE)
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 2UL))) - 1);
#endif
	UBRRH = ubrr_value>>8;
    3d9a:	e0 e4       	ldi	r30, 0x40	; 64
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	80 91 14 01 	lds	r24, 0x0114
    3da2:	90 91 15 01 	lds	r25, 0x0115
    3da6:	89 2f       	mov	r24, r25
    3da8:	99 27       	eor	r25, r25
    3daa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3dac:	e9 e2       	ldi	r30, 0x29	; 41
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	80 91 14 01 	lds	r24, 0x0114
    3db4:	90 91 15 01 	lds	r25, 0x0115
    3db8:	80 83       	st	Z, r24
}
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <__udivmodsi4>:
    3dc4:	a1 e2       	ldi	r26, 0x21	; 33
    3dc6:	1a 2e       	mov	r1, r26
    3dc8:	aa 1b       	sub	r26, r26
    3dca:	bb 1b       	sub	r27, r27
    3dcc:	fd 01       	movw	r30, r26
    3dce:	0d c0       	rjmp	.+26     	; 0x3dea <__udivmodsi4_ep>

00003dd0 <__udivmodsi4_loop>:
    3dd0:	aa 1f       	adc	r26, r26
    3dd2:	bb 1f       	adc	r27, r27
    3dd4:	ee 1f       	adc	r30, r30
    3dd6:	ff 1f       	adc	r31, r31
    3dd8:	a2 17       	cp	r26, r18
    3dda:	b3 07       	cpc	r27, r19
    3ddc:	e4 07       	cpc	r30, r20
    3dde:	f5 07       	cpc	r31, r21
    3de0:	20 f0       	brcs	.+8      	; 0x3dea <__udivmodsi4_ep>
    3de2:	a2 1b       	sub	r26, r18
    3de4:	b3 0b       	sbc	r27, r19
    3de6:	e4 0b       	sbc	r30, r20
    3de8:	f5 0b       	sbc	r31, r21

00003dea <__udivmodsi4_ep>:
    3dea:	66 1f       	adc	r22, r22
    3dec:	77 1f       	adc	r23, r23
    3dee:	88 1f       	adc	r24, r24
    3df0:	99 1f       	adc	r25, r25
    3df2:	1a 94       	dec	r1
    3df4:	69 f7       	brne	.-38     	; 0x3dd0 <__udivmodsi4_loop>
    3df6:	60 95       	com	r22
    3df8:	70 95       	com	r23
    3dfa:	80 95       	com	r24
    3dfc:	90 95       	com	r25
    3dfe:	9b 01       	movw	r18, r22
    3e00:	ac 01       	movw	r20, r24
    3e02:	bd 01       	movw	r22, r26
    3e04:	cf 01       	movw	r24, r30
    3e06:	08 95       	ret

00003e08 <__prologue_saves__>:
    3e08:	2f 92       	push	r2
    3e0a:	3f 92       	push	r3
    3e0c:	4f 92       	push	r4
    3e0e:	5f 92       	push	r5
    3e10:	6f 92       	push	r6
    3e12:	7f 92       	push	r7
    3e14:	8f 92       	push	r8
    3e16:	9f 92       	push	r9
    3e18:	af 92       	push	r10
    3e1a:	bf 92       	push	r11
    3e1c:	cf 92       	push	r12
    3e1e:	df 92       	push	r13
    3e20:	ef 92       	push	r14
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	cf 93       	push	r28
    3e2a:	df 93       	push	r29
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	ca 1b       	sub	r28, r26
    3e32:	db 0b       	sbc	r29, r27
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	09 94       	ijmp

00003e40 <__epilogue_restores__>:
    3e40:	2a 88       	ldd	r2, Y+18	; 0x12
    3e42:	39 88       	ldd	r3, Y+17	; 0x11
    3e44:	48 88       	ldd	r4, Y+16	; 0x10
    3e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e52:	b9 84       	ldd	r11, Y+9	; 0x09
    3e54:	c8 84       	ldd	r12, Y+8	; 0x08
    3e56:	df 80       	ldd	r13, Y+7	; 0x07
    3e58:	ee 80       	ldd	r14, Y+6	; 0x06
    3e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e60:	aa 81       	ldd	r26, Y+2	; 0x02
    3e62:	b9 81       	ldd	r27, Y+1	; 0x01
    3e64:	ce 0f       	add	r28, r30
    3e66:	d1 1d       	adc	r29, r1
    3e68:	0f b6       	in	r0, 0x3f	; 63
    3e6a:	f8 94       	cli
    3e6c:	de bf       	out	0x3e, r29	; 62
    3e6e:	0f be       	out	0x3f, r0	; 63
    3e70:	cd bf       	out	0x3d, r28	; 61
    3e72:	ed 01       	movw	r28, r26
    3e74:	08 95       	ret

00003e76 <itoa>:
    3e76:	fb 01       	movw	r30, r22
    3e78:	9f 01       	movw	r18, r30
    3e7a:	e8 94       	clt
    3e7c:	42 30       	cpi	r20, 0x02	; 2
    3e7e:	c4 f0       	brlt	.+48     	; 0x3eb0 <itoa+0x3a>
    3e80:	45 32       	cpi	r20, 0x25	; 37
    3e82:	b4 f4       	brge	.+44     	; 0x3eb0 <itoa+0x3a>
    3e84:	4a 30       	cpi	r20, 0x0A	; 10
    3e86:	29 f4       	brne	.+10     	; 0x3e92 <itoa+0x1c>
    3e88:	97 fb       	bst	r25, 7
    3e8a:	1e f4       	brtc	.+6      	; 0x3e92 <itoa+0x1c>
    3e8c:	90 95       	com	r25
    3e8e:	81 95       	neg	r24
    3e90:	9f 4f       	sbci	r25, 0xFF	; 255
    3e92:	64 2f       	mov	r22, r20
    3e94:	77 27       	eor	r23, r23
    3e96:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__udivmodhi4>
    3e9a:	80 5d       	subi	r24, 0xD0	; 208
    3e9c:	8a 33       	cpi	r24, 0x3A	; 58
    3e9e:	0c f0       	brlt	.+2      	; 0x3ea2 <itoa+0x2c>
    3ea0:	89 5d       	subi	r24, 0xD9	; 217
    3ea2:	81 93       	st	Z+, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	a1 f7       	brne	.-24     	; 0x3e92 <itoa+0x1c>
    3eaa:	16 f4       	brtc	.+4      	; 0x3eb0 <itoa+0x3a>
    3eac:	5d e2       	ldi	r21, 0x2D	; 45
    3eae:	51 93       	st	Z+, r21
    3eb0:	10 82       	st	Z, r1
    3eb2:	c9 01       	movw	r24, r18
    3eb4:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <strrev>

00003eb8 <strrev>:
    3eb8:	dc 01       	movw	r26, r24
    3eba:	fc 01       	movw	r30, r24
    3ebc:	67 2f       	mov	r22, r23
    3ebe:	71 91       	ld	r23, Z+
    3ec0:	77 23       	and	r23, r23
    3ec2:	e1 f7       	brne	.-8      	; 0x3ebc <strrev+0x4>
    3ec4:	32 97       	sbiw	r30, 0x02	; 2
    3ec6:	04 c0       	rjmp	.+8      	; 0x3ed0 <strrev+0x18>
    3ec8:	7c 91       	ld	r23, X
    3eca:	6d 93       	st	X+, r22
    3ecc:	70 83       	st	Z, r23
    3ece:	62 91       	ld	r22, -Z
    3ed0:	ae 17       	cp	r26, r30
    3ed2:	bf 07       	cpc	r27, r31
    3ed4:	c8 f3       	brcs	.-14     	; 0x3ec8 <strrev+0x10>
    3ed6:	08 95       	ret

00003ed8 <__udivmodhi4>:
    3ed8:	aa 1b       	sub	r26, r26
    3eda:	bb 1b       	sub	r27, r27
    3edc:	51 e1       	ldi	r21, 0x11	; 17
    3ede:	07 c0       	rjmp	.+14     	; 0x3eee <__udivmodhi4_ep>

00003ee0 <__udivmodhi4_loop>:
    3ee0:	aa 1f       	adc	r26, r26
    3ee2:	bb 1f       	adc	r27, r27
    3ee4:	a6 17       	cp	r26, r22
    3ee6:	b7 07       	cpc	r27, r23
    3ee8:	10 f0       	brcs	.+4      	; 0x3eee <__udivmodhi4_ep>
    3eea:	a6 1b       	sub	r26, r22
    3eec:	b7 0b       	sbc	r27, r23

00003eee <__udivmodhi4_ep>:
    3eee:	88 1f       	adc	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	5a 95       	dec	r21
    3ef4:	a9 f7       	brne	.-22     	; 0x3ee0 <__udivmodhi4_loop>
    3ef6:	80 95       	com	r24
    3ef8:	90 95       	com	r25
    3efa:	bc 01       	movw	r22, r24
    3efc:	cd 01       	movw	r24, r26
    3efe:	08 95       	ret

00003f00 <_exit>:
    3f00:	f8 94       	cli

00003f02 <__stop_program>:
    3f02:	ff cf       	rjmp	.-2      	; 0x3f02 <__stop_program>
